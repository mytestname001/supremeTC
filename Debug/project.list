
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080052d8  080052d8  000152d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053f0  080053f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080053f0  080053f0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053f0  080053f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053f0  080053f0  000153f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053f4  080053f4  000153f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080053f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000070  08005468  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08005468  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d822  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000203c  00000000  00000000  0002d8bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  0002f8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  000306a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d8d  00000000  00000000  00031390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd30  00000000  00000000  0004a11d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091134  00000000  00000000  00057e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e8f81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000410c  00000000  00000000  000e8fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080052c0 	.word	0x080052c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080052c0 	.word	0x080052c0

0800014c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE//use printf in usart2
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <__io_putchar+0x20>)
 800015e:	f003 ff3c 	bl	8003fda <HAL_UART_Transmit>
	return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	200002dc 	.word	0x200002dc

08000170 <Uart_Tx_Byte>:

void Uart_Tx_Byte(char TxData, char Parity)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	460a      	mov	r2, r1
 800017a:	71fb      	strb	r3, [r7, #7]
 800017c:	4613      	mov	r3, r2
 800017e:	71bb      	strb	r3, [r7, #6]
	char chExit = 'n';
 8000180:	236e      	movs	r3, #110	; 0x6e
 8000182:	73fb      	strb	r3, [r7, #15]
	char chComp = 0x01;
 8000184:	2301      	movs	r3, #1
 8000186:	73bb      	strb	r3, [r7, #14]
	int ParityBit_cnt = 0;
 8000188:	2300      	movs	r3, #0
 800018a:	60bb      	str	r3, [r7, #8]

	tim2_cnt = 0;
 800018c:	4ba5      	ldr	r3, [pc, #660]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 800018e:	2200      	movs	r2, #0
 8000190:	601a      	str	r2, [r3, #0]
	tim2_flag = 'y';
 8000192:	4ba5      	ldr	r3, [pc, #660]	; (8000428 <Uart_Tx_Byte+0x2b8>)
 8000194:	2279      	movs	r2, #121	; 0x79
 8000196:	701a      	strb	r2, [r3, #0]
	tim2_trigger = 'n';
 8000198:	4ba4      	ldr	r3, [pc, #656]	; (800042c <Uart_Tx_Byte+0x2bc>)
 800019a:	226e      	movs	r2, #110	; 0x6e
 800019c:	701a      	strb	r2, [r3, #0]

	while(1){
		if(('y' == tim2_trigger) && (tim2_cnt == 1))
 800019e:	4ba3      	ldr	r3, [pc, #652]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	2b79      	cmp	r3, #121	; 0x79
 80001a4:	d10c      	bne.n	80001c0 <Uart_Tx_Byte+0x50>
 80001a6:	4b9f      	ldr	r3, [pc, #636]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	2b01      	cmp	r3, #1
 80001ac:	d108      	bne.n	80001c0 <Uart_Tx_Byte+0x50>
		{ // idle
			tim2_trigger = 'n';
 80001ae:	4b9f      	ldr	r3, [pc, #636]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80001b0:	226e      	movs	r2, #110	; 0x6e
 80001b2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80001b4:	2201      	movs	r2, #1
 80001b6:	2101      	movs	r1, #1
 80001b8:	489d      	ldr	r0, [pc, #628]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 80001ba:	f002 f856 	bl	800226a <HAL_GPIO_WritePin>
 80001be:	e18b      	b.n	80004d8 <Uart_Tx_Byte+0x368>
		}
		else if(('y' == tim2_trigger) && (tim2_cnt == 2))
 80001c0:	4b9a      	ldr	r3, [pc, #616]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	2b79      	cmp	r3, #121	; 0x79
 80001c6:	d10c      	bne.n	80001e2 <Uart_Tx_Byte+0x72>
 80001c8:	4b96      	ldr	r3, [pc, #600]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	2b02      	cmp	r3, #2
 80001ce:	d108      	bne.n	80001e2 <Uart_Tx_Byte+0x72>
		{ // start
			tim2_trigger = 'n';
 80001d0:	4b96      	ldr	r3, [pc, #600]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80001d2:	226e      	movs	r2, #110	; 0x6e
 80001d4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80001d6:	2200      	movs	r2, #0
 80001d8:	2101      	movs	r1, #1
 80001da:	4895      	ldr	r0, [pc, #596]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 80001dc:	f002 f845 	bl	800226a <HAL_GPIO_WritePin>
 80001e0:	e17a      	b.n	80004d8 <Uart_Tx_Byte+0x368>
		}
		else if(('y' == tim2_trigger) && (tim2_cnt == 3))
 80001e2:	4b92      	ldr	r3, [pc, #584]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	2b79      	cmp	r3, #121	; 0x79
 80001e8:	d11f      	bne.n	800022a <Uart_Tx_Byte+0xba>
 80001ea:	4b8e      	ldr	r3, [pc, #568]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	2b03      	cmp	r3, #3
 80001f0:	d11b      	bne.n	800022a <Uart_Tx_Byte+0xba>
		{ // bit 0
			tim2_trigger = 'n';
 80001f2:	4b8e      	ldr	r3, [pc, #568]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80001f4:	226e      	movs	r2, #110	; 0x6e
 80001f6:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp)
 80001f8:	79fa      	ldrb	r2, [r7, #7]
 80001fa:	7bbb      	ldrb	r3, [r7, #14]
 80001fc:	4013      	ands	r3, r2
 80001fe:	b2db      	uxtb	r3, r3
 8000200:	7bba      	ldrb	r2, [r7, #14]
 8000202:	429a      	cmp	r2, r3
 8000204:	d108      	bne.n	8000218 <Uart_Tx_Byte+0xa8>
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000206:	2201      	movs	r2, #1
 8000208:	2101      	movs	r1, #1
 800020a:	4889      	ldr	r0, [pc, #548]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 800020c:	f002 f82d 	bl	800226a <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 8000210:	68bb      	ldr	r3, [r7, #8]
 8000212:	3301      	adds	r3, #1
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	e004      	b.n	8000222 <Uart_Tx_Byte+0xb2>
			}
			else
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000218:	2200      	movs	r2, #0
 800021a:	2101      	movs	r1, #1
 800021c:	4884      	ldr	r0, [pc, #528]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 800021e:	f002 f824 	bl	800226a <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 8000222:	7bbb      	ldrb	r3, [r7, #14]
 8000224:	005b      	lsls	r3, r3, #1
 8000226:	73bb      	strb	r3, [r7, #14]
 8000228:	e156      	b.n	80004d8 <Uart_Tx_Byte+0x368>
		}
		else if(('y' == tim2_trigger) && (tim2_cnt == 4))
 800022a:	4b80      	ldr	r3, [pc, #512]	; (800042c <Uart_Tx_Byte+0x2bc>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	2b79      	cmp	r3, #121	; 0x79
 8000230:	d11f      	bne.n	8000272 <Uart_Tx_Byte+0x102>
 8000232:	4b7c      	ldr	r3, [pc, #496]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2b04      	cmp	r3, #4
 8000238:	d11b      	bne.n	8000272 <Uart_Tx_Byte+0x102>
		{ // bit 1
			tim2_trigger = 'n';
 800023a:	4b7c      	ldr	r3, [pc, #496]	; (800042c <Uart_Tx_Byte+0x2bc>)
 800023c:	226e      	movs	r2, #110	; 0x6e
 800023e:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp)
 8000240:	79fa      	ldrb	r2, [r7, #7]
 8000242:	7bbb      	ldrb	r3, [r7, #14]
 8000244:	4013      	ands	r3, r2
 8000246:	b2db      	uxtb	r3, r3
 8000248:	7bba      	ldrb	r2, [r7, #14]
 800024a:	429a      	cmp	r2, r3
 800024c:	d108      	bne.n	8000260 <Uart_Tx_Byte+0xf0>
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800024e:	2201      	movs	r2, #1
 8000250:	2101      	movs	r1, #1
 8000252:	4877      	ldr	r0, [pc, #476]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 8000254:	f002 f809 	bl	800226a <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 8000258:	68bb      	ldr	r3, [r7, #8]
 800025a:	3301      	adds	r3, #1
 800025c:	60bb      	str	r3, [r7, #8]
 800025e:	e004      	b.n	800026a <Uart_Tx_Byte+0xfa>
			}
			else
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000260:	2200      	movs	r2, #0
 8000262:	2101      	movs	r1, #1
 8000264:	4872      	ldr	r0, [pc, #456]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 8000266:	f002 f800 	bl	800226a <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 800026a:	7bbb      	ldrb	r3, [r7, #14]
 800026c:	005b      	lsls	r3, r3, #1
 800026e:	73bb      	strb	r3, [r7, #14]
 8000270:	e132      	b.n	80004d8 <Uart_Tx_Byte+0x368>
		}
		else if(('y' == tim2_trigger) && (tim2_cnt == 5))
 8000272:	4b6e      	ldr	r3, [pc, #440]	; (800042c <Uart_Tx_Byte+0x2bc>)
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	2b79      	cmp	r3, #121	; 0x79
 8000278:	d11f      	bne.n	80002ba <Uart_Tx_Byte+0x14a>
 800027a:	4b6a      	ldr	r3, [pc, #424]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2b05      	cmp	r3, #5
 8000280:	d11b      	bne.n	80002ba <Uart_Tx_Byte+0x14a>
		{ // bit 2
			tim2_trigger = 'n';
 8000282:	4b6a      	ldr	r3, [pc, #424]	; (800042c <Uart_Tx_Byte+0x2bc>)
 8000284:	226e      	movs	r2, #110	; 0x6e
 8000286:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp)
 8000288:	79fa      	ldrb	r2, [r7, #7]
 800028a:	7bbb      	ldrb	r3, [r7, #14]
 800028c:	4013      	ands	r3, r2
 800028e:	b2db      	uxtb	r3, r3
 8000290:	7bba      	ldrb	r2, [r7, #14]
 8000292:	429a      	cmp	r2, r3
 8000294:	d108      	bne.n	80002a8 <Uart_Tx_Byte+0x138>
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000296:	2201      	movs	r2, #1
 8000298:	2101      	movs	r1, #1
 800029a:	4865      	ldr	r0, [pc, #404]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 800029c:	f001 ffe5 	bl	800226a <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	3301      	adds	r3, #1
 80002a4:	60bb      	str	r3, [r7, #8]
 80002a6:	e004      	b.n	80002b2 <Uart_Tx_Byte+0x142>
			}
			else
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80002a8:	2200      	movs	r2, #0
 80002aa:	2101      	movs	r1, #1
 80002ac:	4860      	ldr	r0, [pc, #384]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 80002ae:	f001 ffdc 	bl	800226a <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 80002b2:	7bbb      	ldrb	r3, [r7, #14]
 80002b4:	005b      	lsls	r3, r3, #1
 80002b6:	73bb      	strb	r3, [r7, #14]
 80002b8:	e10e      	b.n	80004d8 <Uart_Tx_Byte+0x368>
		}
		else if(('y' == tim2_trigger) && (tim2_cnt == 6)){ // bit 3
 80002ba:	4b5c      	ldr	r3, [pc, #368]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b79      	cmp	r3, #121	; 0x79
 80002c0:	d11f      	bne.n	8000302 <Uart_Tx_Byte+0x192>
 80002c2:	4b58      	ldr	r3, [pc, #352]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	2b06      	cmp	r3, #6
 80002c8:	d11b      	bne.n	8000302 <Uart_Tx_Byte+0x192>
			tim2_trigger = 'n';
 80002ca:	4b58      	ldr	r3, [pc, #352]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80002cc:	226e      	movs	r2, #110	; 0x6e
 80002ce:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp)
 80002d0:	79fa      	ldrb	r2, [r7, #7]
 80002d2:	7bbb      	ldrb	r3, [r7, #14]
 80002d4:	4013      	ands	r3, r2
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	7bba      	ldrb	r2, [r7, #14]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d108      	bne.n	80002f0 <Uart_Tx_Byte+0x180>
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80002de:	2201      	movs	r2, #1
 80002e0:	2101      	movs	r1, #1
 80002e2:	4853      	ldr	r0, [pc, #332]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 80002e4:	f001 ffc1 	bl	800226a <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	3301      	adds	r3, #1
 80002ec:	60bb      	str	r3, [r7, #8]
 80002ee:	e004      	b.n	80002fa <Uart_Tx_Byte+0x18a>
			}
			else
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80002f0:	2200      	movs	r2, #0
 80002f2:	2101      	movs	r1, #1
 80002f4:	484e      	ldr	r0, [pc, #312]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 80002f6:	f001 ffb8 	bl	800226a <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 80002fa:	7bbb      	ldrb	r3, [r7, #14]
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	73bb      	strb	r3, [r7, #14]
 8000300:	e0ea      	b.n	80004d8 <Uart_Tx_Byte+0x368>
		}
		else if(('y' == tim2_trigger) && (tim2_cnt == 7))
 8000302:	4b4a      	ldr	r3, [pc, #296]	; (800042c <Uart_Tx_Byte+0x2bc>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2b79      	cmp	r3, #121	; 0x79
 8000308:	d11f      	bne.n	800034a <Uart_Tx_Byte+0x1da>
 800030a:	4b46      	ldr	r3, [pc, #280]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	2b07      	cmp	r3, #7
 8000310:	d11b      	bne.n	800034a <Uart_Tx_Byte+0x1da>
		{ // bit 4
			tim2_trigger = 'n';
 8000312:	4b46      	ldr	r3, [pc, #280]	; (800042c <Uart_Tx_Byte+0x2bc>)
 8000314:	226e      	movs	r2, #110	; 0x6e
 8000316:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp)
 8000318:	79fa      	ldrb	r2, [r7, #7]
 800031a:	7bbb      	ldrb	r3, [r7, #14]
 800031c:	4013      	ands	r3, r2
 800031e:	b2db      	uxtb	r3, r3
 8000320:	7bba      	ldrb	r2, [r7, #14]
 8000322:	429a      	cmp	r2, r3
 8000324:	d108      	bne.n	8000338 <Uart_Tx_Byte+0x1c8>
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000326:	2201      	movs	r2, #1
 8000328:	2101      	movs	r1, #1
 800032a:	4841      	ldr	r0, [pc, #260]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 800032c:	f001 ff9d 	bl	800226a <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	3301      	adds	r3, #1
 8000334:	60bb      	str	r3, [r7, #8]
 8000336:	e004      	b.n	8000342 <Uart_Tx_Byte+0x1d2>
			}
			else
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000338:	2200      	movs	r2, #0
 800033a:	2101      	movs	r1, #1
 800033c:	483c      	ldr	r0, [pc, #240]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 800033e:	f001 ff94 	bl	800226a <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 8000342:	7bbb      	ldrb	r3, [r7, #14]
 8000344:	005b      	lsls	r3, r3, #1
 8000346:	73bb      	strb	r3, [r7, #14]
 8000348:	e0c6      	b.n	80004d8 <Uart_Tx_Byte+0x368>
		}
		else if(('y' == tim2_trigger) && (tim2_cnt == 8))
 800034a:	4b38      	ldr	r3, [pc, #224]	; (800042c <Uart_Tx_Byte+0x2bc>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	2b79      	cmp	r3, #121	; 0x79
 8000350:	d11f      	bne.n	8000392 <Uart_Tx_Byte+0x222>
 8000352:	4b34      	ldr	r3, [pc, #208]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2b08      	cmp	r3, #8
 8000358:	d11b      	bne.n	8000392 <Uart_Tx_Byte+0x222>
		{ // bit 5
			tim2_trigger = 'n';
 800035a:	4b34      	ldr	r3, [pc, #208]	; (800042c <Uart_Tx_Byte+0x2bc>)
 800035c:	226e      	movs	r2, #110	; 0x6e
 800035e:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp)
 8000360:	79fa      	ldrb	r2, [r7, #7]
 8000362:	7bbb      	ldrb	r3, [r7, #14]
 8000364:	4013      	ands	r3, r2
 8000366:	b2db      	uxtb	r3, r3
 8000368:	7bba      	ldrb	r2, [r7, #14]
 800036a:	429a      	cmp	r2, r3
 800036c:	d108      	bne.n	8000380 <Uart_Tx_Byte+0x210>
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800036e:	2201      	movs	r2, #1
 8000370:	2101      	movs	r1, #1
 8000372:	482f      	ldr	r0, [pc, #188]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 8000374:	f001 ff79 	bl	800226a <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	3301      	adds	r3, #1
 800037c:	60bb      	str	r3, [r7, #8]
 800037e:	e004      	b.n	800038a <Uart_Tx_Byte+0x21a>
			}
			else
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	2101      	movs	r1, #1
 8000384:	482a      	ldr	r0, [pc, #168]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 8000386:	f001 ff70 	bl	800226a <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 800038a:	7bbb      	ldrb	r3, [r7, #14]
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	73bb      	strb	r3, [r7, #14]
 8000390:	e0a2      	b.n	80004d8 <Uart_Tx_Byte+0x368>
		}
		else if(('y' == tim2_trigger) && (tim2_cnt == 9))
 8000392:	4b26      	ldr	r3, [pc, #152]	; (800042c <Uart_Tx_Byte+0x2bc>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	2b79      	cmp	r3, #121	; 0x79
 8000398:	d11f      	bne.n	80003da <Uart_Tx_Byte+0x26a>
 800039a:	4b22      	ldr	r3, [pc, #136]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2b09      	cmp	r3, #9
 80003a0:	d11b      	bne.n	80003da <Uart_Tx_Byte+0x26a>
		{ // bit 6
			tim2_trigger = 'n';
 80003a2:	4b22      	ldr	r3, [pc, #136]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80003a4:	226e      	movs	r2, #110	; 0x6e
 80003a6:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp)
 80003a8:	79fa      	ldrb	r2, [r7, #7]
 80003aa:	7bbb      	ldrb	r3, [r7, #14]
 80003ac:	4013      	ands	r3, r2
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	7bba      	ldrb	r2, [r7, #14]
 80003b2:	429a      	cmp	r2, r3
 80003b4:	d108      	bne.n	80003c8 <Uart_Tx_Byte+0x258>
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2101      	movs	r1, #1
 80003ba:	481d      	ldr	r0, [pc, #116]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 80003bc:	f001 ff55 	bl	800226a <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	3301      	adds	r3, #1
 80003c4:	60bb      	str	r3, [r7, #8]
 80003c6:	e004      	b.n	80003d2 <Uart_Tx_Byte+0x262>
			}
			else
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	2101      	movs	r1, #1
 80003cc:	4818      	ldr	r0, [pc, #96]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 80003ce:	f001 ff4c 	bl	800226a <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 80003d2:	7bbb      	ldrb	r3, [r7, #14]
 80003d4:	005b      	lsls	r3, r3, #1
 80003d6:	73bb      	strb	r3, [r7, #14]
 80003d8:	e07e      	b.n	80004d8 <Uart_Tx_Byte+0x368>
		}
		else if(('y' == tim2_trigger) && (tim2_cnt == 10))
 80003da:	4b14      	ldr	r3, [pc, #80]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	2b79      	cmp	r3, #121	; 0x79
 80003e0:	d128      	bne.n	8000434 <Uart_Tx_Byte+0x2c4>
 80003e2:	4b10      	ldr	r3, [pc, #64]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	2b0a      	cmp	r3, #10
 80003e8:	d124      	bne.n	8000434 <Uart_Tx_Byte+0x2c4>
		{ // bit 7
			tim2_trigger = 'n';
 80003ea:	4b10      	ldr	r3, [pc, #64]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80003ec:	226e      	movs	r2, #110	; 0x6e
 80003ee:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp)
 80003f0:	79fa      	ldrb	r2, [r7, #7]
 80003f2:	7bbb      	ldrb	r3, [r7, #14]
 80003f4:	4013      	ands	r3, r2
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	7bba      	ldrb	r2, [r7, #14]
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d108      	bne.n	8000410 <Uart_Tx_Byte+0x2a0>
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80003fe:	2201      	movs	r2, #1
 8000400:	2101      	movs	r1, #1
 8000402:	480b      	ldr	r0, [pc, #44]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 8000404:	f001 ff31 	bl	800226a <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	3301      	adds	r3, #1
 800040c:	60bb      	str	r3, [r7, #8]
 800040e:	e004      	b.n	800041a <Uart_Tx_Byte+0x2aa>
			}
			else
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2101      	movs	r1, #1
 8000414:	4806      	ldr	r0, [pc, #24]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 8000416:	f001 ff28 	bl	800226a <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 800041a:	7bbb      	ldrb	r3, [r7, #14]
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	73bb      	strb	r3, [r7, #14]
 8000420:	e05a      	b.n	80004d8 <Uart_Tx_Byte+0x368>
 8000422:	bf00      	nop
 8000424:	200001b4 	.word	0x200001b4
 8000428:	200002d8 	.word	0x200002d8
 800042c:	2000013c 	.word	0x2000013c
 8000430:	40010800 	.word	0x40010800
		}
		else if(('y' == tim2_trigger) && (tim2_cnt == 11))
 8000434:	4b32      	ldr	r3, [pc, #200]	; (8000500 <Uart_Tx_Byte+0x390>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b79      	cmp	r3, #121	; 0x79
 800043a:	d13c      	bne.n	80004b6 <Uart_Tx_Byte+0x346>
 800043c:	4b31      	ldr	r3, [pc, #196]	; (8000504 <Uart_Tx_Byte+0x394>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2b0b      	cmp	r3, #11
 8000442:	d138      	bne.n	80004b6 <Uart_Tx_Byte+0x346>
		{ // [parity : none/even/odd] or [stop]
			tim2_trigger = 'n';
 8000444:	4b2e      	ldr	r3, [pc, #184]	; (8000500 <Uart_Tx_Byte+0x390>)
 8000446:	226e      	movs	r2, #110	; 0x6e
 8000448:	701a      	strb	r2, [r3, #0]
			if(Parity == 'n')
 800044a:	79bb      	ldrb	r3, [r7, #6]
 800044c:	2b6e      	cmp	r3, #110	; 0x6e
 800044e:	d107      	bne.n	8000460 <Uart_Tx_Byte+0x2f0>
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000450:	2201      	movs	r2, #1
 8000452:	2101      	movs	r1, #1
 8000454:	482c      	ldr	r0, [pc, #176]	; (8000508 <Uart_Tx_Byte+0x398>)
 8000456:	f001 ff08 	bl	800226a <HAL_GPIO_WritePin>
				chExit = 'y';
 800045a:	2379      	movs	r3, #121	; 0x79
 800045c:	73fb      	strb	r3, [r7, #15]
			if(Parity == 'n')
 800045e:	e03a      	b.n	80004d6 <Uart_Tx_Byte+0x366>
			}
			else if(Parity == 'e')
 8000460:	79bb      	ldrb	r3, [r7, #6]
 8000462:	2b65      	cmp	r3, #101	; 0x65
 8000464:	d110      	bne.n	8000488 <Uart_Tx_Byte+0x318>
			{
				if((ParityBit_cnt % 2) == 0)
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	f003 0301 	and.w	r3, r3, #1
 800046c:	2b00      	cmp	r3, #0
 800046e:	d105      	bne.n	800047c <Uart_Tx_Byte+0x30c>
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000470:	2200      	movs	r2, #0
 8000472:	2101      	movs	r1, #1
 8000474:	4824      	ldr	r0, [pc, #144]	; (8000508 <Uart_Tx_Byte+0x398>)
 8000476:	f001 fef8 	bl	800226a <HAL_GPIO_WritePin>
			if(Parity == 'n')
 800047a:	e02c      	b.n	80004d6 <Uart_Tx_Byte+0x366>
				}
				else
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800047c:	2201      	movs	r2, #1
 800047e:	2101      	movs	r1, #1
 8000480:	4821      	ldr	r0, [pc, #132]	; (8000508 <Uart_Tx_Byte+0x398>)
 8000482:	f001 fef2 	bl	800226a <HAL_GPIO_WritePin>
			if(Parity == 'n')
 8000486:	e026      	b.n	80004d6 <Uart_Tx_Byte+0x366>
				}
			}
			else if(Parity == 'o')
 8000488:	79bb      	ldrb	r3, [r7, #6]
 800048a:	2b6f      	cmp	r3, #111	; 0x6f
 800048c:	d123      	bne.n	80004d6 <Uart_Tx_Byte+0x366>
			{
				if((ParityBit_cnt % 2) == 1)
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	2b00      	cmp	r3, #0
 8000492:	f003 0301 	and.w	r3, r3, #1
 8000496:	bfb8      	it	lt
 8000498:	425b      	neglt	r3, r3
 800049a:	2b01      	cmp	r3, #1
 800049c:	d105      	bne.n	80004aa <Uart_Tx_Byte+0x33a>
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	2101      	movs	r1, #1
 80004a2:	4819      	ldr	r0, [pc, #100]	; (8000508 <Uart_Tx_Byte+0x398>)
 80004a4:	f001 fee1 	bl	800226a <HAL_GPIO_WritePin>
			if(Parity == 'n')
 80004a8:	e015      	b.n	80004d6 <Uart_Tx_Byte+0x366>
				}
				else
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80004aa:	2201      	movs	r2, #1
 80004ac:	2101      	movs	r1, #1
 80004ae:	4816      	ldr	r0, [pc, #88]	; (8000508 <Uart_Tx_Byte+0x398>)
 80004b0:	f001 fedb 	bl	800226a <HAL_GPIO_WritePin>
			if(Parity == 'n')
 80004b4:	e00f      	b.n	80004d6 <Uart_Tx_Byte+0x366>
				}
			}
		}
		else if(('y' == tim2_trigger) && (tim2_cnt == 12))
 80004b6:	4b12      	ldr	r3, [pc, #72]	; (8000500 <Uart_Tx_Byte+0x390>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b79      	cmp	r3, #121	; 0x79
 80004bc:	d10c      	bne.n	80004d8 <Uart_Tx_Byte+0x368>
 80004be:	4b11      	ldr	r3, [pc, #68]	; (8000504 <Uart_Tx_Byte+0x394>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	2b0c      	cmp	r3, #12
 80004c4:	d108      	bne.n	80004d8 <Uart_Tx_Byte+0x368>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80004c6:	2201      	movs	r2, #1
 80004c8:	2101      	movs	r1, #1
 80004ca:	480f      	ldr	r0, [pc, #60]	; (8000508 <Uart_Tx_Byte+0x398>)
 80004cc:	f001 fecd 	bl	800226a <HAL_GPIO_WritePin>
			chExit = 'y';
 80004d0:	2379      	movs	r3, #121	; 0x79
 80004d2:	73fb      	strb	r3, [r7, #15]
 80004d4:	e000      	b.n	80004d8 <Uart_Tx_Byte+0x368>
			if(Parity == 'n')
 80004d6:	bf00      	nop
		}
		if(('y' == tim2_trigger) && ('y' == chExit))
 80004d8:	4b09      	ldr	r3, [pc, #36]	; (8000500 <Uart_Tx_Byte+0x390>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2b79      	cmp	r3, #121	; 0x79
 80004de:	f47f ae5e 	bne.w	800019e <Uart_Tx_Byte+0x2e>
 80004e2:	7bfb      	ldrb	r3, [r7, #15]
 80004e4:	2b79      	cmp	r3, #121	; 0x79
 80004e6:	f47f ae5a 	bne.w	800019e <Uart_Tx_Byte+0x2e>
		{
			tim2_trigger = 'n';
 80004ea:	4b05      	ldr	r3, [pc, #20]	; (8000500 <Uart_Tx_Byte+0x390>)
 80004ec:	226e      	movs	r2, #110	; 0x6e
 80004ee:	701a      	strb	r2, [r3, #0]
			tim2_flag = 'n';
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <Uart_Tx_Byte+0x39c>)
 80004f2:	226e      	movs	r2, #110	; 0x6e
 80004f4:	701a      	strb	r2, [r3, #0]
			break;
 80004f6:	bf00      	nop
		}
	}
}
 80004f8:	bf00      	nop
 80004fa:	3710      	adds	r7, #16
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	2000013c 	.word	0x2000013c
 8000504:	200001b4 	.word	0x200001b4
 8000508:	40010800 	.word	0x40010800
 800050c:	200002d8 	.word	0x200002d8

08000510 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim3.Instance)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	4ba2      	ldr	r3, [pc, #648]	; (80007a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	429a      	cmp	r2, r3
 8000522:	f040 81ed 	bne.w	8000900 <HAL_TIM_PeriodElapsedCallback+0x3f0>
	{
		if('y' == tim2_flag)
 8000526:	4ba1      	ldr	r3, [pc, #644]	; (80007ac <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b79      	cmp	r3, #121	; 0x79
 800052c:	d117      	bne.n	800055e <HAL_TIM_PeriodElapsedCallback+0x4e>
		{
			globalCounter = globalCounter + 1;
 800052e:	4ba0      	ldr	r3, [pc, #640]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	3301      	adds	r3, #1
 8000534:	4a9e      	ldr	r2, [pc, #632]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000536:	6013      	str	r3, [r2, #0]
			if(globalCounter >= 4)
 8000538:	4b9d      	ldr	r3, [pc, #628]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b03      	cmp	r3, #3
 800053e:	dd0a      	ble.n	8000556 <HAL_TIM_PeriodElapsedCallback+0x46>
			{
				tim2_cnt += 1;
 8000540:	4b9c      	ldr	r3, [pc, #624]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	3301      	adds	r3, #1
 8000546:	4a9b      	ldr	r2, [pc, #620]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000548:	6013      	str	r3, [r2, #0]
				tim2_trigger = 'y';
 800054a:	4b9b      	ldr	r3, [pc, #620]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800054c:	2279      	movs	r2, #121	; 0x79
 800054e:	701a      	strb	r2, [r3, #0]
				globalCounter = 0;
 8000550:	4b97      	ldr	r3, [pc, #604]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
			}
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000556:	2120      	movs	r1, #32
 8000558:	4898      	ldr	r0, [pc, #608]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800055a:	f001 fe9e 	bl	800229a <HAL_GPIO_TogglePin>
		}
		if('y' == Uart_Rx_flag)
 800055e:	4b98      	ldr	r3, [pc, #608]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b79      	cmp	r3, #121	; 0x79
 8000564:	f040 81cc 	bne.w	8000900 <HAL_TIM_PeriodElapsedCallback+0x3f0>
		{
			if('n' == Uart_Rx_active)
 8000568:	4b96      	ldr	r3, [pc, #600]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b6e      	cmp	r3, #110	; 0x6e
 800056e:	d161      	bne.n	8000634 <HAL_TIM_PeriodElapsedCallback+0x124>
			{
				Uart_Rx_Temp <<= 1;
 8000570:	4b95      	ldr	r3, [pc, #596]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	b2da      	uxtb	r2, r3
 8000578:	4b93      	ldr	r3, [pc, #588]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800057a:	701a      	strb	r2, [r3, #0]
				if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0))
 800057c:	2101      	movs	r1, #1
 800057e:	4893      	ldr	r0, [pc, #588]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000580:	f001 fe5c 	bl	800223c <HAL_GPIO_ReadPin>
 8000584:	4603      	mov	r3, r0
 8000586:	2b01      	cmp	r3, #1
 8000588:	d105      	bne.n	8000596 <HAL_TIM_PeriodElapsedCallback+0x86>
				{
					Uart_Rx_Temp += 1;
 800058a:	4b8f      	ldr	r3, [pc, #572]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	3301      	adds	r3, #1
 8000590:	b2da      	uxtb	r2, r3
 8000592:	4b8d      	ldr	r3, [pc, #564]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000594:	701a      	strb	r2, [r3, #0]
				}
				if((Uart_Rx_Temp & 0x0f) == 0x0c)
 8000596:	4b8c      	ldr	r3, [pc, #560]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	f003 030f 	and.w	r3, r3, #15
 800059e:	2b0c      	cmp	r3, #12
 80005a0:	f040 81ae 	bne.w	8000900 <HAL_TIM_PeriodElapsedCallback+0x3f0>
				{
					Uart_Rx_active = 'y';
 80005a4:	4b87      	ldr	r3, [pc, #540]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80005a6:	2279      	movs	r2, #121	; 0x79
 80005a8:	701a      	strb	r2, [r3, #0]
					Uart_Rx_Temp = 0x00;
 80005aa:	4b87      	ldr	r3, [pc, #540]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]
					rxByte_cnt += 1;
 80005b0:	4b87      	ldr	r3, [pc, #540]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	3301      	adds	r3, #1
 80005b6:	4a86      	ldr	r2, [pc, #536]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80005b8:	6013      	str	r3, [r2, #0]
					rxData[rxByte_cnt].start = 'y';
 80005ba:	4b85      	ldr	r3, [pc, #532]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	4985      	ldr	r1, [pc, #532]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80005c0:	4613      	mov	r3, r2
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	4413      	add	r3, r2
 80005c6:	440b      	add	r3, r1
 80005c8:	2279      	movs	r2, #121	; 0x79
 80005ca:	701a      	strb	r2, [r3, #0]
					rxData[rxByte_cnt].data = 0x00;
 80005cc:	4b80      	ldr	r3, [pc, #512]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4980      	ldr	r1, [pc, #512]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80005d2:	4613      	mov	r3, r2
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	4413      	add	r3, r2
 80005d8:	440b      	add	r3, r1
 80005da:	3301      	adds	r3, #1
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
					rxData[rxByte_cnt].parity = 'n';
 80005e0:	4b7b      	ldr	r3, [pc, #492]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	497b      	ldr	r1, [pc, #492]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80005e6:	4613      	mov	r3, r2
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	4413      	add	r3, r2
 80005ec:	440b      	add	r3, r1
 80005ee:	3302      	adds	r3, #2
 80005f0:	226e      	movs	r2, #110	; 0x6e
 80005f2:	701a      	strb	r2, [r3, #0]
					rxData[rxByte_cnt].stop = 'x';
 80005f4:	4b76      	ldr	r3, [pc, #472]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	4976      	ldr	r1, [pc, #472]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80005fa:	4613      	mov	r3, r2
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	4413      	add	r3, r2
 8000600:	440b      	add	r3, r1
 8000602:	3303      	adds	r3, #3
 8000604:	2278      	movs	r2, #120	; 0x78
 8000606:	701a      	strb	r2, [r3, #0]
					rxBit_cnt = 0;
 8000608:	4b73      	ldr	r3, [pc, #460]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
					rxSamp_cnt = 0;
 800060e:	4b73      	ldr	r3, [pc, #460]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
					rxParity_bit = 0;
 8000614:	4b72      	ldr	r3, [pc, #456]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
					Uart_Rx_trigger = 'n';
 800061a:	4b72      	ldr	r3, [pc, #456]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800061c:	226e      	movs	r2, #110	; 0x6e
 800061e:	701a      	strb	r2, [r3, #0]
					Uart_Rx_data = 'n';
 8000620:	4b71      	ldr	r3, [pc, #452]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000622:	226e      	movs	r2, #110	; 0x6e
 8000624:	701a      	strb	r2, [r3, #0]
					Uart_Rx_parity = 'n';
 8000626:	4b71      	ldr	r3, [pc, #452]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000628:	226e      	movs	r2, #110	; 0x6e
 800062a:	701a      	strb	r2, [r3, #0]
					Uart_Rx_stop = 'n';
 800062c:	4b70      	ldr	r3, [pc, #448]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800062e:	226e      	movs	r2, #110	; 0x6e
 8000630:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
	}
}
 8000632:	e165      	b.n	8000900 <HAL_TIM_PeriodElapsedCallback+0x3f0>
				Uart_Rx_trigger = 'n';
 8000634:	4b6b      	ldr	r3, [pc, #428]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000636:	226e      	movs	r2, #110	; 0x6e
 8000638:	701a      	strb	r2, [r3, #0]
				rxSamp_cnt += 1;
 800063a:	4b68      	ldr	r3, [pc, #416]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	3301      	adds	r3, #1
 8000640:	4a66      	ldr	r2, [pc, #408]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000642:	6013      	str	r3, [r2, #0]
				if((rxSamp_cnt % 4) == 0){
 8000644:	4b65      	ldr	r3, [pc, #404]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f003 0303 	and.w	r3, r3, #3
 800064c:	2b00      	cmp	r3, #0
 800064e:	d14d      	bne.n	80006ec <HAL_TIM_PeriodElapsedCallback+0x1dc>
					Uart_Rx_trigger = 'y';
 8000650:	4b64      	ldr	r3, [pc, #400]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000652:	2279      	movs	r2, #121	; 0x79
 8000654:	701a      	strb	r2, [r3, #0]
					if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)){
 8000656:	2101      	movs	r1, #1
 8000658:	485c      	ldr	r0, [pc, #368]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800065a:	f001 fdef 	bl	800223c <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	2b01      	cmp	r3, #1
 8000662:	d103      	bne.n	800066c <HAL_TIM_PeriodElapsedCallback+0x15c>
						rxBit_value = 1;
 8000664:	4b63      	ldr	r3, [pc, #396]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000666:	2201      	movs	r2, #1
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	e002      	b.n	8000672 <HAL_TIM_PeriodElapsedCallback+0x162>
						rxBit_value = 0;
 800066c:	4b61      	ldr	r3, [pc, #388]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
					rxBit_cnt += 1;
 8000672:	4b59      	ldr	r3, [pc, #356]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	3301      	adds	r3, #1
 8000678:	4a57      	ldr	r2, [pc, #348]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800067a:	6013      	str	r3, [r2, #0]
					if((1 <= rxBit_cnt) && (rxBit_cnt <= 8)){
 800067c:	4b56      	ldr	r3, [pc, #344]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	dd07      	ble.n	8000694 <HAL_TIM_PeriodElapsedCallback+0x184>
 8000684:	4b54      	ldr	r3, [pc, #336]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b08      	cmp	r3, #8
 800068a:	dc03      	bgt.n	8000694 <HAL_TIM_PeriodElapsedCallback+0x184>
						Uart_Rx_data = 'y';
 800068c:	4b56      	ldr	r3, [pc, #344]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800068e:	2279      	movs	r2, #121	; 0x79
 8000690:	701a      	strb	r2, [r3, #0]
 8000692:	e02b      	b.n	80006ec <HAL_TIM_PeriodElapsedCallback+0x1dc>
					}else if(9 == rxBit_cnt){
 8000694:	4b50      	ldr	r3, [pc, #320]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b09      	cmp	r3, #9
 800069a:	d11d      	bne.n	80006d8 <HAL_TIM_PeriodElapsedCallback+0x1c8>
						Uart_Rx_data = 'n';
 800069c:	4b52      	ldr	r3, [pc, #328]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800069e:	226e      	movs	r2, #110	; 0x6e
 80006a0:	701a      	strb	r2, [r3, #0]
						if('n' == Uart_Rx_Parity_Mode){
 80006a2:	4b55      	ldr	r3, [pc, #340]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b6e      	cmp	r3, #110	; 0x6e
 80006a8:	d106      	bne.n	80006b8 <HAL_TIM_PeriodElapsedCallback+0x1a8>
							Uart_Rx_parity = 'n';
 80006aa:	4b50      	ldr	r3, [pc, #320]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80006ac:	226e      	movs	r2, #110	; 0x6e
 80006ae:	701a      	strb	r2, [r3, #0]
							Uart_Rx_stop = 'y';
 80006b0:	4b4f      	ldr	r3, [pc, #316]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80006b2:	2279      	movs	r2, #121	; 0x79
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	e019      	b.n	80006ec <HAL_TIM_PeriodElapsedCallback+0x1dc>
						}else if('e' == Uart_Rx_Parity_Mode){
 80006b8:	4b4f      	ldr	r3, [pc, #316]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b65      	cmp	r3, #101	; 0x65
 80006be:	d103      	bne.n	80006c8 <HAL_TIM_PeriodElapsedCallback+0x1b8>
							Uart_Rx_parity = 'y';
 80006c0:	4b4a      	ldr	r3, [pc, #296]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80006c2:	2279      	movs	r2, #121	; 0x79
 80006c4:	701a      	strb	r2, [r3, #0]
 80006c6:	e011      	b.n	80006ec <HAL_TIM_PeriodElapsedCallback+0x1dc>
						}else if('o' == Uart_Rx_Parity_Mode){
 80006c8:	4b4b      	ldr	r3, [pc, #300]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b6f      	cmp	r3, #111	; 0x6f
 80006ce:	d10d      	bne.n	80006ec <HAL_TIM_PeriodElapsedCallback+0x1dc>
							Uart_Rx_parity = 'y';
 80006d0:	4b46      	ldr	r3, [pc, #280]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80006d2:	2279      	movs	r2, #121	; 0x79
 80006d4:	701a      	strb	r2, [r3, #0]
 80006d6:	e009      	b.n	80006ec <HAL_TIM_PeriodElapsedCallback+0x1dc>
					}else if(10 == rxBit_cnt){
 80006d8:	4b3f      	ldr	r3, [pc, #252]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b0a      	cmp	r3, #10
 80006de:	d105      	bne.n	80006ec <HAL_TIM_PeriodElapsedCallback+0x1dc>
						Uart_Rx_parity = 'n';
 80006e0:	4b42      	ldr	r3, [pc, #264]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80006e2:	226e      	movs	r2, #110	; 0x6e
 80006e4:	701a      	strb	r2, [r3, #0]
						Uart_Rx_stop = 'y';
 80006e6:	4b42      	ldr	r3, [pc, #264]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80006e8:	2279      	movs	r2, #121	; 0x79
 80006ea:	701a      	strb	r2, [r3, #0]
				if(('y' == Uart_Rx_trigger) && ('y' == Uart_Rx_data)){
 80006ec:	4b3d      	ldr	r3, [pc, #244]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b79      	cmp	r3, #121	; 0x79
 80006f2:	d136      	bne.n	8000762 <HAL_TIM_PeriodElapsedCallback+0x252>
 80006f4:	4b3c      	ldr	r3, [pc, #240]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b79      	cmp	r3, #121	; 0x79
 80006fa:	d132      	bne.n	8000762 <HAL_TIM_PeriodElapsedCallback+0x252>
					rxData[rxByte_cnt].data >>= 1;
 80006fc:	4b34      	ldr	r3, [pc, #208]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4934      	ldr	r1, [pc, #208]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000702:	4613      	mov	r3, r2
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	4413      	add	r3, r2
 8000708:	440b      	add	r3, r1
 800070a:	3301      	adds	r3, #1
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	4a30      	ldr	r2, [pc, #192]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000710:	6812      	ldr	r2, [r2, #0]
 8000712:	085b      	lsrs	r3, r3, #1
 8000714:	b2d8      	uxtb	r0, r3
 8000716:	492f      	ldr	r1, [pc, #188]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000718:	4613      	mov	r3, r2
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	4413      	add	r3, r2
 800071e:	440b      	add	r3, r1
 8000720:	3301      	adds	r3, #1
 8000722:	4602      	mov	r2, r0
 8000724:	701a      	strb	r2, [r3, #0]
					if(1 == rxBit_value){
 8000726:	4b33      	ldr	r3, [pc, #204]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d119      	bne.n	8000762 <HAL_TIM_PeriodElapsedCallback+0x252>
						rxData[rxByte_cnt].data += 0x80;
 800072e:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	4928      	ldr	r1, [pc, #160]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000734:	4613      	mov	r3, r2
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	4413      	add	r3, r2
 800073a:	440b      	add	r3, r1
 800073c:	3301      	adds	r3, #1
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	4a23      	ldr	r2, [pc, #140]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000742:	6812      	ldr	r2, [r2, #0]
 8000744:	3b80      	subs	r3, #128	; 0x80
 8000746:	b2d8      	uxtb	r0, r3
 8000748:	4922      	ldr	r1, [pc, #136]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800074a:	4613      	mov	r3, r2
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	4413      	add	r3, r2
 8000750:	440b      	add	r3, r1
 8000752:	3301      	adds	r3, #1
 8000754:	4602      	mov	r2, r0
 8000756:	701a      	strb	r2, [r3, #0]
						rxParity_bit += 1;
 8000758:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	3301      	adds	r3, #1
 800075e:	4a20      	ldr	r2, [pc, #128]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000760:	6013      	str	r3, [r2, #0]
				if(('y' == Uart_Rx_trigger) && ('y' == Uart_Rx_parity)){
 8000762:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b79      	cmp	r3, #121	; 0x79
 8000768:	f040 80a6 	bne.w	80008b8 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b79      	cmp	r3, #121	; 0x79
 8000772:	f040 80a1 	bne.w	80008b8 <HAL_TIM_PeriodElapsedCallback+0x3a8>
					if('e' == Uart_Rx_Parity_Mode){
 8000776:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b65      	cmp	r3, #101	; 0x65
 800077c:	d161      	bne.n	8000842 <HAL_TIM_PeriodElapsedCallback+0x332>
						if(((rxParity_bit % 2) == 0) && (0 == rxBit_value)){
 800077e:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	2b00      	cmp	r3, #0
 8000788:	d138      	bne.n	80007fc <HAL_TIM_PeriodElapsedCallback+0x2ec>
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d134      	bne.n	80007fc <HAL_TIM_PeriodElapsedCallback+0x2ec>
							rxData[rxByte_cnt].parity = 'e';
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	490f      	ldr	r1, [pc, #60]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000798:	4613      	mov	r3, r2
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4413      	add	r3, r2
 800079e:	440b      	add	r3, r1
 80007a0:	3302      	adds	r3, #2
 80007a2:	2265      	movs	r2, #101	; 0x65
 80007a4:	701a      	strb	r2, [r3, #0]
 80007a6:	e087      	b.n	80008b8 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 80007a8:	200001c8 	.word	0x200001c8
 80007ac:	200002d8 	.word	0x200002d8
 80007b0:	2000008c 	.word	0x2000008c
 80007b4:	200001b4 	.word	0x200001b4
 80007b8:	2000013c 	.word	0x2000013c
 80007bc:	40010800 	.word	0x40010800
 80007c0:	200001ad 	.word	0x200001ad
 80007c4:	200001b0 	.word	0x200001b0
 80007c8:	20000320 	.word	0x20000320
 80007cc:	40011000 	.word	0x40011000
 80007d0:	20000288 	.word	0x20000288
 80007d4:	2000009c 	.word	0x2000009c
 80007d8:	200001bc 	.word	0x200001bc
 80007dc:	200001c0 	.word	0x200001c0
 80007e0:	200001a8 	.word	0x200001a8
 80007e4:	2000028d 	.word	0x2000028d
 80007e8:	200001b9 	.word	0x200001b9
 80007ec:	200001ac 	.word	0x200001ac
 80007f0:	2000013d 	.word	0x2000013d
 80007f4:	20000324 	.word	0x20000324
 80007f8:	200001ae 	.word	0x200001ae
						}else if(((rxParity_bit % 2) == 1) && (1 == rxBit_value)){
 80007fc:	4b42      	ldr	r3, [pc, #264]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	bfb8      	it	lt
 8000808:	425b      	neglt	r3, r3
 800080a:	2b01      	cmp	r3, #1
 800080c:	d10e      	bne.n	800082c <HAL_TIM_PeriodElapsedCallback+0x31c>
 800080e:	4b3f      	ldr	r3, [pc, #252]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d10a      	bne.n	800082c <HAL_TIM_PeriodElapsedCallback+0x31c>
							rxData[rxByte_cnt].parity = 'e';
 8000816:	4b3e      	ldr	r3, [pc, #248]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	493e      	ldr	r1, [pc, #248]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x404>)
 800081c:	4613      	mov	r3, r2
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	4413      	add	r3, r2
 8000822:	440b      	add	r3, r1
 8000824:	3302      	adds	r3, #2
 8000826:	2265      	movs	r2, #101	; 0x65
 8000828:	701a      	strb	r2, [r3, #0]
 800082a:	e045      	b.n	80008b8 <HAL_TIM_PeriodElapsedCallback+0x3a8>
							rxData[rxByte_cnt].parity = 'f';
 800082c:	4b38      	ldr	r3, [pc, #224]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x400>)
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	4938      	ldr	r1, [pc, #224]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x404>)
 8000832:	4613      	mov	r3, r2
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	4413      	add	r3, r2
 8000838:	440b      	add	r3, r1
 800083a:	3302      	adds	r3, #2
 800083c:	2266      	movs	r2, #102	; 0x66
 800083e:	701a      	strb	r2, [r3, #0]
 8000840:	e03a      	b.n	80008b8 <HAL_TIM_PeriodElapsedCallback+0x3a8>
					}else if('o' == Uart_Rx_Parity_Mode){
 8000842:	4b35      	ldr	r3, [pc, #212]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b6f      	cmp	r3, #111	; 0x6f
 8000848:	d136      	bne.n	80008b8 <HAL_TIM_PeriodElapsedCallback+0x3a8>
						if(((rxParity_bit % 2) == 0) && (1 == rxBit_value)){
 800084a:	4b2f      	ldr	r3, [pc, #188]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	2b00      	cmp	r3, #0
 8000854:	d10e      	bne.n	8000874 <HAL_TIM_PeriodElapsedCallback+0x364>
 8000856:	4b2d      	ldr	r3, [pc, #180]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d10a      	bne.n	8000874 <HAL_TIM_PeriodElapsedCallback+0x364>
							rxData[rxByte_cnt].parity = 'o';
 800085e:	4b2c      	ldr	r3, [pc, #176]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	492c      	ldr	r1, [pc, #176]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x404>)
 8000864:	4613      	mov	r3, r2
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	4413      	add	r3, r2
 800086a:	440b      	add	r3, r1
 800086c:	3302      	adds	r3, #2
 800086e:	226f      	movs	r2, #111	; 0x6f
 8000870:	701a      	strb	r2, [r3, #0]
 8000872:	e021      	b.n	80008b8 <HAL_TIM_PeriodElapsedCallback+0x3a8>
						}else if(((rxParity_bit % 2) == 1) && (0 == rxBit_value)){
 8000874:	4b24      	ldr	r3, [pc, #144]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	bfb8      	it	lt
 8000880:	425b      	neglt	r3, r3
 8000882:	2b01      	cmp	r3, #1
 8000884:	d10e      	bne.n	80008a4 <HAL_TIM_PeriodElapsedCallback+0x394>
 8000886:	4b21      	ldr	r3, [pc, #132]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d10a      	bne.n	80008a4 <HAL_TIM_PeriodElapsedCallback+0x394>
							rxData[rxByte_cnt].parity = 'o';
 800088e:	4b20      	ldr	r3, [pc, #128]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	4920      	ldr	r1, [pc, #128]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x404>)
 8000894:	4613      	mov	r3, r2
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	4413      	add	r3, r2
 800089a:	440b      	add	r3, r1
 800089c:	3302      	adds	r3, #2
 800089e:	226f      	movs	r2, #111	; 0x6f
 80008a0:	701a      	strb	r2, [r3, #0]
 80008a2:	e009      	b.n	80008b8 <HAL_TIM_PeriodElapsedCallback+0x3a8>
							rxData[rxByte_cnt].parity = 'f';
 80008a4:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x400>)
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	491a      	ldr	r1, [pc, #104]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x404>)
 80008aa:	4613      	mov	r3, r2
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	4413      	add	r3, r2
 80008b0:	440b      	add	r3, r1
 80008b2:	3302      	adds	r3, #2
 80008b4:	2266      	movs	r2, #102	; 0x66
 80008b6:	701a      	strb	r2, [r3, #0]
				if(('y' == Uart_Rx_trigger) && ('y' == Uart_Rx_stop)){
 80008b8:	4b18      	ldr	r3, [pc, #96]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b79      	cmp	r3, #121	; 0x79
 80008be:	d11f      	bne.n	8000900 <HAL_TIM_PeriodElapsedCallback+0x3f0>
 80008c0:	4b17      	ldr	r3, [pc, #92]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x410>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b79      	cmp	r3, #121	; 0x79
 80008c6:	d11b      	bne.n	8000900 <HAL_TIM_PeriodElapsedCallback+0x3f0>
					Uart_Rx_active = 'n';
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x414>)
 80008ca:	226e      	movs	r2, #110	; 0x6e
 80008cc:	701a      	strb	r2, [r3, #0]
					if(1 == rxBit_value){
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d10a      	bne.n	80008ec <HAL_TIM_PeriodElapsedCallback+0x3dc>
						rxData[rxByte_cnt].stop = 'y';
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x400>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	490e      	ldr	r1, [pc, #56]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x404>)
 80008dc:	4613      	mov	r3, r2
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4413      	add	r3, r2
 80008e2:	440b      	add	r3, r1
 80008e4:	3303      	adds	r3, #3
 80008e6:	2279      	movs	r2, #121	; 0x79
 80008e8:	701a      	strb	r2, [r3, #0]
}
 80008ea:	e009      	b.n	8000900 <HAL_TIM_PeriodElapsedCallback+0x3f0>
						rxData[rxByte_cnt].stop = 'n';
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x400>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4908      	ldr	r1, [pc, #32]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x404>)
 80008f2:	4613      	mov	r3, r2
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	4413      	add	r3, r2
 80008f8:	440b      	add	r3, r1
 80008fa:	3303      	adds	r3, #3
 80008fc:	226e      	movs	r2, #110	; 0x6e
 80008fe:	701a      	strb	r2, [r3, #0]
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200001a8 	.word	0x200001a8
 800090c:	20000324 	.word	0x20000324
 8000910:	20000288 	.word	0x20000288
 8000914:	2000009c 	.word	0x2000009c
 8000918:	200001ae 	.word	0x200001ae
 800091c:	2000028d 	.word	0x2000028d
 8000920:	2000013d 	.word	0x2000013d
 8000924:	200001b0 	.word	0x200001b0

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  int count;
	  int smell;
	  int spread_count = 1;
 800092e:	2301      	movs	r3, #1
 8000930:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000932:	f000 fe51 	bl	80015d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000936:	f000 f8d1 	bl	8000adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093a:	f000 fb05 	bl	8000f48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800093e:	f000 fad9 	bl	8000ef4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000942:	f000 f923 	bl	8000b8c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000946:	f000 f9c1 	bl	8000ccc <MX_TIM2_Init>
  MX_TIM3_Init();
 800094a:	f000 fa0b 	bl	8000d64 <MX_TIM3_Init>
  MX_TIM4_Init();
 800094e:	f000 fa55 	bl	8000dfc <MX_TIM4_Init>
  MX_TIM1_Init();
 8000952:	f000 f959 	bl	8000c08 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Uart_Rx_Parity_Mode = 'n'; // 'n':none, 'e':even, 'o':odd
 8000956:	4b4c      	ldr	r3, [pc, #304]	; (8000a88 <main+0x160>)
 8000958:	226e      	movs	r2, #110	; 0x6e
 800095a:	701a      	strb	r2, [r3, #0]
  rxByte_cnt = 0;
 800095c:	4b4b      	ldr	r3, [pc, #300]	; (8000a8c <main+0x164>)
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
  rxBit_cnt = 0;
 8000962:	4b4b      	ldr	r3, [pc, #300]	; (8000a90 <main+0x168>)
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
  rxSamp_cnt = 0;
 8000968:	4b4a      	ldr	r3, [pc, #296]	; (8000a94 <main+0x16c>)
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
  Uart_Rx_flag = 'n';
 800096e:	4b4a      	ldr	r3, [pc, #296]	; (8000a98 <main+0x170>)
 8000970:	226e      	movs	r2, #110	; 0x6e
 8000972:	701a      	strb	r2, [r3, #0]
  Uart_Rx_active = 'n';
 8000974:	4b49      	ldr	r3, [pc, #292]	; (8000a9c <main+0x174>)
 8000976:	226e      	movs	r2, #110	; 0x6e
 8000978:	701a      	strb	r2, [r3, #0]
  Uart_Rx_Temp = 0x00;
 800097a:	4b49      	ldr	r3, [pc, #292]	; (8000aa0 <main+0x178>)
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]

  Uart_Tx_Parity_Mode = 'n'; // 'n':none, 'e':even, 'o':odd
 8000980:	4b48      	ldr	r3, [pc, #288]	; (8000aa4 <main+0x17c>)
 8000982:	226e      	movs	r2, #110	; 0x6e
 8000984:	701a      	strb	r2, [r3, #0]
  tim2_cnt = 0;
 8000986:	4b48      	ldr	r3, [pc, #288]	; (8000aa8 <main+0x180>)
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
  tim2_flag = 'n';
 800098c:	4b47      	ldr	r3, [pc, #284]	; (8000aac <main+0x184>)
 800098e:	226e      	movs	r2, #110	; 0x6e
 8000990:	701a      	strb	r2, [r3, #0]
  tim2_trigger = 'n';
 8000992:	4b47      	ldr	r3, [pc, #284]	; (8000ab0 <main+0x188>)
 8000994:	226e      	movs	r2, #110	; 0x6e
 8000996:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2101      	movs	r1, #1
 800099c:	4845      	ldr	r0, [pc, #276]	; (8000ab4 <main+0x18c>)
 800099e:	f001 fc64 	bl	800226a <HAL_GPIO_WritePin>

  tim3_it_start = HAL_TIM_Base_Start_IT(&htim3);
 80009a2:	4845      	ldr	r0, [pc, #276]	; (8000ab8 <main+0x190>)
 80009a4:	f002 f9d4 	bl	8002d50 <HAL_TIM_Base_Start_IT>
 80009a8:	4603      	mov	r3, r0
 80009aa:	71fb      	strb	r3, [r7, #7]
  tim2_it_start = HAL_TIM_Base_Start_IT(&htim2);
 80009ac:	4843      	ldr	r0, [pc, #268]	; (8000abc <main+0x194>)
 80009ae:	f002 f9cf 	bl	8002d50 <HAL_TIM_Base_Start_IT>
 80009b2:	4603      	mov	r3, r0
 80009b4:	71bb      	strb	r3, [r7, #6]

  if((HAL_OK == tim3_it_start) && (HAL_OK == tim2_it_start))
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d106      	bne.n	80009ca <main+0xa2>
 80009bc:	79bb      	ldrb	r3, [r7, #6]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d103      	bne.n	80009ca <main+0xa2>
  {
	  printf("HAL_TIM_Base_Start_IT OK\r\n");
 80009c2:	483f      	ldr	r0, [pc, #252]	; (8000ac0 <main+0x198>)
 80009c4:	f003 fd2c 	bl	8004420 <puts>
  {
 80009c8:	e002      	b.n	80009d0 <main+0xa8>
  }
  else
  {
	  printf("HAL_TIM_Base_Start_IT error\r\n");
 80009ca:	483e      	ldr	r0, [pc, #248]	; (8000ac4 <main+0x19c>)
 80009cc:	f003 fd28 	bl	8004420 <puts>
  }
  chUartTxData[0] = 'a';
 80009d0:	4b3d      	ldr	r3, [pc, #244]	; (8000ac8 <main+0x1a0>)
 80009d2:	2261      	movs	r2, #97	; 0x61
 80009d4:	701a      	strb	r2, [r3, #0]
  Uart_Rx_flag = 'y';
 80009d6:	4b30      	ldr	r3, [pc, #192]	; (8000a98 <main+0x170>)
 80009d8:	2279      	movs	r2, #121	; 0x79
 80009da:	701a      	strb	r2, [r3, #0]
  Uart_Rx_active = 'n';
 80009dc:	4b2f      	ldr	r3, [pc, #188]	; (8000a9c <main+0x174>)
 80009de:	226e      	movs	r2, #110	; 0x6e
 80009e0:	701a      	strb	r2, [r3, #0]

  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 80009e2:	2100      	movs	r1, #0
 80009e4:	4839      	ldr	r0, [pc, #228]	; (8000acc <main+0x1a4>)
 80009e6:	f002 fa55 	bl	8002e94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 80009ea:	2104      	movs	r1, #4
 80009ec:	4837      	ldr	r0, [pc, #220]	; (8000acc <main+0x1a4>)
 80009ee:	f002 fa51 	bl	8002e94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 80009f2:	2108      	movs	r1, #8
 80009f4:	4835      	ldr	r0, [pc, #212]	; (8000acc <main+0x1a4>)
 80009f6:	f002 fa4d 	bl	8002e94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 80009fa:	210c      	movs	r1, #12
 80009fc:	4833      	ldr	r0, [pc, #204]	; (8000acc <main+0x1a4>)
 80009fe:	f002 fa49 	bl	8002e94 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 8000a02:	2064      	movs	r0, #100	; 0x64
 8000a04:	f000 fe4a 	bl	800169c <HAL_Delay>
	  Uart_Tx_Byte(0x55, 'n');
 8000a08:	216e      	movs	r1, #110	; 0x6e
 8000a0a:	2055      	movs	r0, #85	; 0x55
 8000a0c:	f7ff fbb0 	bl	8000170 <Uart_Tx_Byte>
	  if(('n' == Uart_Rx_active) && (1 <= rxByte_cnt))
 8000a10:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <main+0x174>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b6e      	cmp	r3, #110	; 0x6e
 8000a16:	d111      	bne.n	8000a3c <main+0x114>
 8000a18:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <main+0x164>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	dd0d      	ble.n	8000a3c <main+0x114>
	  {
		  resultDistance = (rxData[1].data << 8) + rxData[2].data;
 8000a20:	4b2b      	ldr	r3, [pc, #172]	; (8000ad0 <main+0x1a8>)
 8000a22:	799b      	ldrb	r3, [r3, #6]
 8000a24:	021b      	lsls	r3, r3, #8
 8000a26:	4a2a      	ldr	r2, [pc, #168]	; (8000ad0 <main+0x1a8>)
 8000a28:	7ad2      	ldrb	r2, [r2, #11]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	60fb      	str	r3, [r7, #12]
		  printf("resultDistance : %d mm\r\n", resultDistance);
 8000a2e:	68f9      	ldr	r1, [r7, #12]
 8000a30:	4828      	ldr	r0, [pc, #160]	; (8000ad4 <main+0x1ac>)
 8000a32:	f003 fc6f 	bl	8004314 <iprintf>
		  rxByte_cnt = 0;
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <main+0x164>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
	  }
	  HAL_Delay(100);
 8000a3c:	2064      	movs	r0, #100	; 0x64
 8000a3e:	f000 fe2d 	bl	800169c <HAL_Delay>
	  HAL_Delay(100);
 8000a42:	2064      	movs	r0, #100	; 0x64
 8000a44:	f000 fe2a 	bl	800169c <HAL_Delay>

	  HAL_ADC_Start(&hadc1);
 8000a48:	4823      	ldr	r0, [pc, #140]	; (8000ad8 <main+0x1b0>)
 8000a4a:	f000 ff23 	bl	8001894 <HAL_ADC_Start>

	  if(resultDistance <= 500)//auto_open,close
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a54:	dcd5      	bgt.n	8000a02 <main+0xda>
	  {
		    __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 50);//open_motor 2(PB7)
 8000a56:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <main+0x1a4>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2232      	movs	r2, #50	; 0x32
 8000a5c:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 200);//open_motor 1(PB6)
 8000a5e:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <main+0x1a4>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	22c8      	movs	r2, #200	; 0xc8
 8000a64:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(3000);
 8000a66:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a6a:	f000 fe17 	bl	800169c <HAL_Delay>
		    __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 200);//open_motor 2(PB7)
 8000a6e:	4b17      	ldr	r3, [pc, #92]	; (8000acc <main+0x1a4>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	22c8      	movs	r2, #200	; 0xc8
 8000a74:	639a      	str	r2, [r3, #56]	; 0x38
		    __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 50);//open_motor 1(PB6)
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <main+0x1a4>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2232      	movs	r2, #50	; 0x32
 8000a7c:	635a      	str	r2, [r3, #52]	; 0x34
		    HAL_Delay(3000);
 8000a7e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a82:	f000 fe0b 	bl	800169c <HAL_Delay>
	  HAL_Delay(100);
 8000a86:	e7bc      	b.n	8000a02 <main+0xda>
 8000a88:	200001ae 	.word	0x200001ae
 8000a8c:	20000288 	.word	0x20000288
 8000a90:	200001bc 	.word	0x200001bc
 8000a94:	200001c0 	.word	0x200001c0
 8000a98:	200001ad 	.word	0x200001ad
 8000a9c:	200001b0 	.word	0x200001b0
 8000aa0:	20000320 	.word	0x20000320
 8000aa4:	2000013e 	.word	0x2000013e
 8000aa8:	200001b4 	.word	0x200001b4
 8000aac:	200002d8 	.word	0x200002d8
 8000ab0:	2000013c 	.word	0x2000013c
 8000ab4:	40010800 	.word	0x40010800
 8000ab8:	200001c8 	.word	0x200001c8
 8000abc:	20000290 	.word	0x20000290
 8000ac0:	080052d8 	.word	0x080052d8
 8000ac4:	080052f4 	.word	0x080052f4
 8000ac8:	20000188 	.word	0x20000188
 8000acc:	20000140 	.word	0x20000140
 8000ad0:	2000009c 	.word	0x2000009c
 8000ad4:	08005314 	.word	0x08005314
 8000ad8:	20000210 	.word	0x20000210

08000adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b094      	sub	sp, #80	; 0x50
 8000ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ae6:	2228      	movs	r2, #40	; 0x28
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f003 fc0a 	bl	8004304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b10:	2301      	movs	r3, #1
 8000b12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b14:	2310      	movs	r3, #16
 8000b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000b20:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000b24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f001 fbf0 	bl	8002310 <HAL_RCC_OscConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000b36:	f000 faa5 	bl	8001084 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3a:	230f      	movs	r3, #15
 8000b3c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b4a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2102      	movs	r1, #2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 fe5a 	bl	8002810 <HAL_RCC_ClockConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000b62:	f000 fa8f 	bl	8001084 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b66:	2302      	movs	r3, #2
 8000b68:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b6e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	4618      	mov	r0, r3
 8000b74:	f001 ffe6 	bl	8002b44 <HAL_RCCEx_PeriphCLKConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b7e:	f000 fa81 	bl	8001084 <Error_Handler>
  }
}
 8000b82:	bf00      	nop
 8000b84:	3750      	adds	r7, #80	; 0x50
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b9c:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <MX_ADC1_Init+0x74>)
 8000b9e:	4a19      	ldr	r2, [pc, #100]	; (8000c04 <MX_ADC1_Init+0x78>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_ADC1_Init+0x74>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <MX_ADC1_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_ADC1_Init+0x74>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <MX_ADC1_Init+0x74>)
 8000bb6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000bba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bbc:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <MX_ADC1_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_ADC1_Init+0x74>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bc8:	480d      	ldr	r0, [pc, #52]	; (8000c00 <MX_ADC1_Init+0x74>)
 8000bca:	f000 fd8b 	bl	80016e4 <HAL_ADC_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000bd4:	f000 fa56 	bl	8001084 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_ADC1_Init+0x74>)
 8000bea:	f000 ff01 	bl	80019f0 <HAL_ADC_ConfigChannel>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000bf4:	f000 fa46 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000210 	.word	0x20000210
 8000c04:	40012400 	.word	0x40012400

08000c08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c0e:	f107 0310 	add.w	r3, r7, #16
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c18:	463b      	mov	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c24:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <MX_TIM1_Init+0xbc>)
 8000c26:	4a28      	ldr	r2, [pc, #160]	; (8000cc8 <MX_TIM1_Init+0xc0>)
 8000c28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c2a:	4b26      	ldr	r3, [pc, #152]	; (8000cc4 <MX_TIM1_Init+0xbc>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c30:	4b24      	ldr	r3, [pc, #144]	; (8000cc4 <MX_TIM1_Init+0xbc>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c36:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <MX_TIM1_Init+0xbc>)
 8000c38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3e:	4b21      	ldr	r3, [pc, #132]	; (8000cc4 <MX_TIM1_Init+0xbc>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c44:	4b1f      	ldr	r3, [pc, #124]	; (8000cc4 <MX_TIM1_Init+0xbc>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <MX_TIM1_Init+0xbc>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000c50:	481c      	ldr	r0, [pc, #112]	; (8000cc4 <MX_TIM1_Init+0xbc>)
 8000c52:	f002 f9c1 	bl	8002fd8 <HAL_TIM_IC_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000c5c:	f000 fa12 	bl	8001084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c60:	2300      	movs	r3, #0
 8000c62:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c68:	f107 0310 	add.w	r3, r7, #16
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4815      	ldr	r0, [pc, #84]	; (8000cc4 <MX_TIM1_Init+0xbc>)
 8000c70:	f003 f8f6 	bl	8003e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000c7a:	f000 fa03 	bl	8001084 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c82:	2301      	movs	r3, #1
 8000c84:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c8e:	463b      	mov	r3, r7
 8000c90:	2200      	movs	r2, #0
 8000c92:	4619      	mov	r1, r3
 8000c94:	480b      	ldr	r0, [pc, #44]	; (8000cc4 <MX_TIM1_Init+0xbc>)
 8000c96:	f002 faf6 	bl	8003286 <HAL_TIM_IC_ConfigChannel>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000ca0:	f000 f9f0 	bl	8001084 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000ca4:	463b      	mov	r3, r7
 8000ca6:	2204      	movs	r2, #4
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4806      	ldr	r0, [pc, #24]	; (8000cc4 <MX_TIM1_Init+0xbc>)
 8000cac:	f002 faeb 	bl	8003286 <HAL_TIM_IC_ConfigChannel>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 8000cb6:	f000 f9e5 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000240 	.word	0x20000240
 8000cc8:	40012c00 	.word	0x40012c00

08000ccc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd2:	f107 0308 	add.w	r3, r7, #8
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ce8:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <MX_TIM2_Init+0x94>)
 8000cea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <MX_TIM2_Init+0x94>)
 8000cf2:	223f      	movs	r2, #63	; 0x3f
 8000cf4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <MX_TIM2_Init+0x94>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8000cfc:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <MX_TIM2_Init+0x94>)
 8000cfe:	2209      	movs	r2, #9
 8000d00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d02:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <MX_TIM2_Init+0x94>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d08:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <MX_TIM2_Init+0x94>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d0e:	4814      	ldr	r0, [pc, #80]	; (8000d60 <MX_TIM2_Init+0x94>)
 8000d10:	f001 ffce 	bl	8002cb0 <HAL_TIM_Base_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000d1a:	f000 f9b3 	bl	8001084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480d      	ldr	r0, [pc, #52]	; (8000d60 <MX_TIM2_Init+0x94>)
 8000d2c:	f002 fbfe 	bl	800352c <HAL_TIM_ConfigClockSource>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000d36:	f000 f9a5 	bl	8001084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d42:	463b      	mov	r3, r7
 8000d44:	4619      	mov	r1, r3
 8000d46:	4806      	ldr	r0, [pc, #24]	; (8000d60 <MX_TIM2_Init+0x94>)
 8000d48:	f003 f88a 	bl	8003e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000d52:	f000 f997 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000290 	.word	0x20000290

08000d64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d6a:	f107 0308 	add.w	r3, r7, #8
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d78:	463b      	mov	r3, r7
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d80:	4b1c      	ldr	r3, [pc, #112]	; (8000df4 <MX_TIM3_Init+0x90>)
 8000d82:	4a1d      	ldr	r2, [pc, #116]	; (8000df8 <MX_TIM3_Init+0x94>)
 8000d84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8000d86:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <MX_TIM3_Init+0x90>)
 8000d88:	223f      	movs	r2, #63	; 0x3f
 8000d8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8c:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <MX_TIM3_Init+0x90>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 25;
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <MX_TIM3_Init+0x90>)
 8000d94:	2219      	movs	r2, #25
 8000d96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d98:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <MX_TIM3_Init+0x90>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <MX_TIM3_Init+0x90>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000da4:	4813      	ldr	r0, [pc, #76]	; (8000df4 <MX_TIM3_Init+0x90>)
 8000da6:	f001 ff83 	bl	8002cb0 <HAL_TIM_Base_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000db0:	f000 f968 	bl	8001084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dba:	f107 0308 	add.w	r3, r7, #8
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	480c      	ldr	r0, [pc, #48]	; (8000df4 <MX_TIM3_Init+0x90>)
 8000dc2:	f002 fbb3 	bl	800352c <HAL_TIM_ConfigClockSource>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000dcc:	f000 f95a 	bl	8001084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dd8:	463b      	mov	r3, r7
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_TIM3_Init+0x90>)
 8000dde:	f003 f83f 	bl	8003e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000de8:	f000 f94c 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	200001c8 	.word	0x200001c8
 8000df8:	40000400 	.word	0x40000400

08000dfc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e02:	f107 0320 	add.w	r3, r7, #32
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]
 8000e1a:	615a      	str	r2, [r3, #20]
 8000e1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e1e:	4b33      	ldr	r3, [pc, #204]	; (8000eec <MX_TIM4_Init+0xf0>)
 8000e20:	4a33      	ldr	r2, [pc, #204]	; (8000ef0 <MX_TIM4_Init+0xf4>)
 8000e22:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 640-1;
 8000e24:	4b31      	ldr	r3, [pc, #196]	; (8000eec <MX_TIM4_Init+0xf0>)
 8000e26:	f240 227f 	movw	r2, #639	; 0x27f
 8000e2a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2c:	4b2f      	ldr	r3, [pc, #188]	; (8000eec <MX_TIM4_Init+0xf0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 8000e32:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <MX_TIM4_Init+0xf0>)
 8000e34:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000e38:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3a:	4b2c      	ldr	r3, [pc, #176]	; (8000eec <MX_TIM4_Init+0xf0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e40:	4b2a      	ldr	r3, [pc, #168]	; (8000eec <MX_TIM4_Init+0xf0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e46:	4829      	ldr	r0, [pc, #164]	; (8000eec <MX_TIM4_Init+0xf0>)
 8000e48:	f001 ffd4 	bl	8002df4 <HAL_TIM_PWM_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000e52:	f000 f917 	bl	8001084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e56:	2300      	movs	r3, #0
 8000e58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e5e:	f107 0320 	add.w	r3, r7, #32
 8000e62:	4619      	mov	r1, r3
 8000e64:	4821      	ldr	r0, [pc, #132]	; (8000eec <MX_TIM4_Init+0xf0>)
 8000e66:	f002 fffb 	bl	8003e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000e70:	f000 f908 	bl	8001084 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e74:	2360      	movs	r3, #96	; 0x60
 8000e76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8000e78:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000e7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2200      	movs	r2, #0
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4817      	ldr	r0, [pc, #92]	; (8000eec <MX_TIM4_Init+0xf0>)
 8000e8e:	f002 fa8f 	bl	80033b0 <HAL_TIM_PWM_ConfigChannel>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000e98:	f000 f8f4 	bl	8001084 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	2204      	movs	r2, #4
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4812      	ldr	r0, [pc, #72]	; (8000eec <MX_TIM4_Init+0xf0>)
 8000ea4:	f002 fa84 	bl	80033b0 <HAL_TIM_PWM_ConfigChannel>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8000eae:	f000 f8e9 	bl	8001084 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2208      	movs	r2, #8
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480c      	ldr	r0, [pc, #48]	; (8000eec <MX_TIM4_Init+0xf0>)
 8000eba:	f002 fa79 	bl	80033b0 <HAL_TIM_PWM_ConfigChannel>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8000ec4:	f000 f8de 	bl	8001084 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	220c      	movs	r2, #12
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4807      	ldr	r0, [pc, #28]	; (8000eec <MX_TIM4_Init+0xf0>)
 8000ed0:	f002 fa6e 	bl	80033b0 <HAL_TIM_PWM_ConfigChannel>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8000eda:	f000 f8d3 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ede:	4803      	ldr	r0, [pc, #12]	; (8000eec <MX_TIM4_Init+0xf0>)
 8000ee0:	f000 f9ea 	bl	80012b8 <HAL_TIM_MspPostInit>

}
 8000ee4:	bf00      	nop
 8000ee6:	3728      	adds	r7, #40	; 0x28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000140 	.word	0x20000140
 8000ef0:	40000800 	.word	0x40000800

08000ef4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <MX_USART2_UART_Init+0x50>)
 8000efc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f2c:	f003 f808 	bl	8003f40 <HAL_UART_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f36:	f000 f8a5 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200002dc 	.word	0x200002dc
 8000f44:	40004400 	.word	0x40004400

08000f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4e:	f107 0310 	add.w	r3, r7, #16
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5c:	4b44      	ldr	r3, [pc, #272]	; (8001070 <MX_GPIO_Init+0x128>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	4a43      	ldr	r2, [pc, #268]	; (8001070 <MX_GPIO_Init+0x128>)
 8000f62:	f043 0310 	orr.w	r3, r3, #16
 8000f66:	6193      	str	r3, [r2, #24]
 8000f68:	4b41      	ldr	r3, [pc, #260]	; (8001070 <MX_GPIO_Init+0x128>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f003 0310 	and.w	r3, r3, #16
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f74:	4b3e      	ldr	r3, [pc, #248]	; (8001070 <MX_GPIO_Init+0x128>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a3d      	ldr	r2, [pc, #244]	; (8001070 <MX_GPIO_Init+0x128>)
 8000f7a:	f043 0320 	orr.w	r3, r3, #32
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b3b      	ldr	r3, [pc, #236]	; (8001070 <MX_GPIO_Init+0x128>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f003 0320 	and.w	r3, r3, #32
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	4b38      	ldr	r3, [pc, #224]	; (8001070 <MX_GPIO_Init+0x128>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a37      	ldr	r2, [pc, #220]	; (8001070 <MX_GPIO_Init+0x128>)
 8000f92:	f043 0304 	orr.w	r3, r3, #4
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b35      	ldr	r3, [pc, #212]	; (8001070 <MX_GPIO_Init+0x128>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa4:	4b32      	ldr	r3, [pc, #200]	; (8001070 <MX_GPIO_Init+0x128>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a31      	ldr	r2, [pc, #196]	; (8001070 <MX_GPIO_Init+0x128>)
 8000faa:	f043 0308 	orr.w	r3, r3, #8
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b2f      	ldr	r3, [pc, #188]	; (8001070 <MX_GPIO_Init+0x128>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f003 0308 	and.w	r3, r3, #8
 8000fb8:	603b      	str	r3, [r7, #0]
 8000fba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, trigger_1_Pin|LD2_Pin|Ultra_Echo_Pin, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f640 0121 	movw	r1, #2081	; 0x821
 8000fc2:	482c      	ldr	r0, [pc, #176]	; (8001074 <MX_GPIO_Init+0x12c>)
 8000fc4:	f001 f951 	bl	800226a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, trigger_2_Pin|trigger_3_Pin, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2106      	movs	r1, #6
 8000fcc:	482a      	ldr	r0, [pc, #168]	; (8001078 <MX_GPIO_Init+0x130>)
 8000fce:	f001 f94c 	bl	800226a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fd8:	4b28      	ldr	r3, [pc, #160]	; (800107c <MX_GPIO_Init+0x134>)
 8000fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4826      	ldr	r0, [pc, #152]	; (8001080 <MX_GPIO_Init+0x138>)
 8000fe8:	f000 ffa4 	bl	8001f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : echo_1_Pin echo_2_Pin echo_3_Pin */
  GPIO_InitStruct.Pin = echo_1_Pin|echo_2_Pin|echo_3_Pin;
 8000fec:	2307      	movs	r3, #7
 8000fee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff8:	f107 0310 	add.w	r3, r7, #16
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4820      	ldr	r0, [pc, #128]	; (8001080 <MX_GPIO_Init+0x138>)
 8001000:	f000 ff98 	bl	8001f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : trigger_1_Pin LD2_Pin Ultra_Echo_Pin */
  GPIO_InitStruct.Pin = trigger_1_Pin|LD2_Pin|Ultra_Echo_Pin;
 8001004:	f640 0321 	movw	r3, #2081	; 0x821
 8001008:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100a:	2301      	movs	r3, #1
 800100c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2302      	movs	r3, #2
 8001014:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 0310 	add.w	r3, r7, #16
 800101a:	4619      	mov	r1, r3
 800101c:	4815      	ldr	r0, [pc, #84]	; (8001074 <MX_GPIO_Init+0x12c>)
 800101e:	f000 ff89 	bl	8001f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : trigger_2_Pin trigger_3_Pin */
  GPIO_InitStruct.Pin = trigger_2_Pin|trigger_3_Pin;
 8001022:	2306      	movs	r3, #6
 8001024:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	2301      	movs	r3, #1
 8001028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2302      	movs	r3, #2
 8001030:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001032:	f107 0310 	add.w	r3, r7, #16
 8001036:	4619      	mov	r1, r3
 8001038:	480f      	ldr	r0, [pc, #60]	; (8001078 <MX_GPIO_Init+0x130>)
 800103a:	f000 ff7b 	bl	8001f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ultra_Trigger_Pin */
  GPIO_InitStruct.Pin = Ultra_Trigger_Pin;
 800103e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001042:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001044:	4b0d      	ldr	r3, [pc, #52]	; (800107c <MX_GPIO_Init+0x134>)
 8001046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Ultra_Trigger_GPIO_Port, &GPIO_InitStruct);
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	4619      	mov	r1, r3
 8001052:	4808      	ldr	r0, [pc, #32]	; (8001074 <MX_GPIO_Init+0x12c>)
 8001054:	f000 ff6e 	bl	8001f34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	2100      	movs	r1, #0
 800105c:	2028      	movs	r0, #40	; 0x28
 800105e:	f000 ff32 	bl	8001ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001062:	2028      	movs	r0, #40	; 0x28
 8001064:	f000 ff4b 	bl	8001efe <HAL_NVIC_EnableIRQ>

}
 8001068:	bf00      	nop
 800106a:	3720      	adds	r7, #32
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40021000 	.word	0x40021000
 8001074:	40010800 	.word	0x40010800
 8001078:	40010c00 	.word	0x40010c00
 800107c:	10110000 	.word	0x10110000
 8001080:	40011000 	.word	0x40011000

08001084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001088:	b672      	cpsid	i
}
 800108a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800108c:	e7fe      	b.n	800108c <Error_Handler+0x8>
	...

08001090 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <HAL_MspInit+0x5c>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	4a14      	ldr	r2, [pc, #80]	; (80010ec <HAL_MspInit+0x5c>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6193      	str	r3, [r2, #24]
 80010a2:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_MspInit+0x5c>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <HAL_MspInit+0x5c>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <HAL_MspInit+0x5c>)
 80010b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b8:	61d3      	str	r3, [r2, #28]
 80010ba:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <HAL_MspInit+0x5c>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <HAL_MspInit+0x60>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <HAL_MspInit+0x60>)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e2:	bf00      	nop
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40010000 	.word	0x40010000

080010f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a14      	ldr	r2, [pc, #80]	; (8001160 <HAL_ADC_MspInit+0x6c>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d121      	bne.n	8001158 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <HAL_ADC_MspInit+0x70>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	4a12      	ldr	r2, [pc, #72]	; (8001164 <HAL_ADC_MspInit+0x70>)
 800111a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800111e:	6193      	str	r3, [r2, #24]
 8001120:	4b10      	ldr	r3, [pc, #64]	; (8001164 <HAL_ADC_MspInit+0x70>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112c:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <HAL_ADC_MspInit+0x70>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <HAL_ADC_MspInit+0x70>)
 8001132:	f043 0304 	orr.w	r3, r3, #4
 8001136:	6193      	str	r3, [r2, #24]
 8001138:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_ADC_MspInit+0x70>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f003 0304 	and.w	r3, r3, #4
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Smell_Detect_Pin;
 8001144:	2302      	movs	r3, #2
 8001146:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001148:	2303      	movs	r3, #3
 800114a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Smell_Detect_GPIO_Port, &GPIO_InitStruct);
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	4619      	mov	r1, r3
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <HAL_ADC_MspInit+0x74>)
 8001154:	f000 feee 	bl	8001f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001158:	bf00      	nop
 800115a:	3720      	adds	r7, #32
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40012400 	.word	0x40012400
 8001164:	40021000 	.word	0x40021000
 8001168:	40010800 	.word	0x40010800

0800116c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a16      	ldr	r2, [pc, #88]	; (80011e0 <HAL_TIM_IC_MspInit+0x74>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d124      	bne.n	80011d6 <HAL_TIM_IC_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <HAL_TIM_IC_MspInit+0x78>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a14      	ldr	r2, [pc, #80]	; (80011e4 <HAL_TIM_IC_MspInit+0x78>)
 8001192:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_TIM_IC_MspInit+0x78>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <HAL_TIM_IC_MspInit+0x78>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <HAL_TIM_IC_MspInit+0x78>)
 80011aa:	f043 0304 	orr.w	r3, r3, #4
 80011ae:	6193      	str	r3, [r2, #24]
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <HAL_TIM_IC_MspInit+0x78>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ca:	f107 0310 	add.w	r3, r7, #16
 80011ce:	4619      	mov	r1, r3
 80011d0:	4805      	ldr	r0, [pc, #20]	; (80011e8 <HAL_TIM_IC_MspInit+0x7c>)
 80011d2:	f000 feaf 	bl	8001f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011d6:	bf00      	nop
 80011d8:	3720      	adds	r7, #32
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40012c00 	.word	0x40012c00
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40010800 	.word	0x40010800

080011ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011fc:	d114      	bne.n	8001228 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011fe:	4b19      	ldr	r3, [pc, #100]	; (8001264 <HAL_TIM_Base_MspInit+0x78>)
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	4a18      	ldr	r2, [pc, #96]	; (8001264 <HAL_TIM_Base_MspInit+0x78>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	61d3      	str	r3, [r2, #28]
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <HAL_TIM_Base_MspInit+0x78>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	201c      	movs	r0, #28
 800121c:	f000 fe53 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001220:	201c      	movs	r0, #28
 8001222:	f000 fe6c 	bl	8001efe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001226:	e018      	b.n	800125a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0e      	ldr	r2, [pc, #56]	; (8001268 <HAL_TIM_Base_MspInit+0x7c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d113      	bne.n	800125a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <HAL_TIM_Base_MspInit+0x78>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <HAL_TIM_Base_MspInit+0x78>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	61d3      	str	r3, [r2, #28]
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_TIM_Base_MspInit+0x78>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2100      	movs	r1, #0
 800124e:	201d      	movs	r0, #29
 8001250:	f000 fe39 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001254:	201d      	movs	r0, #29
 8001256:	f000 fe52 	bl	8001efe <HAL_NVIC_EnableIRQ>
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40021000 	.word	0x40021000
 8001268:	40000400 	.word	0x40000400

0800126c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0d      	ldr	r2, [pc, #52]	; (80012b0 <HAL_TIM_PWM_MspInit+0x44>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d113      	bne.n	80012a6 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <HAL_TIM_PWM_MspInit+0x48>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	4a0c      	ldr	r2, [pc, #48]	; (80012b4 <HAL_TIM_PWM_MspInit+0x48>)
 8001284:	f043 0304 	orr.w	r3, r3, #4
 8001288:	61d3      	str	r3, [r2, #28]
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <HAL_TIM_PWM_MspInit+0x48>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2100      	movs	r1, #0
 800129a:	201e      	movs	r0, #30
 800129c:	f000 fe13 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80012a0:	201e      	movs	r0, #30
 80012a2:	f000 fe2c 	bl	8001efe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40000800 	.word	0x40000800
 80012b4:	40021000 	.word	0x40021000

080012b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a10      	ldr	r2, [pc, #64]	; (8001314 <HAL_TIM_MspPostInit+0x5c>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d118      	bne.n	800130a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <HAL_TIM_MspPostInit+0x60>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a0e      	ldr	r2, [pc, #56]	; (8001318 <HAL_TIM_MspPostInit+0x60>)
 80012de:	f043 0308 	orr.w	r3, r3, #8
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <HAL_TIM_MspPostInit+0x60>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = Open_Close_Motor_1_Pin|Open_Close_Motor_2_Pin|Open_Close_Motor_3_Pin|Open_Close_Motor_4_Pin;
 80012f0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80012f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2302      	movs	r3, #2
 80012fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	4619      	mov	r1, r3
 8001304:	4805      	ldr	r0, [pc, #20]	; (800131c <HAL_TIM_MspPostInit+0x64>)
 8001306:	f000 fe15 	bl	8001f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800130a:	bf00      	nop
 800130c:	3720      	adds	r7, #32
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40000800 	.word	0x40000800
 8001318:	40021000 	.word	0x40021000
 800131c:	40010c00 	.word	0x40010c00

08001320 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0310 	add.w	r3, r7, #16
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a15      	ldr	r2, [pc, #84]	; (8001390 <HAL_UART_MspInit+0x70>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d123      	bne.n	8001388 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <HAL_UART_MspInit+0x74>)
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	4a13      	ldr	r2, [pc, #76]	; (8001394 <HAL_UART_MspInit+0x74>)
 8001346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134a:	61d3      	str	r3, [r2, #28]
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <HAL_UART_MspInit+0x74>)
 800134e:	69db      	ldr	r3, [r3, #28]
 8001350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <HAL_UART_MspInit+0x74>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a0d      	ldr	r2, [pc, #52]	; (8001394 <HAL_UART_MspInit+0x74>)
 800135e:	f043 0304 	orr.w	r3, r3, #4
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <HAL_UART_MspInit+0x74>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001370:	230c      	movs	r3, #12
 8001372:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2302      	movs	r3, #2
 800137a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	4619      	mov	r1, r3
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <HAL_UART_MspInit+0x78>)
 8001384:	f000 fdd6 	bl	8001f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001388:	bf00      	nop
 800138a:	3720      	adds	r7, #32
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40004400 	.word	0x40004400
 8001394:	40021000 	.word	0x40021000
 8001398:	40010800 	.word	0x40010800

0800139c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <NMI_Handler+0x4>

080013a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <HardFault_Handler+0x4>

080013a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <MemManage_Handler+0x4>

080013ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <BusFault_Handler+0x4>

080013b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <UsageFault_Handler+0x4>

080013ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr

080013c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr

080013d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr

080013de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e2:	f000 f93f 	bl	8001664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013f0:	4802      	ldr	r0, [pc, #8]	; (80013fc <TIM2_IRQHandler+0x10>)
 80013f2:	f001 fe40 	bl	8003076 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000290 	.word	0x20000290

08001400 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001404:	4802      	ldr	r0, [pc, #8]	; (8001410 <TIM3_IRQHandler+0x10>)
 8001406:	f001 fe36 	bl	8003076 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200001c8 	.word	0x200001c8

08001414 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <TIM4_IRQHandler+0x10>)
 800141a:	f001 fe2c 	bl	8003076 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000140 	.word	0x20000140

08001428 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Ultra_Trigger_Pin);
 800142c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001430:	f000 ff4c 	bl	80022cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001434:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001438:	f000 ff48 	bl	80022cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}

08001440 <_read>:
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	e00a      	b.n	8001468 <_read+0x28>
 8001452:	f3af 8000 	nop.w
 8001456:	4601      	mov	r1, r0
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	1c5a      	adds	r2, r3, #1
 800145c:	60ba      	str	r2, [r7, #8]
 800145e:	b2ca      	uxtb	r2, r1
 8001460:	701a      	strb	r2, [r3, #0]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	3301      	adds	r3, #1
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	429a      	cmp	r2, r3
 800146e:	dbf0      	blt.n	8001452 <_read+0x12>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4618      	mov	r0, r3
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <_write>:
 800147a:	b580      	push	{r7, lr}
 800147c:	b086      	sub	sp, #24
 800147e:	af00      	add	r7, sp, #0
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	e009      	b.n	80014a0 <_write+0x26>
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	60ba      	str	r2, [r7, #8]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7fe fe59 	bl	800014c <__io_putchar>
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	3301      	adds	r3, #1
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	dbf1      	blt.n	800148c <_write+0x12>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4618      	mov	r0, r3
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <_close>:
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <_fstat>:
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	2300      	movs	r3, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr

080014e6 <_isatty>:
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	2301      	movs	r3, #1
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr

080014fa <_lseek>:
 80014fa:	b480      	push	{r7}
 80014fc:	b085      	sub	sp, #20
 80014fe:	af00      	add	r7, sp, #0
 8001500:	60f8      	str	r0, [r7, #12]
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	2300      	movs	r3, #0
 8001508:	4618      	mov	r0, r3
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
	...

08001514 <_sbrk>:
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	4a14      	ldr	r2, [pc, #80]	; (8001570 <_sbrk+0x5c>)
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <_sbrk+0x60>)
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	4b13      	ldr	r3, [pc, #76]	; (8001578 <_sbrk+0x64>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d102      	bne.n	8001536 <_sbrk+0x22>
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <_sbrk+0x64>)
 8001532:	4a12      	ldr	r2, [pc, #72]	; (800157c <_sbrk+0x68>)
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <_sbrk+0x64>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	429a      	cmp	r2, r3
 8001542:	d207      	bcs.n	8001554 <_sbrk+0x40>
 8001544:	f002 feb4 	bl	80042b0 <__errno>
 8001548:	4603      	mov	r3, r0
 800154a:	220c      	movs	r2, #12
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	f04f 33ff 	mov.w	r3, #4294967295
 8001552:	e009      	b.n	8001568 <_sbrk+0x54>
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <_sbrk+0x64>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b07      	ldr	r3, [pc, #28]	; (8001578 <_sbrk+0x64>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	4a05      	ldr	r2, [pc, #20]	; (8001578 <_sbrk+0x64>)
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20005000 	.word	0x20005000
 8001574:	00000400 	.word	0x00000400
 8001578:	20000090 	.word	0x20000090
 800157c:	20000340 	.word	0x20000340

08001580 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <Reset_Handler>:
 800158c:	480c      	ldr	r0, [pc, #48]	; (80015c0 <LoopFillZerobss+0x12>)
 800158e:	490d      	ldr	r1, [pc, #52]	; (80015c4 <LoopFillZerobss+0x16>)
 8001590:	4a0d      	ldr	r2, [pc, #52]	; (80015c8 <LoopFillZerobss+0x1a>)
 8001592:	2300      	movs	r3, #0
 8001594:	e002      	b.n	800159c <LoopCopyDataInit>

08001596 <CopyDataInit>:
 8001596:	58d4      	ldr	r4, [r2, r3]
 8001598:	50c4      	str	r4, [r0, r3]
 800159a:	3304      	adds	r3, #4

0800159c <LoopCopyDataInit>:
 800159c:	18c4      	adds	r4, r0, r3
 800159e:	428c      	cmp	r4, r1
 80015a0:	d3f9      	bcc.n	8001596 <CopyDataInit>
 80015a2:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <LoopFillZerobss+0x1e>)
 80015a4:	4c0a      	ldr	r4, [pc, #40]	; (80015d0 <LoopFillZerobss+0x22>)
 80015a6:	2300      	movs	r3, #0
 80015a8:	e001      	b.n	80015ae <LoopFillZerobss>

080015aa <FillZerobss>:
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	3204      	adds	r2, #4

080015ae <LoopFillZerobss>:
 80015ae:	42a2      	cmp	r2, r4
 80015b0:	d3fb      	bcc.n	80015aa <FillZerobss>
 80015b2:	f7ff ffe5 	bl	8001580 <SystemInit>
 80015b6:	f002 fe81 	bl	80042bc <__libc_init_array>
 80015ba:	f7ff f9b5 	bl	8000928 <main>
 80015be:	4770      	bx	lr
 80015c0:	20000000 	.word	0x20000000
 80015c4:	20000070 	.word	0x20000070
 80015c8:	080053f8 	.word	0x080053f8
 80015cc:	20000070 	.word	0x20000070
 80015d0:	2000033c 	.word	0x2000033c

080015d4 <ADC1_2_IRQHandler>:
 80015d4:	e7fe      	b.n	80015d4 <ADC1_2_IRQHandler>
	...

080015d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <HAL_Init+0x28>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a07      	ldr	r2, [pc, #28]	; (8001600 <HAL_Init+0x28>)
 80015e2:	f043 0310 	orr.w	r3, r3, #16
 80015e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e8:	2003      	movs	r0, #3
 80015ea:	f000 fc61 	bl	8001eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ee:	2000      	movs	r0, #0
 80015f0:	f000 f808 	bl	8001604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f4:	f7ff fd4c 	bl	8001090 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40022000 	.word	0x40022000

08001604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_InitTick+0x54>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_InitTick+0x58>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	4619      	mov	r1, r3
 8001616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161a:	fbb3 f3f1 	udiv	r3, r3, r1
 800161e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001622:	4618      	mov	r0, r3
 8001624:	f000 fc79 	bl	8001f1a <HAL_SYSTICK_Config>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e00e      	b.n	8001650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b0f      	cmp	r3, #15
 8001636:	d80a      	bhi.n	800164e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001638:	2200      	movs	r2, #0
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	f04f 30ff 	mov.w	r0, #4294967295
 8001640:	f000 fc41 	bl	8001ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001644:	4a06      	ldr	r2, [pc, #24]	; (8001660 <HAL_InitTick+0x5c>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
 800164c:	e000      	b.n	8001650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
}
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000000 	.word	0x20000000
 800165c:	20000008 	.word	0x20000008
 8001660:	20000004 	.word	0x20000004

08001664 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <HAL_IncTick+0x1c>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	461a      	mov	r2, r3
 800166e:	4b05      	ldr	r3, [pc, #20]	; (8001684 <HAL_IncTick+0x20>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4413      	add	r3, r2
 8001674:	4a03      	ldr	r2, [pc, #12]	; (8001684 <HAL_IncTick+0x20>)
 8001676:	6013      	str	r3, [r2, #0]
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	20000008 	.word	0x20000008
 8001684:	20000328 	.word	0x20000328

08001688 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return uwTick;
 800168c:	4b02      	ldr	r3, [pc, #8]	; (8001698 <HAL_GetTick+0x10>)
 800168e:	681b      	ldr	r3, [r3, #0]
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	20000328 	.word	0x20000328

0800169c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a4:	f7ff fff0 	bl	8001688 <HAL_GetTick>
 80016a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b4:	d005      	beq.n	80016c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_Delay+0x44>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4413      	add	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016c2:	bf00      	nop
 80016c4:	f7ff ffe0 	bl	8001688 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d8f7      	bhi.n	80016c4 <HAL_Delay+0x28>
  {
  }
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000008 	.word	0x20000008

080016e4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e0be      	b.n	8001884 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001710:	2b00      	cmp	r3, #0
 8001712:	d109      	bne.n	8001728 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff fce6 	bl	80010f4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 fab3 	bl	8001c94 <ADC_ConversionStop_Disable>
 800172e:	4603      	mov	r3, r0
 8001730:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001736:	f003 0310 	and.w	r3, r3, #16
 800173a:	2b00      	cmp	r3, #0
 800173c:	f040 8099 	bne.w	8001872 <HAL_ADC_Init+0x18e>
 8001740:	7dfb      	ldrb	r3, [r7, #23]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f040 8095 	bne.w	8001872 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001750:	f023 0302 	bic.w	r3, r3, #2
 8001754:	f043 0202 	orr.w	r2, r3, #2
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001764:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	7b1b      	ldrb	r3, [r3, #12]
 800176a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800176c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	4313      	orrs	r3, r2
 8001772:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800177c:	d003      	beq.n	8001786 <HAL_ADC_Init+0xa2>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d102      	bne.n	800178c <HAL_ADC_Init+0xa8>
 8001786:	f44f 7380 	mov.w	r3, #256	; 0x100
 800178a:	e000      	b.n	800178e <HAL_ADC_Init+0xaa>
 800178c:	2300      	movs	r3, #0
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	7d1b      	ldrb	r3, [r3, #20]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d119      	bne.n	80017d0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	7b1b      	ldrb	r3, [r3, #12]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d109      	bne.n	80017b8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	035a      	lsls	r2, r3, #13
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	e00b      	b.n	80017d0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017bc:	f043 0220 	orr.w	r2, r3, #32
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c8:	f043 0201 	orr.w	r2, r3, #1
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	4b28      	ldr	r3, [pc, #160]	; (800188c <HAL_ADC_Init+0x1a8>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6812      	ldr	r2, [r2, #0]
 80017f2:	68b9      	ldr	r1, [r7, #8]
 80017f4:	430b      	orrs	r3, r1
 80017f6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001800:	d003      	beq.n	800180a <HAL_ADC_Init+0x126>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d104      	bne.n	8001814 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	3b01      	subs	r3, #1
 8001810:	051b      	lsls	r3, r3, #20
 8001812:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	430a      	orrs	r2, r1
 8001826:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	4b18      	ldr	r3, [pc, #96]	; (8001890 <HAL_ADC_Init+0x1ac>)
 8001830:	4013      	ands	r3, r2
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	429a      	cmp	r2, r3
 8001836:	d10b      	bne.n	8001850 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001842:	f023 0303 	bic.w	r3, r3, #3
 8001846:	f043 0201 	orr.w	r2, r3, #1
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800184e:	e018      	b.n	8001882 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001854:	f023 0312 	bic.w	r3, r3, #18
 8001858:	f043 0210 	orr.w	r2, r3, #16
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001864:	f043 0201 	orr.w	r2, r3, #1
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001870:	e007      	b.n	8001882 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001876:	f043 0210 	orr.w	r2, r3, #16
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001882:	7dfb      	ldrb	r3, [r7, #23]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	ffe1f7fd 	.word	0xffe1f7fd
 8001890:	ff1f0efe 	.word	0xff1f0efe

08001894 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800189c:	2300      	movs	r3, #0
 800189e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <HAL_ADC_Start+0x1a>
 80018aa:	2302      	movs	r3, #2
 80018ac:	e098      	b.n	80019e0 <HAL_ADC_Start+0x14c>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f992 	bl	8001be0 <ADC_Enable>
 80018bc:	4603      	mov	r3, r0
 80018be:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f040 8087 	bne.w	80019d6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018d0:	f023 0301 	bic.w	r3, r3, #1
 80018d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a41      	ldr	r2, [pc, #260]	; (80019e8 <HAL_ADC_Start+0x154>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d105      	bne.n	80018f2 <HAL_ADC_Start+0x5e>
 80018e6:	4b41      	ldr	r3, [pc, #260]	; (80019ec <HAL_ADC_Start+0x158>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d115      	bne.n	800191e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001908:	2b00      	cmp	r3, #0
 800190a:	d026      	beq.n	800195a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001910:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001914:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800191c:	e01d      	b.n	800195a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001922:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a2f      	ldr	r2, [pc, #188]	; (80019ec <HAL_ADC_Start+0x158>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d004      	beq.n	800193e <HAL_ADC_Start+0xaa>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a2b      	ldr	r2, [pc, #172]	; (80019e8 <HAL_ADC_Start+0x154>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d10d      	bne.n	800195a <HAL_ADC_Start+0xc6>
 800193e:	4b2b      	ldr	r3, [pc, #172]	; (80019ec <HAL_ADC_Start+0x158>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001946:	2b00      	cmp	r3, #0
 8001948:	d007      	beq.n	800195a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001952:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d006      	beq.n	8001974 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196a:	f023 0206 	bic.w	r2, r3, #6
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	62da      	str	r2, [r3, #44]	; 0x2c
 8001972:	e002      	b.n	800197a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f06f 0202 	mvn.w	r2, #2
 800198a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001996:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800199a:	d113      	bne.n	80019c4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019a0:	4a11      	ldr	r2, [pc, #68]	; (80019e8 <HAL_ADC_Start+0x154>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d105      	bne.n	80019b2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <HAL_ADC_Start+0x158>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d108      	bne.n	80019c4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	e00c      	b.n	80019de <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	e003      	b.n	80019de <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80019de:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40012800 	.word	0x40012800
 80019ec:	40012400 	.word	0x40012400

080019f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d101      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x20>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e0dc      	b.n	8001bca <HAL_ADC_ConfigChannel+0x1da>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b06      	cmp	r3, #6
 8001a1e:	d81c      	bhi.n	8001a5a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	3b05      	subs	r3, #5
 8001a32:	221f      	movs	r2, #31
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	4019      	ands	r1, r3
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	4613      	mov	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	3b05      	subs	r3, #5
 8001a4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	635a      	str	r2, [r3, #52]	; 0x34
 8001a58:	e03c      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b0c      	cmp	r3, #12
 8001a60:	d81c      	bhi.n	8001a9c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	3b23      	subs	r3, #35	; 0x23
 8001a74:	221f      	movs	r2, #31
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	4019      	ands	r1, r3
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	4613      	mov	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3b23      	subs	r3, #35	; 0x23
 8001a8e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	631a      	str	r2, [r3, #48]	; 0x30
 8001a9a:	e01b      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	3b41      	subs	r3, #65	; 0x41
 8001aae:	221f      	movs	r2, #31
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	4019      	ands	r1, r3
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3b41      	subs	r3, #65	; 0x41
 8001ac8:	fa00 f203 	lsl.w	r2, r0, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b09      	cmp	r3, #9
 8001ada:	d91c      	bls.n	8001b16 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68d9      	ldr	r1, [r3, #12]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4413      	add	r3, r2
 8001aec:	3b1e      	subs	r3, #30
 8001aee:	2207      	movs	r2, #7
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	4019      	ands	r1, r3
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	6898      	ldr	r0, [r3, #8]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4613      	mov	r3, r2
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	4413      	add	r3, r2
 8001b06:	3b1e      	subs	r3, #30
 8001b08:	fa00 f203 	lsl.w	r2, r0, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	60da      	str	r2, [r3, #12]
 8001b14:	e019      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6919      	ldr	r1, [r3, #16]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4613      	mov	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4413      	add	r3, r2
 8001b26:	2207      	movs	r2, #7
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	4019      	ands	r1, r3
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	6898      	ldr	r0, [r3, #8]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2b10      	cmp	r3, #16
 8001b50:	d003      	beq.n	8001b5a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b56:	2b11      	cmp	r3, #17
 8001b58:	d132      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a1d      	ldr	r2, [pc, #116]	; (8001bd4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d125      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d126      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b80:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b10      	cmp	r3, #16
 8001b88:	d11a      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b8a:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a13      	ldr	r2, [pc, #76]	; (8001bdc <HAL_ADC_ConfigChannel+0x1ec>)
 8001b90:	fba2 2303 	umull	r2, r3, r2, r3
 8001b94:	0c9a      	lsrs	r2, r3, #18
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ba0:	e002      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f9      	bne.n	8001ba2 <HAL_ADC_ConfigChannel+0x1b2>
 8001bae:	e007      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	f043 0220 	orr.w	r2, r3, #32
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr
 8001bd4:	40012400 	.word	0x40012400
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	431bde83 	.word	0x431bde83

08001be0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d040      	beq.n	8001c80 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f042 0201 	orr.w	r2, r2, #1
 8001c0c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c0e:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <ADC_Enable+0xac>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a1f      	ldr	r2, [pc, #124]	; (8001c90 <ADC_Enable+0xb0>)
 8001c14:	fba2 2303 	umull	r2, r3, r2, r3
 8001c18:	0c9b      	lsrs	r3, r3, #18
 8001c1a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c1c:	e002      	b.n	8001c24 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	3b01      	subs	r3, #1
 8001c22:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f9      	bne.n	8001c1e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c2a:	f7ff fd2d 	bl	8001688 <HAL_GetTick>
 8001c2e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c30:	e01f      	b.n	8001c72 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c32:	f7ff fd29 	bl	8001688 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d918      	bls.n	8001c72 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d011      	beq.n	8001c72 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c52:	f043 0210 	orr.w	r2, r3, #16
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5e:	f043 0201 	orr.w	r2, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e007      	b.n	8001c82 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d1d8      	bne.n	8001c32 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	431bde83 	.word	0x431bde83

08001c94 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d12e      	bne.n	8001d0c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0201 	bic.w	r2, r2, #1
 8001cbc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cbe:	f7ff fce3 	bl	8001688 <HAL_GetTick>
 8001cc2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cc4:	e01b      	b.n	8001cfe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cc6:	f7ff fcdf 	bl	8001688 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d914      	bls.n	8001cfe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d10d      	bne.n	8001cfe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce6:	f043 0210 	orr.w	r2, r3, #16
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf2:	f043 0201 	orr.w	r2, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e007      	b.n	8001d0e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d0dc      	beq.n	8001cc6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <__NVIC_SetPriorityGrouping+0x44>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d34:	4013      	ands	r3, r2
 8001d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d4a:	4a04      	ldr	r2, [pc, #16]	; (8001d5c <__NVIC_SetPriorityGrouping+0x44>)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	60d3      	str	r3, [r2, #12]
}
 8001d50:	bf00      	nop
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d64:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <__NVIC_GetPriorityGrouping+0x18>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	0a1b      	lsrs	r3, r3, #8
 8001d6a:	f003 0307 	and.w	r3, r3, #7
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	db0b      	blt.n	8001da6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	f003 021f 	and.w	r2, r3, #31
 8001d94:	4906      	ldr	r1, [pc, #24]	; (8001db0 <__NVIC_EnableIRQ+0x34>)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	095b      	lsrs	r3, r3, #5
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr
 8001db0:	e000e100 	.word	0xe000e100

08001db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	6039      	str	r1, [r7, #0]
 8001dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	db0a      	blt.n	8001dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	490c      	ldr	r1, [pc, #48]	; (8001e00 <__NVIC_SetPriority+0x4c>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	0112      	lsls	r2, r2, #4
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ddc:	e00a      	b.n	8001df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4908      	ldr	r1, [pc, #32]	; (8001e04 <__NVIC_SetPriority+0x50>)
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	3b04      	subs	r3, #4
 8001dec:	0112      	lsls	r2, r2, #4
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	440b      	add	r3, r1
 8001df2:	761a      	strb	r2, [r3, #24]
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000e100 	.word	0xe000e100
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b089      	sub	sp, #36	; 0x24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f1c3 0307 	rsb	r3, r3, #7
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	bf28      	it	cs
 8001e26:	2304      	movcs	r3, #4
 8001e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	2b06      	cmp	r3, #6
 8001e30:	d902      	bls.n	8001e38 <NVIC_EncodePriority+0x30>
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3b03      	subs	r3, #3
 8001e36:	e000      	b.n	8001e3a <NVIC_EncodePriority+0x32>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43da      	mvns	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e50:	f04f 31ff 	mov.w	r1, #4294967295
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5a:	43d9      	mvns	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e60:	4313      	orrs	r3, r2
         );
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3724      	adds	r7, #36	; 0x24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e7c:	d301      	bcc.n	8001e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e00f      	b.n	8001ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e82:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <SysTick_Config+0x40>)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e8a:	210f      	movs	r1, #15
 8001e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e90:	f7ff ff90 	bl	8001db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <SysTick_Config+0x40>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e9a:	4b04      	ldr	r3, [pc, #16]	; (8001eac <SysTick_Config+0x40>)
 8001e9c:	2207      	movs	r2, #7
 8001e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	e000e010 	.word	0xe000e010

08001eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff ff2d 	bl	8001d18 <__NVIC_SetPriorityGrouping>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
 8001ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed8:	f7ff ff42 	bl	8001d60 <__NVIC_GetPriorityGrouping>
 8001edc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	6978      	ldr	r0, [r7, #20]
 8001ee4:	f7ff ff90 	bl	8001e08 <NVIC_EncodePriority>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff5f 	bl	8001db4 <__NVIC_SetPriority>
}
 8001ef6:	bf00      	nop
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	4603      	mov	r3, r0
 8001f06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff35 	bl	8001d7c <__NVIC_EnableIRQ>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff ffa2 	bl	8001e6c <SysTick_Config>
 8001f28:	4603      	mov	r3, r0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b08b      	sub	sp, #44	; 0x2c
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f42:	2300      	movs	r3, #0
 8001f44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f46:	e169      	b.n	800221c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f48:	2201      	movs	r2, #1
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	69fa      	ldr	r2, [r7, #28]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	f040 8158 	bne.w	8002216 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	4a9a      	ldr	r2, [pc, #616]	; (80021d4 <HAL_GPIO_Init+0x2a0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d05e      	beq.n	800202e <HAL_GPIO_Init+0xfa>
 8001f70:	4a98      	ldr	r2, [pc, #608]	; (80021d4 <HAL_GPIO_Init+0x2a0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d875      	bhi.n	8002062 <HAL_GPIO_Init+0x12e>
 8001f76:	4a98      	ldr	r2, [pc, #608]	; (80021d8 <HAL_GPIO_Init+0x2a4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d058      	beq.n	800202e <HAL_GPIO_Init+0xfa>
 8001f7c:	4a96      	ldr	r2, [pc, #600]	; (80021d8 <HAL_GPIO_Init+0x2a4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d86f      	bhi.n	8002062 <HAL_GPIO_Init+0x12e>
 8001f82:	4a96      	ldr	r2, [pc, #600]	; (80021dc <HAL_GPIO_Init+0x2a8>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d052      	beq.n	800202e <HAL_GPIO_Init+0xfa>
 8001f88:	4a94      	ldr	r2, [pc, #592]	; (80021dc <HAL_GPIO_Init+0x2a8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d869      	bhi.n	8002062 <HAL_GPIO_Init+0x12e>
 8001f8e:	4a94      	ldr	r2, [pc, #592]	; (80021e0 <HAL_GPIO_Init+0x2ac>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d04c      	beq.n	800202e <HAL_GPIO_Init+0xfa>
 8001f94:	4a92      	ldr	r2, [pc, #584]	; (80021e0 <HAL_GPIO_Init+0x2ac>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d863      	bhi.n	8002062 <HAL_GPIO_Init+0x12e>
 8001f9a:	4a92      	ldr	r2, [pc, #584]	; (80021e4 <HAL_GPIO_Init+0x2b0>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d046      	beq.n	800202e <HAL_GPIO_Init+0xfa>
 8001fa0:	4a90      	ldr	r2, [pc, #576]	; (80021e4 <HAL_GPIO_Init+0x2b0>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d85d      	bhi.n	8002062 <HAL_GPIO_Init+0x12e>
 8001fa6:	2b12      	cmp	r3, #18
 8001fa8:	d82a      	bhi.n	8002000 <HAL_GPIO_Init+0xcc>
 8001faa:	2b12      	cmp	r3, #18
 8001fac:	d859      	bhi.n	8002062 <HAL_GPIO_Init+0x12e>
 8001fae:	a201      	add	r2, pc, #4	; (adr r2, 8001fb4 <HAL_GPIO_Init+0x80>)
 8001fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb4:	0800202f 	.word	0x0800202f
 8001fb8:	08002009 	.word	0x08002009
 8001fbc:	0800201b 	.word	0x0800201b
 8001fc0:	0800205d 	.word	0x0800205d
 8001fc4:	08002063 	.word	0x08002063
 8001fc8:	08002063 	.word	0x08002063
 8001fcc:	08002063 	.word	0x08002063
 8001fd0:	08002063 	.word	0x08002063
 8001fd4:	08002063 	.word	0x08002063
 8001fd8:	08002063 	.word	0x08002063
 8001fdc:	08002063 	.word	0x08002063
 8001fe0:	08002063 	.word	0x08002063
 8001fe4:	08002063 	.word	0x08002063
 8001fe8:	08002063 	.word	0x08002063
 8001fec:	08002063 	.word	0x08002063
 8001ff0:	08002063 	.word	0x08002063
 8001ff4:	08002063 	.word	0x08002063
 8001ff8:	08002011 	.word	0x08002011
 8001ffc:	08002025 	.word	0x08002025
 8002000:	4a79      	ldr	r2, [pc, #484]	; (80021e8 <HAL_GPIO_Init+0x2b4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d013      	beq.n	800202e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002006:	e02c      	b.n	8002062 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	623b      	str	r3, [r7, #32]
          break;
 800200e:	e029      	b.n	8002064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	3304      	adds	r3, #4
 8002016:	623b      	str	r3, [r7, #32]
          break;
 8002018:	e024      	b.n	8002064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	3308      	adds	r3, #8
 8002020:	623b      	str	r3, [r7, #32]
          break;
 8002022:	e01f      	b.n	8002064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	330c      	adds	r3, #12
 800202a:	623b      	str	r3, [r7, #32]
          break;
 800202c:	e01a      	b.n	8002064 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d102      	bne.n	800203c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002036:	2304      	movs	r3, #4
 8002038:	623b      	str	r3, [r7, #32]
          break;
 800203a:	e013      	b.n	8002064 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d105      	bne.n	8002050 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002044:	2308      	movs	r3, #8
 8002046:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69fa      	ldr	r2, [r7, #28]
 800204c:	611a      	str	r2, [r3, #16]
          break;
 800204e:	e009      	b.n	8002064 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002050:	2308      	movs	r3, #8
 8002052:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	615a      	str	r2, [r3, #20]
          break;
 800205a:	e003      	b.n	8002064 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800205c:	2300      	movs	r3, #0
 800205e:	623b      	str	r3, [r7, #32]
          break;
 8002060:	e000      	b.n	8002064 <HAL_GPIO_Init+0x130>
          break;
 8002062:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	2bff      	cmp	r3, #255	; 0xff
 8002068:	d801      	bhi.n	800206e <HAL_GPIO_Init+0x13a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	e001      	b.n	8002072 <HAL_GPIO_Init+0x13e>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3304      	adds	r3, #4
 8002072:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	2bff      	cmp	r3, #255	; 0xff
 8002078:	d802      	bhi.n	8002080 <HAL_GPIO_Init+0x14c>
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	e002      	b.n	8002086 <HAL_GPIO_Init+0x152>
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	3b08      	subs	r3, #8
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	210f      	movs	r1, #15
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	fa01 f303 	lsl.w	r3, r1, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	401a      	ands	r2, r3
 8002098:	6a39      	ldr	r1, [r7, #32]
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	fa01 f303 	lsl.w	r3, r1, r3
 80020a0:	431a      	orrs	r2, r3
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 80b1 	beq.w	8002216 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020b4:	4b4d      	ldr	r3, [pc, #308]	; (80021ec <HAL_GPIO_Init+0x2b8>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	4a4c      	ldr	r2, [pc, #304]	; (80021ec <HAL_GPIO_Init+0x2b8>)
 80020ba:	f043 0301 	orr.w	r3, r3, #1
 80020be:	6193      	str	r3, [r2, #24]
 80020c0:	4b4a      	ldr	r3, [pc, #296]	; (80021ec <HAL_GPIO_Init+0x2b8>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020cc:	4a48      	ldr	r2, [pc, #288]	; (80021f0 <HAL_GPIO_Init+0x2bc>)
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	089b      	lsrs	r3, r3, #2
 80020d2:	3302      	adds	r3, #2
 80020d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	220f      	movs	r2, #15
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4013      	ands	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a40      	ldr	r2, [pc, #256]	; (80021f4 <HAL_GPIO_Init+0x2c0>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d013      	beq.n	8002120 <HAL_GPIO_Init+0x1ec>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a3f      	ldr	r2, [pc, #252]	; (80021f8 <HAL_GPIO_Init+0x2c4>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d00d      	beq.n	800211c <HAL_GPIO_Init+0x1e8>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a3e      	ldr	r2, [pc, #248]	; (80021fc <HAL_GPIO_Init+0x2c8>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d007      	beq.n	8002118 <HAL_GPIO_Init+0x1e4>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a3d      	ldr	r2, [pc, #244]	; (8002200 <HAL_GPIO_Init+0x2cc>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d101      	bne.n	8002114 <HAL_GPIO_Init+0x1e0>
 8002110:	2303      	movs	r3, #3
 8002112:	e006      	b.n	8002122 <HAL_GPIO_Init+0x1ee>
 8002114:	2304      	movs	r3, #4
 8002116:	e004      	b.n	8002122 <HAL_GPIO_Init+0x1ee>
 8002118:	2302      	movs	r3, #2
 800211a:	e002      	b.n	8002122 <HAL_GPIO_Init+0x1ee>
 800211c:	2301      	movs	r3, #1
 800211e:	e000      	b.n	8002122 <HAL_GPIO_Init+0x1ee>
 8002120:	2300      	movs	r3, #0
 8002122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002124:	f002 0203 	and.w	r2, r2, #3
 8002128:	0092      	lsls	r2, r2, #2
 800212a:	4093      	lsls	r3, r2
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	4313      	orrs	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002132:	492f      	ldr	r1, [pc, #188]	; (80021f0 <HAL_GPIO_Init+0x2bc>)
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	089b      	lsrs	r3, r3, #2
 8002138:	3302      	adds	r3, #2
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d006      	beq.n	800215a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800214c:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	492c      	ldr	r1, [pc, #176]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	4313      	orrs	r3, r2
 8002156:	600b      	str	r3, [r1, #0]
 8002158:	e006      	b.n	8002168 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800215a:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	43db      	mvns	r3, r3
 8002162:	4928      	ldr	r1, [pc, #160]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 8002164:	4013      	ands	r3, r2
 8002166:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d006      	beq.n	8002182 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002174:	4b23      	ldr	r3, [pc, #140]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	4922      	ldr	r1, [pc, #136]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	4313      	orrs	r3, r2
 800217e:	604b      	str	r3, [r1, #4]
 8002180:	e006      	b.n	8002190 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002182:	4b20      	ldr	r3, [pc, #128]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	43db      	mvns	r3, r3
 800218a:	491e      	ldr	r1, [pc, #120]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 800218c:	4013      	ands	r3, r2
 800218e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d006      	beq.n	80021aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800219c:	4b19      	ldr	r3, [pc, #100]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	4918      	ldr	r1, [pc, #96]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	608b      	str	r3, [r1, #8]
 80021a8:	e006      	b.n	80021b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021aa:	4b16      	ldr	r3, [pc, #88]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	4914      	ldr	r1, [pc, #80]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d021      	beq.n	8002208 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	490e      	ldr	r1, [pc, #56]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	60cb      	str	r3, [r1, #12]
 80021d0:	e021      	b.n	8002216 <HAL_GPIO_Init+0x2e2>
 80021d2:	bf00      	nop
 80021d4:	10320000 	.word	0x10320000
 80021d8:	10310000 	.word	0x10310000
 80021dc:	10220000 	.word	0x10220000
 80021e0:	10210000 	.word	0x10210000
 80021e4:	10120000 	.word	0x10120000
 80021e8:	10110000 	.word	0x10110000
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40010000 	.word	0x40010000
 80021f4:	40010800 	.word	0x40010800
 80021f8:	40010c00 	.word	0x40010c00
 80021fc:	40011000 	.word	0x40011000
 8002200:	40011400 	.word	0x40011400
 8002204:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <HAL_GPIO_Init+0x304>)
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	43db      	mvns	r3, r3
 8002210:	4909      	ldr	r1, [pc, #36]	; (8002238 <HAL_GPIO_Init+0x304>)
 8002212:	4013      	ands	r3, r2
 8002214:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	3301      	adds	r3, #1
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	fa22 f303 	lsr.w	r3, r2, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	f47f ae8e 	bne.w	8001f48 <HAL_GPIO_Init+0x14>
  }
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	372c      	adds	r7, #44	; 0x2c
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	40010400 	.word	0x40010400

0800223c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	887b      	ldrh	r3, [r7, #2]
 800224e:	4013      	ands	r3, r2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d002      	beq.n	800225a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002254:	2301      	movs	r3, #1
 8002256:	73fb      	strb	r3, [r7, #15]
 8002258:	e001      	b.n	800225e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800225a:	2300      	movs	r3, #0
 800225c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800225e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr

0800226a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	460b      	mov	r3, r1
 8002274:	807b      	strh	r3, [r7, #2]
 8002276:	4613      	mov	r3, r2
 8002278:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800227a:	787b      	ldrb	r3, [r7, #1]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002280:	887a      	ldrh	r2, [r7, #2]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002286:	e003      	b.n	8002290 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002288:	887b      	ldrh	r3, [r7, #2]
 800228a:	041a      	lsls	r2, r3, #16
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	611a      	str	r2, [r3, #16]
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr

0800229a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800229a:	b480      	push	{r7}
 800229c:	b085      	sub	sp, #20
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	460b      	mov	r3, r1
 80022a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022ac:	887a      	ldrh	r2, [r7, #2]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4013      	ands	r3, r2
 80022b2:	041a      	lsls	r2, r3, #16
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	43d9      	mvns	r1, r3
 80022b8:	887b      	ldrh	r3, [r7, #2]
 80022ba:	400b      	ands	r3, r1
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	611a      	str	r2, [r3, #16]
}
 80022c2:	bf00      	nop
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr

080022cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022d6:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	88fb      	ldrh	r3, [r7, #6]
 80022dc:	4013      	ands	r3, r2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d006      	beq.n	80022f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022e2:	4a05      	ldr	r2, [pc, #20]	; (80022f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022e4:	88fb      	ldrh	r3, [r7, #6]
 80022e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 f806 	bl	80022fc <HAL_GPIO_EXTI_Callback>
  }
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40010400 	.word	0x40010400

080022fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e26c      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 8087 	beq.w	800243e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002330:	4b92      	ldr	r3, [pc, #584]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	2b04      	cmp	r3, #4
 800233a:	d00c      	beq.n	8002356 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800233c:	4b8f      	ldr	r3, [pc, #572]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 030c 	and.w	r3, r3, #12
 8002344:	2b08      	cmp	r3, #8
 8002346:	d112      	bne.n	800236e <HAL_RCC_OscConfig+0x5e>
 8002348:	4b8c      	ldr	r3, [pc, #560]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002354:	d10b      	bne.n	800236e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002356:	4b89      	ldr	r3, [pc, #548]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d06c      	beq.n	800243c <HAL_RCC_OscConfig+0x12c>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d168      	bne.n	800243c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e246      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002376:	d106      	bne.n	8002386 <HAL_RCC_OscConfig+0x76>
 8002378:	4b80      	ldr	r3, [pc, #512]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a7f      	ldr	r2, [pc, #508]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800237e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	e02e      	b.n	80023e4 <HAL_RCC_OscConfig+0xd4>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10c      	bne.n	80023a8 <HAL_RCC_OscConfig+0x98>
 800238e:	4b7b      	ldr	r3, [pc, #492]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a7a      	ldr	r2, [pc, #488]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	4b78      	ldr	r3, [pc, #480]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a77      	ldr	r2, [pc, #476]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	e01d      	b.n	80023e4 <HAL_RCC_OscConfig+0xd4>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b0:	d10c      	bne.n	80023cc <HAL_RCC_OscConfig+0xbc>
 80023b2:	4b72      	ldr	r3, [pc, #456]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a71      	ldr	r2, [pc, #452]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	4b6f      	ldr	r3, [pc, #444]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a6e      	ldr	r2, [pc, #440]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	e00b      	b.n	80023e4 <HAL_RCC_OscConfig+0xd4>
 80023cc:	4b6b      	ldr	r3, [pc, #428]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a6a      	ldr	r2, [pc, #424]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d6:	6013      	str	r3, [r2, #0]
 80023d8:	4b68      	ldr	r3, [pc, #416]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a67      	ldr	r2, [pc, #412]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d013      	beq.n	8002414 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ec:	f7ff f94c 	bl	8001688 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f4:	f7ff f948 	bl	8001688 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b64      	cmp	r3, #100	; 0x64
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e1fa      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002406:	4b5d      	ldr	r3, [pc, #372]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCC_OscConfig+0xe4>
 8002412:	e014      	b.n	800243e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002414:	f7ff f938 	bl	8001688 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800241c:	f7ff f934 	bl	8001688 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b64      	cmp	r3, #100	; 0x64
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e1e6      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242e:	4b53      	ldr	r3, [pc, #332]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x10c>
 800243a:	e000      	b.n	800243e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d063      	beq.n	8002512 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800244a:	4b4c      	ldr	r3, [pc, #304]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00b      	beq.n	800246e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002456:	4b49      	ldr	r3, [pc, #292]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b08      	cmp	r3, #8
 8002460:	d11c      	bne.n	800249c <HAL_RCC_OscConfig+0x18c>
 8002462:	4b46      	ldr	r3, [pc, #280]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d116      	bne.n	800249c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246e:	4b43      	ldr	r3, [pc, #268]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d005      	beq.n	8002486 <HAL_RCC_OscConfig+0x176>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d001      	beq.n	8002486 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e1ba      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002486:	4b3d      	ldr	r3, [pc, #244]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4939      	ldr	r1, [pc, #228]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249a:	e03a      	b.n	8002512 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d020      	beq.n	80024e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a4:	4b36      	ldr	r3, [pc, #216]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024aa:	f7ff f8ed 	bl	8001688 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b2:	f7ff f8e9 	bl	8001688 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e19b      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c4:	4b2d      	ldr	r3, [pc, #180]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0f0      	beq.n	80024b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d0:	4b2a      	ldr	r3, [pc, #168]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4927      	ldr	r1, [pc, #156]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	600b      	str	r3, [r1, #0]
 80024e4:	e015      	b.n	8002512 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024e6:	4b26      	ldr	r3, [pc, #152]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7ff f8cc 	bl	8001688 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f4:	f7ff f8c8 	bl	8001688 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e17a      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002506:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d03a      	beq.n	8002594 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d019      	beq.n	800255a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002526:	4b17      	ldr	r3, [pc, #92]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 8002528:	2201      	movs	r2, #1
 800252a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252c:	f7ff f8ac 	bl	8001688 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002534:	f7ff f8a8 	bl	8001688 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e15a      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002546:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002552:	2001      	movs	r0, #1
 8002554:	f000 fad8 	bl	8002b08 <RCC_Delay>
 8002558:	e01c      	b.n	8002594 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002560:	f7ff f892 	bl	8001688 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002566:	e00f      	b.n	8002588 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002568:	f7ff f88e 	bl	8001688 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d908      	bls.n	8002588 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e140      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
 8002580:	42420000 	.word	0x42420000
 8002584:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002588:	4b9e      	ldr	r3, [pc, #632]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1e9      	bne.n	8002568 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80a6 	beq.w	80026ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a2:	2300      	movs	r3, #0
 80025a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025a6:	4b97      	ldr	r3, [pc, #604]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10d      	bne.n	80025ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b2:	4b94      	ldr	r3, [pc, #592]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	4a93      	ldr	r2, [pc, #588]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80025b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025bc:	61d3      	str	r3, [r2, #28]
 80025be:	4b91      	ldr	r3, [pc, #580]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ca:	2301      	movs	r3, #1
 80025cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ce:	4b8e      	ldr	r3, [pc, #568]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d118      	bne.n	800260c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025da:	4b8b      	ldr	r3, [pc, #556]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a8a      	ldr	r2, [pc, #552]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80025e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025e6:	f7ff f84f 	bl	8001688 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ee:	f7ff f84b 	bl	8001688 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b64      	cmp	r3, #100	; 0x64
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e0fd      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002600:	4b81      	ldr	r3, [pc, #516]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d106      	bne.n	8002622 <HAL_RCC_OscConfig+0x312>
 8002614:	4b7b      	ldr	r3, [pc, #492]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4a7a      	ldr	r2, [pc, #488]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6213      	str	r3, [r2, #32]
 8002620:	e02d      	b.n	800267e <HAL_RCC_OscConfig+0x36e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10c      	bne.n	8002644 <HAL_RCC_OscConfig+0x334>
 800262a:	4b76      	ldr	r3, [pc, #472]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	4a75      	ldr	r2, [pc, #468]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002630:	f023 0301 	bic.w	r3, r3, #1
 8002634:	6213      	str	r3, [r2, #32]
 8002636:	4b73      	ldr	r3, [pc, #460]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	4a72      	ldr	r2, [pc, #456]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800263c:	f023 0304 	bic.w	r3, r3, #4
 8002640:	6213      	str	r3, [r2, #32]
 8002642:	e01c      	b.n	800267e <HAL_RCC_OscConfig+0x36e>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	2b05      	cmp	r3, #5
 800264a:	d10c      	bne.n	8002666 <HAL_RCC_OscConfig+0x356>
 800264c:	4b6d      	ldr	r3, [pc, #436]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	4a6c      	ldr	r2, [pc, #432]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002652:	f043 0304 	orr.w	r3, r3, #4
 8002656:	6213      	str	r3, [r2, #32]
 8002658:	4b6a      	ldr	r3, [pc, #424]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	4a69      	ldr	r2, [pc, #420]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	6213      	str	r3, [r2, #32]
 8002664:	e00b      	b.n	800267e <HAL_RCC_OscConfig+0x36e>
 8002666:	4b67      	ldr	r3, [pc, #412]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	4a66      	ldr	r2, [pc, #408]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800266c:	f023 0301 	bic.w	r3, r3, #1
 8002670:	6213      	str	r3, [r2, #32]
 8002672:	4b64      	ldr	r3, [pc, #400]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	4a63      	ldr	r2, [pc, #396]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002678:	f023 0304 	bic.w	r3, r3, #4
 800267c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d015      	beq.n	80026b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002686:	f7fe ffff 	bl	8001688 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268c:	e00a      	b.n	80026a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800268e:	f7fe fffb 	bl	8001688 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	f241 3288 	movw	r2, #5000	; 0x1388
 800269c:	4293      	cmp	r3, r2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e0ab      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a4:	4b57      	ldr	r3, [pc, #348]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0ee      	beq.n	800268e <HAL_RCC_OscConfig+0x37e>
 80026b0:	e014      	b.n	80026dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b2:	f7fe ffe9 	bl	8001688 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b8:	e00a      	b.n	80026d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ba:	f7fe ffe5 	bl	8001688 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e095      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d0:	4b4c      	ldr	r3, [pc, #304]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1ee      	bne.n	80026ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026dc:	7dfb      	ldrb	r3, [r7, #23]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d105      	bne.n	80026ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e2:	4b48      	ldr	r3, [pc, #288]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	4a47      	ldr	r2, [pc, #284]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 8081 	beq.w	80027fa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026f8:	4b42      	ldr	r3, [pc, #264]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 030c 	and.w	r3, r3, #12
 8002700:	2b08      	cmp	r3, #8
 8002702:	d061      	beq.n	80027c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d146      	bne.n	800279a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270c:	4b3f      	ldr	r3, [pc, #252]	; (800280c <HAL_RCC_OscConfig+0x4fc>)
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002712:	f7fe ffb9 	bl	8001688 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271a:	f7fe ffb5 	bl	8001688 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e067      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800272c:	4b35      	ldr	r3, [pc, #212]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1f0      	bne.n	800271a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002740:	d108      	bne.n	8002754 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002742:	4b30      	ldr	r3, [pc, #192]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	492d      	ldr	r1, [pc, #180]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002750:	4313      	orrs	r3, r2
 8002752:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002754:	4b2b      	ldr	r3, [pc, #172]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a19      	ldr	r1, [r3, #32]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	430b      	orrs	r3, r1
 8002766:	4927      	ldr	r1, [pc, #156]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800276c:	4b27      	ldr	r3, [pc, #156]	; (800280c <HAL_RCC_OscConfig+0x4fc>)
 800276e:	2201      	movs	r2, #1
 8002770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002772:	f7fe ff89 	bl	8001688 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277a:	f7fe ff85 	bl	8001688 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e037      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800278c:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x46a>
 8002798:	e02f      	b.n	80027fa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279a:	4b1c      	ldr	r3, [pc, #112]	; (800280c <HAL_RCC_OscConfig+0x4fc>)
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7fe ff72 	bl	8001688 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a8:	f7fe ff6e 	bl	8001688 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e020      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ba:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x498>
 80027c6:	e018      	b.n	80027fa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e013      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d106      	bne.n	80027f6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d001      	beq.n	80027fa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	40007000 	.word	0x40007000
 800280c:	42420060 	.word	0x42420060

08002810 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0d0      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002824:	4b6a      	ldr	r3, [pc, #424]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d910      	bls.n	8002854 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002832:	4b67      	ldr	r3, [pc, #412]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 0207 	bic.w	r2, r3, #7
 800283a:	4965      	ldr	r1, [pc, #404]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002842:	4b63      	ldr	r3, [pc, #396]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0b8      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d020      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800286c:	4b59      	ldr	r3, [pc, #356]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4a58      	ldr	r2, [pc, #352]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002876:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002884:	4b53      	ldr	r3, [pc, #332]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4a52      	ldr	r2, [pc, #328]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800288e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002890:	4b50      	ldr	r3, [pc, #320]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	494d      	ldr	r1, [pc, #308]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d040      	beq.n	8002930 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d107      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	4b47      	ldr	r3, [pc, #284]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d115      	bne.n	80028ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e07f      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d107      	bne.n	80028de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ce:	4b41      	ldr	r3, [pc, #260]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d109      	bne.n	80028ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e073      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028de:	4b3d      	ldr	r3, [pc, #244]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e06b      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ee:	4b39      	ldr	r3, [pc, #228]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f023 0203 	bic.w	r2, r3, #3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	4936      	ldr	r1, [pc, #216]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002900:	f7fe fec2 	bl	8001688 <HAL_GetTick>
 8002904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002906:	e00a      	b.n	800291e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002908:	f7fe febe 	bl	8001688 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	f241 3288 	movw	r2, #5000	; 0x1388
 8002916:	4293      	cmp	r3, r2
 8002918:	d901      	bls.n	800291e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e053      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291e:	4b2d      	ldr	r3, [pc, #180]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f003 020c 	and.w	r2, r3, #12
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	429a      	cmp	r2, r3
 800292e:	d1eb      	bne.n	8002908 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002930:	4b27      	ldr	r3, [pc, #156]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d210      	bcs.n	8002960 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293e:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 0207 	bic.w	r2, r3, #7
 8002946:	4922      	ldr	r1, [pc, #136]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800294e:	4b20      	ldr	r3, [pc, #128]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e032      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800296c:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4916      	ldr	r1, [pc, #88]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	4313      	orrs	r3, r2
 800297c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d009      	beq.n	800299e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800298a:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	490e      	ldr	r1, [pc, #56]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800299a:	4313      	orrs	r3, r2
 800299c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800299e:	f000 f821 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 80029a2:	4602      	mov	r2, r0
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	490a      	ldr	r1, [pc, #40]	; (80029d8 <HAL_RCC_ClockConfig+0x1c8>)
 80029b0:	5ccb      	ldrb	r3, [r1, r3]
 80029b2:	fa22 f303 	lsr.w	r3, r2, r3
 80029b6:	4a09      	ldr	r2, [pc, #36]	; (80029dc <HAL_RCC_ClockConfig+0x1cc>)
 80029b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_RCC_ClockConfig+0x1d0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe fe20 	bl	8001604 <HAL_InitTick>

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40022000 	.word	0x40022000
 80029d4:	40021000 	.word	0x40021000
 80029d8:	08005340 	.word	0x08005340
 80029dc:	20000000 	.word	0x20000000
 80029e0:	20000004 	.word	0x20000004

080029e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e4:	b490      	push	{r4, r7}
 80029e6:	b08a      	sub	sp, #40	; 0x28
 80029e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029ea:	4b2a      	ldr	r3, [pc, #168]	; (8002a94 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029ec:	1d3c      	adds	r4, r7, #4
 80029ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029f4:	f240 2301 	movw	r3, #513	; 0x201
 80029f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
 80029fe:	2300      	movs	r3, #0
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	2300      	movs	r3, #0
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a0e:	4b22      	ldr	r3, [pc, #136]	; (8002a98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d002      	beq.n	8002a24 <HAL_RCC_GetSysClockFreq+0x40>
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d003      	beq.n	8002a2a <HAL_RCC_GetSysClockFreq+0x46>
 8002a22:	e02d      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a24:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a26:	623b      	str	r3, [r7, #32]
      break;
 8002a28:	e02d      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	0c9b      	lsrs	r3, r3, #18
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a36:	4413      	add	r3, r2
 8002a38:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a3c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d013      	beq.n	8002a70 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a48:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	0c5b      	lsrs	r3, r3, #17
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a56:	4413      	add	r3, r2
 8002a58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a5c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	4a0e      	ldr	r2, [pc, #56]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a62:	fb02 f203 	mul.w	r2, r2, r3
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6e:	e004      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	4a0b      	ldr	r2, [pc, #44]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a74:	fb02 f303 	mul.w	r3, r2, r3
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	623b      	str	r3, [r7, #32]
      break;
 8002a7e:	e002      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a82:	623b      	str	r3, [r7, #32]
      break;
 8002a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a86:	6a3b      	ldr	r3, [r7, #32]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3728      	adds	r7, #40	; 0x28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc90      	pop	{r4, r7}
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	08005330 	.word	0x08005330
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	007a1200 	.word	0x007a1200
 8002aa0:	003d0900 	.word	0x003d0900

08002aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa8:	4b02      	ldr	r3, [pc, #8]	; (8002ab4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr
 8002ab4:	20000000 	.word	0x20000000

08002ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002abc:	f7ff fff2 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	0a1b      	lsrs	r3, r3, #8
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	4903      	ldr	r1, [pc, #12]	; (8002adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ace:	5ccb      	ldrb	r3, [r1, r3]
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	08005350 	.word	0x08005350

08002ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ae4:	f7ff ffde 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	0adb      	lsrs	r3, r3, #11
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	4903      	ldr	r1, [pc, #12]	; (8002b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002af6:	5ccb      	ldrb	r3, [r1, r3]
 8002af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40021000 	.word	0x40021000
 8002b04:	08005350 	.word	0x08005350

08002b08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b10:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <RCC_Delay+0x34>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <RCC_Delay+0x38>)
 8002b16:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1a:	0a5b      	lsrs	r3, r3, #9
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	fb02 f303 	mul.w	r3, r2, r3
 8002b22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b24:	bf00      	nop
  }
  while (Delay --);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1e5a      	subs	r2, r3, #1
 8002b2a:	60fa      	str	r2, [r7, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1f9      	bne.n	8002b24 <RCC_Delay+0x1c>
}
 8002b30:	bf00      	nop
 8002b32:	bf00      	nop
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr
 8002b3c:	20000000 	.word	0x20000000
 8002b40:	10624dd3 	.word	0x10624dd3

08002b44 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	613b      	str	r3, [r7, #16]
 8002b50:	2300      	movs	r3, #0
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d07d      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002b60:	2300      	movs	r3, #0
 8002b62:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b64:	4b4f      	ldr	r3, [pc, #316]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10d      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b70:	4b4c      	ldr	r3, [pc, #304]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	4a4b      	ldr	r2, [pc, #300]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	61d3      	str	r3, [r2, #28]
 8002b7c:	4b49      	ldr	r3, [pc, #292]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8c:	4b46      	ldr	r3, [pc, #280]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d118      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b98:	4b43      	ldr	r3, [pc, #268]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a42      	ldr	r2, [pc, #264]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ba4:	f7fe fd70 	bl	8001688 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002baa:	e008      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bac:	f7fe fd6c 	bl	8001688 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b64      	cmp	r3, #100	; 0x64
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e06d      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbe:	4b3a      	ldr	r3, [pc, #232]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bca:	4b36      	ldr	r3, [pc, #216]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d02e      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d027      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002be8:	4b2e      	ldr	r3, [pc, #184]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bf2:	4b2e      	ldr	r3, [pc, #184]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bf8:	4b2c      	ldr	r3, [pc, #176]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bfe:	4a29      	ldr	r2, [pc, #164]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d014      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0e:	f7fe fd3b 	bl	8001688 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c14:	e00a      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c16:	f7fe fd37 	bl	8001688 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e036      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0ee      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c38:	4b1a      	ldr	r3, [pc, #104]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	4917      	ldr	r1, [pc, #92]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c4a:	7dfb      	ldrb	r3, [r7, #23]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d105      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c50:	4b14      	ldr	r3, [pc, #80]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	4a13      	ldr	r2, [pc, #76]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d008      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c68:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	490b      	ldr	r1, [pc, #44]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d008      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c86:	4b07      	ldr	r3, [pc, #28]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	4904      	ldr	r1, [pc, #16]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40007000 	.word	0x40007000
 8002cac:	42420440 	.word	0x42420440

08002cb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e041      	b.n	8002d46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fe fa88 	bl	80011ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3304      	adds	r3, #4
 8002cec:	4619      	mov	r1, r3
 8002cee:	4610      	mov	r0, r2
 8002cf0:	f000 fd04 	bl	80036fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d001      	beq.n	8002d68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e03a      	b.n	8002dde <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a18      	ldr	r2, [pc, #96]	; (8002de8 <HAL_TIM_Base_Start_IT+0x98>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d00e      	beq.n	8002da8 <HAL_TIM_Base_Start_IT+0x58>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d92:	d009      	beq.n	8002da8 <HAL_TIM_Base_Start_IT+0x58>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a14      	ldr	r2, [pc, #80]	; (8002dec <HAL_TIM_Base_Start_IT+0x9c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d004      	beq.n	8002da8 <HAL_TIM_Base_Start_IT+0x58>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a13      	ldr	r2, [pc, #76]	; (8002df0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d111      	bne.n	8002dcc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2b06      	cmp	r3, #6
 8002db8:	d010      	beq.n	8002ddc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f042 0201 	orr.w	r2, r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dca:	e007      	b.n	8002ddc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr
 8002de8:	40012c00 	.word	0x40012c00
 8002dec:	40000400 	.word	0x40000400
 8002df0:	40000800 	.word	0x40000800

08002df4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e041      	b.n	8002e8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d106      	bne.n	8002e20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7fe fa26 	bl	800126c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3304      	adds	r3, #4
 8002e30:	4619      	mov	r1, r3
 8002e32:	4610      	mov	r0, r2
 8002e34:	f000 fc62 	bl	80036fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d109      	bne.n	8002eb8 <HAL_TIM_PWM_Start+0x24>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	bf14      	ite	ne
 8002eb0:	2301      	movne	r3, #1
 8002eb2:	2300      	moveq	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	e022      	b.n	8002efe <HAL_TIM_PWM_Start+0x6a>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d109      	bne.n	8002ed2 <HAL_TIM_PWM_Start+0x3e>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	bf14      	ite	ne
 8002eca:	2301      	movne	r3, #1
 8002ecc:	2300      	moveq	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	e015      	b.n	8002efe <HAL_TIM_PWM_Start+0x6a>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d109      	bne.n	8002eec <HAL_TIM_PWM_Start+0x58>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	bf14      	ite	ne
 8002ee4:	2301      	movne	r3, #1
 8002ee6:	2300      	moveq	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	e008      	b.n	8002efe <HAL_TIM_PWM_Start+0x6a>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	bf14      	ite	ne
 8002ef8:	2301      	movne	r3, #1
 8002efa:	2300      	moveq	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e05e      	b.n	8002fc4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d104      	bne.n	8002f16 <HAL_TIM_PWM_Start+0x82>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f14:	e013      	b.n	8002f3e <HAL_TIM_PWM_Start+0xaa>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d104      	bne.n	8002f26 <HAL_TIM_PWM_Start+0x92>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f24:	e00b      	b.n	8002f3e <HAL_TIM_PWM_Start+0xaa>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d104      	bne.n	8002f36 <HAL_TIM_PWM_Start+0xa2>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f34:	e003      	b.n	8002f3e <HAL_TIM_PWM_Start+0xaa>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2202      	movs	r2, #2
 8002f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2201      	movs	r2, #1
 8002f44:	6839      	ldr	r1, [r7, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 ff65 	bl	8003e16 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a1e      	ldr	r2, [pc, #120]	; (8002fcc <HAL_TIM_PWM_Start+0x138>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d107      	bne.n	8002f66 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a18      	ldr	r2, [pc, #96]	; (8002fcc <HAL_TIM_PWM_Start+0x138>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d00e      	beq.n	8002f8e <HAL_TIM_PWM_Start+0xfa>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f78:	d009      	beq.n	8002f8e <HAL_TIM_PWM_Start+0xfa>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a14      	ldr	r2, [pc, #80]	; (8002fd0 <HAL_TIM_PWM_Start+0x13c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d004      	beq.n	8002f8e <HAL_TIM_PWM_Start+0xfa>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a12      	ldr	r2, [pc, #72]	; (8002fd4 <HAL_TIM_PWM_Start+0x140>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d111      	bne.n	8002fb2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2b06      	cmp	r3, #6
 8002f9e:	d010      	beq.n	8002fc2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0201 	orr.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb0:	e007      	b.n	8002fc2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0201 	orr.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40012c00 	.word	0x40012c00
 8002fd0:	40000400 	.word	0x40000400
 8002fd4:	40000800 	.word	0x40000800

08002fd8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e041      	b.n	800306e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d106      	bne.n	8003004 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7fe f8b4 	bl	800116c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3304      	adds	r3, #4
 8003014:	4619      	mov	r1, r3
 8003016:	4610      	mov	r0, r2
 8003018:	f000 fb70 	bl	80036fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b02      	cmp	r3, #2
 800308a:	d122      	bne.n	80030d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b02      	cmp	r3, #2
 8003098:	d11b      	bne.n	80030d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f06f 0202 	mvn.w	r2, #2
 80030a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	f003 0303 	and.w	r3, r3, #3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 fb04 	bl	80036c6 <HAL_TIM_IC_CaptureCallback>
 80030be:	e005      	b.n	80030cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 faf7 	bl	80036b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 fb06 	bl	80036d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d122      	bne.n	8003126 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d11b      	bne.n	8003126 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f06f 0204 	mvn.w	r2, #4
 80030f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 fada 	bl	80036c6 <HAL_TIM_IC_CaptureCallback>
 8003112:	e005      	b.n	8003120 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 facd 	bl	80036b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fadc 	bl	80036d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	2b08      	cmp	r3, #8
 8003132:	d122      	bne.n	800317a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b08      	cmp	r3, #8
 8003140:	d11b      	bne.n	800317a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f06f 0208 	mvn.w	r2, #8
 800314a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2204      	movs	r2, #4
 8003150:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 fab0 	bl	80036c6 <HAL_TIM_IC_CaptureCallback>
 8003166:	e005      	b.n	8003174 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 faa3 	bl	80036b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fab2 	bl	80036d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b10      	cmp	r3, #16
 8003186:	d122      	bne.n	80031ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f003 0310 	and.w	r3, r3, #16
 8003192:	2b10      	cmp	r3, #16
 8003194:	d11b      	bne.n	80031ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f06f 0210 	mvn.w	r2, #16
 800319e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2208      	movs	r2, #8
 80031a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 fa86 	bl	80036c6 <HAL_TIM_IC_CaptureCallback>
 80031ba:	e005      	b.n	80031c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 fa79 	bl	80036b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fa88 	bl	80036d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d10e      	bne.n	80031fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d107      	bne.n	80031fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f06f 0201 	mvn.w	r2, #1
 80031f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7fd f98b 	bl	8000510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003204:	2b80      	cmp	r3, #128	; 0x80
 8003206:	d10e      	bne.n	8003226 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003212:	2b80      	cmp	r3, #128	; 0x80
 8003214:	d107      	bne.n	8003226 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800321e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 fe84 	bl	8003f2e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003230:	2b40      	cmp	r3, #64	; 0x40
 8003232:	d10e      	bne.n	8003252 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323e:	2b40      	cmp	r3, #64	; 0x40
 8003240:	d107      	bne.n	8003252 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800324a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 fa4c 	bl	80036ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b20      	cmp	r3, #32
 800325e:	d10e      	bne.n	800327e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	2b20      	cmp	r3, #32
 800326c:	d107      	bne.n	800327e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f06f 0220 	mvn.w	r2, #32
 8003276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 fe4f 	bl	8003f1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003298:	2b01      	cmp	r3, #1
 800329a:	d101      	bne.n	80032a0 <HAL_TIM_IC_ConfigChannel+0x1a>
 800329c:	2302      	movs	r3, #2
 800329e:	e082      	b.n	80033a6 <HAL_TIM_IC_ConfigChannel+0x120>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d11b      	bne.n	80032e6 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	6819      	ldr	r1, [r3, #0]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f000 fc07 	bl	8003ad0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	699a      	ldr	r2, [r3, #24]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 020c 	bic.w	r2, r2, #12
 80032d0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6999      	ldr	r1, [r3, #24]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	619a      	str	r2, [r3, #24]
 80032e4:	e05a      	b.n	800339c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d11c      	bne.n	8003326 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6818      	ldr	r0, [r3, #0]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	6819      	ldr	r1, [r3, #0]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f000 fc70 	bl	8003be0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800330e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6999      	ldr	r1, [r3, #24]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	021a      	lsls	r2, r3, #8
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	619a      	str	r2, [r3, #24]
 8003324:	e03a      	b.n	800339c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b08      	cmp	r3, #8
 800332a:	d11b      	bne.n	8003364 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6818      	ldr	r0, [r3, #0]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	6819      	ldr	r1, [r3, #0]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f000 fcbb 	bl	8003cb6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	69da      	ldr	r2, [r3, #28]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 020c 	bic.w	r2, r2, #12
 800334e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	69d9      	ldr	r1, [r3, #28]
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	61da      	str	r2, [r3, #28]
 8003362:	e01b      	b.n	800339c <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6818      	ldr	r0, [r3, #0]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	6819      	ldr	r1, [r3, #0]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f000 fcda 	bl	8003d2c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	69da      	ldr	r2, [r3, #28]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003386:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	69d9      	ldr	r1, [r3, #28]
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	021a      	lsls	r2, r3, #8
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e0ac      	b.n	8003524 <HAL_TIM_PWM_ConfigChannel+0x174>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b0c      	cmp	r3, #12
 80033d6:	f200 809f 	bhi.w	8003518 <HAL_TIM_PWM_ConfigChannel+0x168>
 80033da:	a201      	add	r2, pc, #4	; (adr r2, 80033e0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80033dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e0:	08003415 	.word	0x08003415
 80033e4:	08003519 	.word	0x08003519
 80033e8:	08003519 	.word	0x08003519
 80033ec:	08003519 	.word	0x08003519
 80033f0:	08003455 	.word	0x08003455
 80033f4:	08003519 	.word	0x08003519
 80033f8:	08003519 	.word	0x08003519
 80033fc:	08003519 	.word	0x08003519
 8003400:	08003497 	.word	0x08003497
 8003404:	08003519 	.word	0x08003519
 8003408:	08003519 	.word	0x08003519
 800340c:	08003519 	.word	0x08003519
 8003410:	080034d7 	.word	0x080034d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68b9      	ldr	r1, [r7, #8]
 800341a:	4618      	mov	r0, r3
 800341c:	f000 f9d0 	bl	80037c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699a      	ldr	r2, [r3, #24]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0208 	orr.w	r2, r2, #8
 800342e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699a      	ldr	r2, [r3, #24]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0204 	bic.w	r2, r2, #4
 800343e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6999      	ldr	r1, [r3, #24]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	691a      	ldr	r2, [r3, #16]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	619a      	str	r2, [r3, #24]
      break;
 8003452:	e062      	b.n	800351a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68b9      	ldr	r1, [r7, #8]
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fa16 	bl	800388c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699a      	ldr	r2, [r3, #24]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800346e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699a      	ldr	r2, [r3, #24]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800347e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6999      	ldr	r1, [r3, #24]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	021a      	lsls	r2, r3, #8
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	619a      	str	r2, [r3, #24]
      break;
 8003494:	e041      	b.n	800351a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68b9      	ldr	r1, [r7, #8]
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fa5f 	bl	8003960 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	69da      	ldr	r2, [r3, #28]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0208 	orr.w	r2, r2, #8
 80034b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	69da      	ldr	r2, [r3, #28]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0204 	bic.w	r2, r2, #4
 80034c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69d9      	ldr	r1, [r3, #28]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	691a      	ldr	r2, [r3, #16]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	61da      	str	r2, [r3, #28]
      break;
 80034d4:	e021      	b.n	800351a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68b9      	ldr	r1, [r7, #8]
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 faa9 	bl	8003a34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	69da      	ldr	r2, [r3, #28]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	69da      	ldr	r2, [r3, #28]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	69d9      	ldr	r1, [r3, #28]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	021a      	lsls	r2, r3, #8
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	61da      	str	r2, [r3, #28]
      break;
 8003516:	e000      	b.n	800351a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003518:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_TIM_ConfigClockSource+0x18>
 8003540:	2302      	movs	r3, #2
 8003542:	e0b3      	b.n	80036ac <HAL_TIM_ConfigClockSource+0x180>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003562:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800356a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800357c:	d03e      	beq.n	80035fc <HAL_TIM_ConfigClockSource+0xd0>
 800357e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003582:	f200 8087 	bhi.w	8003694 <HAL_TIM_ConfigClockSource+0x168>
 8003586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800358a:	f000 8085 	beq.w	8003698 <HAL_TIM_ConfigClockSource+0x16c>
 800358e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003592:	d87f      	bhi.n	8003694 <HAL_TIM_ConfigClockSource+0x168>
 8003594:	2b70      	cmp	r3, #112	; 0x70
 8003596:	d01a      	beq.n	80035ce <HAL_TIM_ConfigClockSource+0xa2>
 8003598:	2b70      	cmp	r3, #112	; 0x70
 800359a:	d87b      	bhi.n	8003694 <HAL_TIM_ConfigClockSource+0x168>
 800359c:	2b60      	cmp	r3, #96	; 0x60
 800359e:	d050      	beq.n	8003642 <HAL_TIM_ConfigClockSource+0x116>
 80035a0:	2b60      	cmp	r3, #96	; 0x60
 80035a2:	d877      	bhi.n	8003694 <HAL_TIM_ConfigClockSource+0x168>
 80035a4:	2b50      	cmp	r3, #80	; 0x50
 80035a6:	d03c      	beq.n	8003622 <HAL_TIM_ConfigClockSource+0xf6>
 80035a8:	2b50      	cmp	r3, #80	; 0x50
 80035aa:	d873      	bhi.n	8003694 <HAL_TIM_ConfigClockSource+0x168>
 80035ac:	2b40      	cmp	r3, #64	; 0x40
 80035ae:	d058      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0x136>
 80035b0:	2b40      	cmp	r3, #64	; 0x40
 80035b2:	d86f      	bhi.n	8003694 <HAL_TIM_ConfigClockSource+0x168>
 80035b4:	2b30      	cmp	r3, #48	; 0x30
 80035b6:	d064      	beq.n	8003682 <HAL_TIM_ConfigClockSource+0x156>
 80035b8:	2b30      	cmp	r3, #48	; 0x30
 80035ba:	d86b      	bhi.n	8003694 <HAL_TIM_ConfigClockSource+0x168>
 80035bc:	2b20      	cmp	r3, #32
 80035be:	d060      	beq.n	8003682 <HAL_TIM_ConfigClockSource+0x156>
 80035c0:	2b20      	cmp	r3, #32
 80035c2:	d867      	bhi.n	8003694 <HAL_TIM_ConfigClockSource+0x168>
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d05c      	beq.n	8003682 <HAL_TIM_ConfigClockSource+0x156>
 80035c8:	2b10      	cmp	r3, #16
 80035ca:	d05a      	beq.n	8003682 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80035cc:	e062      	b.n	8003694 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6818      	ldr	r0, [r3, #0]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	6899      	ldr	r1, [r3, #8]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f000 fbfb 	bl	8003dd8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	609a      	str	r2, [r3, #8]
      break;
 80035fa:	e04e      	b.n	800369a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	6899      	ldr	r1, [r3, #8]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f000 fbe4 	bl	8003dd8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800361e:	609a      	str	r2, [r3, #8]
      break;
 8003620:	e03b      	b.n	800369a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	6859      	ldr	r1, [r3, #4]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	461a      	mov	r2, r3
 8003630:	f000 faa8 	bl	8003b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2150      	movs	r1, #80	; 0x50
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fbb2 	bl	8003da4 <TIM_ITRx_SetConfig>
      break;
 8003640:	e02b      	b.n	800369a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	6859      	ldr	r1, [r3, #4]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	461a      	mov	r2, r3
 8003650:	f000 fb02 	bl	8003c58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2160      	movs	r1, #96	; 0x60
 800365a:	4618      	mov	r0, r3
 800365c:	f000 fba2 	bl	8003da4 <TIM_ITRx_SetConfig>
      break;
 8003660:	e01b      	b.n	800369a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6818      	ldr	r0, [r3, #0]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	6859      	ldr	r1, [r3, #4]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	461a      	mov	r2, r3
 8003670:	f000 fa88 	bl	8003b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2140      	movs	r1, #64	; 0x40
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fb92 	bl	8003da4 <TIM_ITRx_SetConfig>
      break;
 8003680:	e00b      	b.n	800369a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4619      	mov	r1, r3
 800368c:	4610      	mov	r0, r2
 800368e:	f000 fb89 	bl	8003da4 <TIM_ITRx_SetConfig>
        break;
 8003692:	e002      	b.n	800369a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003694:	bf00      	nop
 8003696:	e000      	b.n	800369a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003698:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bc80      	pop	{r7}
 80036c4:	4770      	bx	lr

080036c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr

080036d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bc80      	pop	{r7}
 80036e8:	4770      	bx	lr

080036ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr

080036fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a29      	ldr	r2, [pc, #164]	; (80037b4 <TIM_Base_SetConfig+0xb8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00b      	beq.n	800372c <TIM_Base_SetConfig+0x30>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371a:	d007      	beq.n	800372c <TIM_Base_SetConfig+0x30>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a26      	ldr	r2, [pc, #152]	; (80037b8 <TIM_Base_SetConfig+0xbc>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d003      	beq.n	800372c <TIM_Base_SetConfig+0x30>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a25      	ldr	r2, [pc, #148]	; (80037bc <TIM_Base_SetConfig+0xc0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d108      	bne.n	800373e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a1c      	ldr	r2, [pc, #112]	; (80037b4 <TIM_Base_SetConfig+0xb8>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d00b      	beq.n	800375e <TIM_Base_SetConfig+0x62>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374c:	d007      	beq.n	800375e <TIM_Base_SetConfig+0x62>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a19      	ldr	r2, [pc, #100]	; (80037b8 <TIM_Base_SetConfig+0xbc>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d003      	beq.n	800375e <TIM_Base_SetConfig+0x62>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a18      	ldr	r2, [pc, #96]	; (80037bc <TIM_Base_SetConfig+0xc0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d108      	bne.n	8003770 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	4313      	orrs	r3, r2
 800376e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	4313      	orrs	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a07      	ldr	r2, [pc, #28]	; (80037b4 <TIM_Base_SetConfig+0xb8>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d103      	bne.n	80037a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	691a      	ldr	r2, [r3, #16]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	615a      	str	r2, [r3, #20]
}
 80037aa:	bf00      	nop
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr
 80037b4:	40012c00 	.word	0x40012c00
 80037b8:	40000400 	.word	0x40000400
 80037bc:	40000800 	.word	0x40000800

080037c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	f023 0201 	bic.w	r2, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 0303 	bic.w	r3, r3, #3
 80037f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f023 0302 	bic.w	r3, r3, #2
 8003808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	4313      	orrs	r3, r2
 8003812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a1c      	ldr	r2, [pc, #112]	; (8003888 <TIM_OC1_SetConfig+0xc8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d10c      	bne.n	8003836 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f023 0308 	bic.w	r3, r3, #8
 8003822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f023 0304 	bic.w	r3, r3, #4
 8003834:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a13      	ldr	r2, [pc, #76]	; (8003888 <TIM_OC1_SetConfig+0xc8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d111      	bne.n	8003862 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800384c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	4313      	orrs	r3, r2
 8003860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	621a      	str	r2, [r3, #32]
}
 800387c:	bf00      	nop
 800387e:	371c      	adds	r7, #28
 8003880:	46bd      	mov	sp, r7
 8003882:	bc80      	pop	{r7}
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	40012c00 	.word	0x40012c00

0800388c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	f023 0210 	bic.w	r2, r3, #16
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	021b      	lsls	r3, r3, #8
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f023 0320 	bic.w	r3, r3, #32
 80038d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a1d      	ldr	r2, [pc, #116]	; (800395c <TIM_OC2_SetConfig+0xd0>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d10d      	bne.n	8003908 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003906:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a14      	ldr	r2, [pc, #80]	; (800395c <TIM_OC2_SetConfig+0xd0>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d113      	bne.n	8003938 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003916:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800391e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	4313      	orrs	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	621a      	str	r2, [r3, #32]
}
 8003952:	bf00      	nop
 8003954:	371c      	adds	r7, #28
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr
 800395c:	40012c00 	.word	0x40012c00

08003960 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800398e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f023 0303 	bic.w	r3, r3, #3
 8003996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	4313      	orrs	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	021b      	lsls	r3, r3, #8
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a1d      	ldr	r2, [pc, #116]	; (8003a30 <TIM_OC3_SetConfig+0xd0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d10d      	bne.n	80039da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	021b      	lsls	r3, r3, #8
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a14      	ldr	r2, [pc, #80]	; (8003a30 <TIM_OC3_SetConfig+0xd0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d113      	bne.n	8003a0a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	621a      	str	r2, [r3, #32]
}
 8003a24:	bf00      	nop
 8003a26:	371c      	adds	r7, #28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40012c00 	.word	0x40012c00

08003a34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	021b      	lsls	r3, r3, #8
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	031b      	lsls	r3, r3, #12
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a0f      	ldr	r2, [pc, #60]	; (8003acc <TIM_OC4_SetConfig+0x98>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d109      	bne.n	8003aa8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	019b      	lsls	r3, r3, #6
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	621a      	str	r2, [r3, #32]
}
 8003ac2:	bf00      	nop
 8003ac4:	371c      	adds	r7, #28
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr
 8003acc:	40012c00 	.word	0x40012c00

08003ad0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	f023 0201 	bic.w	r2, r3, #1
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	4a1f      	ldr	r2, [pc, #124]	; (8003b78 <TIM_TI1_SetConfig+0xa8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00b      	beq.n	8003b16 <TIM_TI1_SetConfig+0x46>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b04:	d007      	beq.n	8003b16 <TIM_TI1_SetConfig+0x46>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4a1c      	ldr	r2, [pc, #112]	; (8003b7c <TIM_TI1_SetConfig+0xac>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d003      	beq.n	8003b16 <TIM_TI1_SetConfig+0x46>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4a1b      	ldr	r2, [pc, #108]	; (8003b80 <TIM_TI1_SetConfig+0xb0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d101      	bne.n	8003b1a <TIM_TI1_SetConfig+0x4a>
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <TIM_TI1_SetConfig+0x4c>
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f023 0303 	bic.w	r3, r3, #3
 8003b26:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	e003      	b.n	8003b3a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f023 030a 	bic.w	r3, r3, #10
 8003b54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f003 030a 	and.w	r3, r3, #10
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	621a      	str	r2, [r3, #32]
}
 8003b6e:	bf00      	nop
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr
 8003b78:	40012c00 	.word	0x40012c00
 8003b7c:	40000400 	.word	0x40000400
 8003b80:	40000800 	.word	0x40000800

08003b84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	f023 0201 	bic.w	r2, r3, #1
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f023 030a 	bic.w	r3, r3, #10
 8003bc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	621a      	str	r2, [r3, #32]
}
 8003bd6:	bf00      	nop
 8003bd8:	371c      	adds	r7, #28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc80      	pop	{r7}
 8003bde:	4770      	bx	lr

08003be0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	f023 0210 	bic.w	r2, r3, #16
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	021b      	lsls	r3, r3, #8
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	031b      	lsls	r3, r3, #12
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c32:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	621a      	str	r2, [r3, #32]
}
 8003c4e:	bf00      	nop
 8003c50:	371c      	adds	r7, #28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr

08003c58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	f023 0210 	bic.w	r2, r3, #16
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c82:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	031b      	lsls	r3, r3, #12
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	621a      	str	r2, [r3, #32]
}
 8003cac:	bf00      	nop
 8003cae:	371c      	adds	r7, #28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bc80      	pop	{r7}
 8003cb4:	4770      	bx	lr

08003cb6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b087      	sub	sp, #28
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	60f8      	str	r0, [r7, #12]
 8003cbe:	60b9      	str	r1, [r7, #8]
 8003cc0:	607a      	str	r2, [r7, #4]
 8003cc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f023 0303 	bic.w	r3, r3, #3
 8003ce2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cf2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d06:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	021b      	lsls	r3, r3, #8
 8003d0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	621a      	str	r2, [r3, #32]
}
 8003d22:	bf00      	nop
 8003d24:	371c      	adds	r7, #28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr

08003d2c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
 8003d38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	021b      	lsls	r3, r3, #8
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d6a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	031b      	lsls	r3, r3, #12
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d7e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	031b      	lsls	r3, r3, #12
 8003d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	621a      	str	r2, [r3, #32]
}
 8003d9a:	bf00      	nop
 8003d9c:	371c      	adds	r7, #28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr

08003da4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f043 0307 	orr.w	r3, r3, #7
 8003dc6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	609a      	str	r2, [r3, #8]
}
 8003dce:	bf00      	nop
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr

08003dd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
 8003de4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003df2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	021a      	lsls	r2, r3, #8
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	609a      	str	r2, [r3, #8]
}
 8003e0c:	bf00      	nop
 8003e0e:	371c      	adds	r7, #28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc80      	pop	{r7}
 8003e14:	4770      	bx	lr

08003e16 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b087      	sub	sp, #28
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	60f8      	str	r0, [r7, #12]
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f003 031f 	and.w	r3, r3, #31
 8003e28:	2201      	movs	r2, #1
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a1a      	ldr	r2, [r3, #32]
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	43db      	mvns	r3, r3
 8003e38:	401a      	ands	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a1a      	ldr	r2, [r3, #32]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	f003 031f 	and.w	r3, r3, #31
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	621a      	str	r2, [r3, #32]
}
 8003e54:	bf00      	nop
 8003e56:	371c      	adds	r7, #28
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr
	...

08003e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e74:	2302      	movs	r3, #2
 8003e76:	e046      	b.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a16      	ldr	r2, [pc, #88]	; (8003f10 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d00e      	beq.n	8003eda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec4:	d009      	beq.n	8003eda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a12      	ldr	r2, [pc, #72]	; (8003f14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d004      	beq.n	8003eda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a10      	ldr	r2, [pc, #64]	; (8003f18 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ee0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr
 8003f10:	40012c00 	.word	0x40012c00
 8003f14:	40000400 	.word	0x40000400
 8003f18:	40000800 	.word	0x40000800

08003f1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	4770      	bx	lr

08003f2e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr

08003f40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e03f      	b.n	8003fd2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d106      	bne.n	8003f6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7fd f9da 	bl	8001320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2224      	movs	r2, #36	; 0x24
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f905 	bl	8004194 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695a      	ldr	r2, [r3, #20]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68da      	ldr	r2, [r3, #12]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b08a      	sub	sp, #40	; 0x28
 8003fde:	af02      	add	r7, sp, #8
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	603b      	str	r3, [r7, #0]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b20      	cmp	r3, #32
 8003ff8:	d17c      	bne.n	80040f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <HAL_UART_Transmit+0x2c>
 8004000:	88fb      	ldrh	r3, [r7, #6]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e075      	b.n	80040f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_UART_Transmit+0x3e>
 8004014:	2302      	movs	r3, #2
 8004016:	e06e      	b.n	80040f6 <HAL_UART_Transmit+0x11c>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2221      	movs	r2, #33	; 0x21
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800402e:	f7fd fb2b 	bl	8001688 <HAL_GetTick>
 8004032:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	88fa      	ldrh	r2, [r7, #6]
 8004038:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	88fa      	ldrh	r2, [r7, #6]
 800403e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004048:	d108      	bne.n	800405c <HAL_UART_Transmit+0x82>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d104      	bne.n	800405c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004052:	2300      	movs	r3, #0
 8004054:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	61bb      	str	r3, [r7, #24]
 800405a:	e003      	b.n	8004064 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004060:	2300      	movs	r3, #0
 8004062:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800406c:	e02a      	b.n	80040c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2200      	movs	r2, #0
 8004076:	2180      	movs	r1, #128	; 0x80
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 f840 	bl	80040fe <UART_WaitOnFlagUntilTimeout>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e036      	b.n	80040f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10b      	bne.n	80040a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800409c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	3302      	adds	r3, #2
 80040a2:	61bb      	str	r3, [r7, #24]
 80040a4:	e007      	b.n	80040b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	781a      	ldrb	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	3301      	adds	r3, #1
 80040b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1cf      	bne.n	800406e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2200      	movs	r2, #0
 80040d6:	2140      	movs	r1, #64	; 0x40
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f810 	bl	80040fe <UART_WaitOnFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e006      	b.n	80040f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	e000      	b.n	80040f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80040f4:	2302      	movs	r3, #2
  }
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3720      	adds	r7, #32
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b084      	sub	sp, #16
 8004102:	af00      	add	r7, sp, #0
 8004104:	60f8      	str	r0, [r7, #12]
 8004106:	60b9      	str	r1, [r7, #8]
 8004108:	603b      	str	r3, [r7, #0]
 800410a:	4613      	mov	r3, r2
 800410c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800410e:	e02c      	b.n	800416a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004116:	d028      	beq.n	800416a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d007      	beq.n	800412e <UART_WaitOnFlagUntilTimeout+0x30>
 800411e:	f7fd fab3 	bl	8001688 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	429a      	cmp	r2, r3
 800412c:	d21d      	bcs.n	800416a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800413c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695a      	ldr	r2, [r3, #20]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0201 	bic.w	r2, r2, #1
 800414c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2220      	movs	r2, #32
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2220      	movs	r2, #32
 800415a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e00f      	b.n	800418a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4013      	ands	r3, r2
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	429a      	cmp	r2, r3
 8004178:	bf0c      	ite	eq
 800417a:	2301      	moveq	r3, #1
 800417c:	2300      	movne	r3, #0
 800417e:	b2db      	uxtb	r3, r3
 8004180:	461a      	mov	r2, r3
 8004182:	79fb      	ldrb	r3, [r7, #7]
 8004184:	429a      	cmp	r2, r3
 8004186:	d0c3      	beq.n	8004110 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80041ce:	f023 030c 	bic.w	r3, r3, #12
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6812      	ldr	r2, [r2, #0]
 80041d6:	68b9      	ldr	r1, [r7, #8]
 80041d8:	430b      	orrs	r3, r1
 80041da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	699a      	ldr	r2, [r3, #24]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a2c      	ldr	r2, [pc, #176]	; (80042a8 <UART_SetConfig+0x114>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d103      	bne.n	8004204 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80041fc:	f7fe fc70 	bl	8002ae0 <HAL_RCC_GetPCLK2Freq>
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	e002      	b.n	800420a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004204:	f7fe fc58 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 8004208:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4613      	mov	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	009a      	lsls	r2, r3, #2
 8004214:	441a      	add	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004220:	4a22      	ldr	r2, [pc, #136]	; (80042ac <UART_SetConfig+0x118>)
 8004222:	fba2 2303 	umull	r2, r3, r2, r3
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	0119      	lsls	r1, r3, #4
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4613      	mov	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	009a      	lsls	r2, r3, #2
 8004234:	441a      	add	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004240:	4b1a      	ldr	r3, [pc, #104]	; (80042ac <UART_SetConfig+0x118>)
 8004242:	fba3 0302 	umull	r0, r3, r3, r2
 8004246:	095b      	lsrs	r3, r3, #5
 8004248:	2064      	movs	r0, #100	; 0x64
 800424a:	fb00 f303 	mul.w	r3, r0, r3
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	3332      	adds	r3, #50	; 0x32
 8004254:	4a15      	ldr	r2, [pc, #84]	; (80042ac <UART_SetConfig+0x118>)
 8004256:	fba2 2303 	umull	r2, r3, r2, r3
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004260:	4419      	add	r1, r3
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	009a      	lsls	r2, r3, #2
 800426c:	441a      	add	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	fbb2 f2f3 	udiv	r2, r2, r3
 8004278:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <UART_SetConfig+0x118>)
 800427a:	fba3 0302 	umull	r0, r3, r3, r2
 800427e:	095b      	lsrs	r3, r3, #5
 8004280:	2064      	movs	r0, #100	; 0x64
 8004282:	fb00 f303 	mul.w	r3, r0, r3
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	3332      	adds	r3, #50	; 0x32
 800428c:	4a07      	ldr	r2, [pc, #28]	; (80042ac <UART_SetConfig+0x118>)
 800428e:	fba2 2303 	umull	r2, r3, r2, r3
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	f003 020f 	and.w	r2, r3, #15
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	440a      	add	r2, r1
 800429e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042a0:	bf00      	nop
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40013800 	.word	0x40013800
 80042ac:	51eb851f 	.word	0x51eb851f

080042b0 <__errno>:
 80042b0:	4b01      	ldr	r3, [pc, #4]	; (80042b8 <__errno+0x8>)
 80042b2:	6818      	ldr	r0, [r3, #0]
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	2000000c 	.word	0x2000000c

080042bc <__libc_init_array>:
 80042bc:	b570      	push	{r4, r5, r6, lr}
 80042be:	2600      	movs	r6, #0
 80042c0:	4d0c      	ldr	r5, [pc, #48]	; (80042f4 <__libc_init_array+0x38>)
 80042c2:	4c0d      	ldr	r4, [pc, #52]	; (80042f8 <__libc_init_array+0x3c>)
 80042c4:	1b64      	subs	r4, r4, r5
 80042c6:	10a4      	asrs	r4, r4, #2
 80042c8:	42a6      	cmp	r6, r4
 80042ca:	d109      	bne.n	80042e0 <__libc_init_array+0x24>
 80042cc:	f000 fff8 	bl	80052c0 <_init>
 80042d0:	2600      	movs	r6, #0
 80042d2:	4d0a      	ldr	r5, [pc, #40]	; (80042fc <__libc_init_array+0x40>)
 80042d4:	4c0a      	ldr	r4, [pc, #40]	; (8004300 <__libc_init_array+0x44>)
 80042d6:	1b64      	subs	r4, r4, r5
 80042d8:	10a4      	asrs	r4, r4, #2
 80042da:	42a6      	cmp	r6, r4
 80042dc:	d105      	bne.n	80042ea <__libc_init_array+0x2e>
 80042de:	bd70      	pop	{r4, r5, r6, pc}
 80042e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80042e4:	4798      	blx	r3
 80042e6:	3601      	adds	r6, #1
 80042e8:	e7ee      	b.n	80042c8 <__libc_init_array+0xc>
 80042ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ee:	4798      	blx	r3
 80042f0:	3601      	adds	r6, #1
 80042f2:	e7f2      	b.n	80042da <__libc_init_array+0x1e>
 80042f4:	080053f0 	.word	0x080053f0
 80042f8:	080053f0 	.word	0x080053f0
 80042fc:	080053f0 	.word	0x080053f0
 8004300:	080053f4 	.word	0x080053f4

08004304 <memset>:
 8004304:	4603      	mov	r3, r0
 8004306:	4402      	add	r2, r0
 8004308:	4293      	cmp	r3, r2
 800430a:	d100      	bne.n	800430e <memset+0xa>
 800430c:	4770      	bx	lr
 800430e:	f803 1b01 	strb.w	r1, [r3], #1
 8004312:	e7f9      	b.n	8004308 <memset+0x4>

08004314 <iprintf>:
 8004314:	b40f      	push	{r0, r1, r2, r3}
 8004316:	4b0a      	ldr	r3, [pc, #40]	; (8004340 <iprintf+0x2c>)
 8004318:	b513      	push	{r0, r1, r4, lr}
 800431a:	681c      	ldr	r4, [r3, #0]
 800431c:	b124      	cbz	r4, 8004328 <iprintf+0x14>
 800431e:	69a3      	ldr	r3, [r4, #24]
 8004320:	b913      	cbnz	r3, 8004328 <iprintf+0x14>
 8004322:	4620      	mov	r0, r4
 8004324:	f000 fa5e 	bl	80047e4 <__sinit>
 8004328:	ab05      	add	r3, sp, #20
 800432a:	4620      	mov	r0, r4
 800432c:	9a04      	ldr	r2, [sp, #16]
 800432e:	68a1      	ldr	r1, [r4, #8]
 8004330:	9301      	str	r3, [sp, #4]
 8004332:	f000 fc29 	bl	8004b88 <_vfiprintf_r>
 8004336:	b002      	add	sp, #8
 8004338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800433c:	b004      	add	sp, #16
 800433e:	4770      	bx	lr
 8004340:	2000000c 	.word	0x2000000c

08004344 <_puts_r>:
 8004344:	b570      	push	{r4, r5, r6, lr}
 8004346:	460e      	mov	r6, r1
 8004348:	4605      	mov	r5, r0
 800434a:	b118      	cbz	r0, 8004354 <_puts_r+0x10>
 800434c:	6983      	ldr	r3, [r0, #24]
 800434e:	b90b      	cbnz	r3, 8004354 <_puts_r+0x10>
 8004350:	f000 fa48 	bl	80047e4 <__sinit>
 8004354:	69ab      	ldr	r3, [r5, #24]
 8004356:	68ac      	ldr	r4, [r5, #8]
 8004358:	b913      	cbnz	r3, 8004360 <_puts_r+0x1c>
 800435a:	4628      	mov	r0, r5
 800435c:	f000 fa42 	bl	80047e4 <__sinit>
 8004360:	4b2c      	ldr	r3, [pc, #176]	; (8004414 <_puts_r+0xd0>)
 8004362:	429c      	cmp	r4, r3
 8004364:	d120      	bne.n	80043a8 <_puts_r+0x64>
 8004366:	686c      	ldr	r4, [r5, #4]
 8004368:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800436a:	07db      	lsls	r3, r3, #31
 800436c:	d405      	bmi.n	800437a <_puts_r+0x36>
 800436e:	89a3      	ldrh	r3, [r4, #12]
 8004370:	0598      	lsls	r0, r3, #22
 8004372:	d402      	bmi.n	800437a <_puts_r+0x36>
 8004374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004376:	f000 fad3 	bl	8004920 <__retarget_lock_acquire_recursive>
 800437a:	89a3      	ldrh	r3, [r4, #12]
 800437c:	0719      	lsls	r1, r3, #28
 800437e:	d51d      	bpl.n	80043bc <_puts_r+0x78>
 8004380:	6923      	ldr	r3, [r4, #16]
 8004382:	b1db      	cbz	r3, 80043bc <_puts_r+0x78>
 8004384:	3e01      	subs	r6, #1
 8004386:	68a3      	ldr	r3, [r4, #8]
 8004388:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800438c:	3b01      	subs	r3, #1
 800438e:	60a3      	str	r3, [r4, #8]
 8004390:	bb39      	cbnz	r1, 80043e2 <_puts_r+0x9e>
 8004392:	2b00      	cmp	r3, #0
 8004394:	da38      	bge.n	8004408 <_puts_r+0xc4>
 8004396:	4622      	mov	r2, r4
 8004398:	210a      	movs	r1, #10
 800439a:	4628      	mov	r0, r5
 800439c:	f000 f848 	bl	8004430 <__swbuf_r>
 80043a0:	3001      	adds	r0, #1
 80043a2:	d011      	beq.n	80043c8 <_puts_r+0x84>
 80043a4:	250a      	movs	r5, #10
 80043a6:	e011      	b.n	80043cc <_puts_r+0x88>
 80043a8:	4b1b      	ldr	r3, [pc, #108]	; (8004418 <_puts_r+0xd4>)
 80043aa:	429c      	cmp	r4, r3
 80043ac:	d101      	bne.n	80043b2 <_puts_r+0x6e>
 80043ae:	68ac      	ldr	r4, [r5, #8]
 80043b0:	e7da      	b.n	8004368 <_puts_r+0x24>
 80043b2:	4b1a      	ldr	r3, [pc, #104]	; (800441c <_puts_r+0xd8>)
 80043b4:	429c      	cmp	r4, r3
 80043b6:	bf08      	it	eq
 80043b8:	68ec      	ldreq	r4, [r5, #12]
 80043ba:	e7d5      	b.n	8004368 <_puts_r+0x24>
 80043bc:	4621      	mov	r1, r4
 80043be:	4628      	mov	r0, r5
 80043c0:	f000 f888 	bl	80044d4 <__swsetup_r>
 80043c4:	2800      	cmp	r0, #0
 80043c6:	d0dd      	beq.n	8004384 <_puts_r+0x40>
 80043c8:	f04f 35ff 	mov.w	r5, #4294967295
 80043cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043ce:	07da      	lsls	r2, r3, #31
 80043d0:	d405      	bmi.n	80043de <_puts_r+0x9a>
 80043d2:	89a3      	ldrh	r3, [r4, #12]
 80043d4:	059b      	lsls	r3, r3, #22
 80043d6:	d402      	bmi.n	80043de <_puts_r+0x9a>
 80043d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043da:	f000 faa2 	bl	8004922 <__retarget_lock_release_recursive>
 80043de:	4628      	mov	r0, r5
 80043e0:	bd70      	pop	{r4, r5, r6, pc}
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	da04      	bge.n	80043f0 <_puts_r+0xac>
 80043e6:	69a2      	ldr	r2, [r4, #24]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	dc06      	bgt.n	80043fa <_puts_r+0xb6>
 80043ec:	290a      	cmp	r1, #10
 80043ee:	d004      	beq.n	80043fa <_puts_r+0xb6>
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	1c5a      	adds	r2, r3, #1
 80043f4:	6022      	str	r2, [r4, #0]
 80043f6:	7019      	strb	r1, [r3, #0]
 80043f8:	e7c5      	b.n	8004386 <_puts_r+0x42>
 80043fa:	4622      	mov	r2, r4
 80043fc:	4628      	mov	r0, r5
 80043fe:	f000 f817 	bl	8004430 <__swbuf_r>
 8004402:	3001      	adds	r0, #1
 8004404:	d1bf      	bne.n	8004386 <_puts_r+0x42>
 8004406:	e7df      	b.n	80043c8 <_puts_r+0x84>
 8004408:	250a      	movs	r5, #10
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	6022      	str	r2, [r4, #0]
 8004410:	701d      	strb	r5, [r3, #0]
 8004412:	e7db      	b.n	80043cc <_puts_r+0x88>
 8004414:	0800537c 	.word	0x0800537c
 8004418:	0800539c 	.word	0x0800539c
 800441c:	0800535c 	.word	0x0800535c

08004420 <puts>:
 8004420:	4b02      	ldr	r3, [pc, #8]	; (800442c <puts+0xc>)
 8004422:	4601      	mov	r1, r0
 8004424:	6818      	ldr	r0, [r3, #0]
 8004426:	f7ff bf8d 	b.w	8004344 <_puts_r>
 800442a:	bf00      	nop
 800442c:	2000000c 	.word	0x2000000c

08004430 <__swbuf_r>:
 8004430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004432:	460e      	mov	r6, r1
 8004434:	4614      	mov	r4, r2
 8004436:	4605      	mov	r5, r0
 8004438:	b118      	cbz	r0, 8004442 <__swbuf_r+0x12>
 800443a:	6983      	ldr	r3, [r0, #24]
 800443c:	b90b      	cbnz	r3, 8004442 <__swbuf_r+0x12>
 800443e:	f000 f9d1 	bl	80047e4 <__sinit>
 8004442:	4b21      	ldr	r3, [pc, #132]	; (80044c8 <__swbuf_r+0x98>)
 8004444:	429c      	cmp	r4, r3
 8004446:	d12b      	bne.n	80044a0 <__swbuf_r+0x70>
 8004448:	686c      	ldr	r4, [r5, #4]
 800444a:	69a3      	ldr	r3, [r4, #24]
 800444c:	60a3      	str	r3, [r4, #8]
 800444e:	89a3      	ldrh	r3, [r4, #12]
 8004450:	071a      	lsls	r2, r3, #28
 8004452:	d52f      	bpl.n	80044b4 <__swbuf_r+0x84>
 8004454:	6923      	ldr	r3, [r4, #16]
 8004456:	b36b      	cbz	r3, 80044b4 <__swbuf_r+0x84>
 8004458:	6923      	ldr	r3, [r4, #16]
 800445a:	6820      	ldr	r0, [r4, #0]
 800445c:	b2f6      	uxtb	r6, r6
 800445e:	1ac0      	subs	r0, r0, r3
 8004460:	6963      	ldr	r3, [r4, #20]
 8004462:	4637      	mov	r7, r6
 8004464:	4283      	cmp	r3, r0
 8004466:	dc04      	bgt.n	8004472 <__swbuf_r+0x42>
 8004468:	4621      	mov	r1, r4
 800446a:	4628      	mov	r0, r5
 800446c:	f000 f926 	bl	80046bc <_fflush_r>
 8004470:	bb30      	cbnz	r0, 80044c0 <__swbuf_r+0x90>
 8004472:	68a3      	ldr	r3, [r4, #8]
 8004474:	3001      	adds	r0, #1
 8004476:	3b01      	subs	r3, #1
 8004478:	60a3      	str	r3, [r4, #8]
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	6022      	str	r2, [r4, #0]
 8004480:	701e      	strb	r6, [r3, #0]
 8004482:	6963      	ldr	r3, [r4, #20]
 8004484:	4283      	cmp	r3, r0
 8004486:	d004      	beq.n	8004492 <__swbuf_r+0x62>
 8004488:	89a3      	ldrh	r3, [r4, #12]
 800448a:	07db      	lsls	r3, r3, #31
 800448c:	d506      	bpl.n	800449c <__swbuf_r+0x6c>
 800448e:	2e0a      	cmp	r6, #10
 8004490:	d104      	bne.n	800449c <__swbuf_r+0x6c>
 8004492:	4621      	mov	r1, r4
 8004494:	4628      	mov	r0, r5
 8004496:	f000 f911 	bl	80046bc <_fflush_r>
 800449a:	b988      	cbnz	r0, 80044c0 <__swbuf_r+0x90>
 800449c:	4638      	mov	r0, r7
 800449e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044a0:	4b0a      	ldr	r3, [pc, #40]	; (80044cc <__swbuf_r+0x9c>)
 80044a2:	429c      	cmp	r4, r3
 80044a4:	d101      	bne.n	80044aa <__swbuf_r+0x7a>
 80044a6:	68ac      	ldr	r4, [r5, #8]
 80044a8:	e7cf      	b.n	800444a <__swbuf_r+0x1a>
 80044aa:	4b09      	ldr	r3, [pc, #36]	; (80044d0 <__swbuf_r+0xa0>)
 80044ac:	429c      	cmp	r4, r3
 80044ae:	bf08      	it	eq
 80044b0:	68ec      	ldreq	r4, [r5, #12]
 80044b2:	e7ca      	b.n	800444a <__swbuf_r+0x1a>
 80044b4:	4621      	mov	r1, r4
 80044b6:	4628      	mov	r0, r5
 80044b8:	f000 f80c 	bl	80044d4 <__swsetup_r>
 80044bc:	2800      	cmp	r0, #0
 80044be:	d0cb      	beq.n	8004458 <__swbuf_r+0x28>
 80044c0:	f04f 37ff 	mov.w	r7, #4294967295
 80044c4:	e7ea      	b.n	800449c <__swbuf_r+0x6c>
 80044c6:	bf00      	nop
 80044c8:	0800537c 	.word	0x0800537c
 80044cc:	0800539c 	.word	0x0800539c
 80044d0:	0800535c 	.word	0x0800535c

080044d4 <__swsetup_r>:
 80044d4:	4b32      	ldr	r3, [pc, #200]	; (80045a0 <__swsetup_r+0xcc>)
 80044d6:	b570      	push	{r4, r5, r6, lr}
 80044d8:	681d      	ldr	r5, [r3, #0]
 80044da:	4606      	mov	r6, r0
 80044dc:	460c      	mov	r4, r1
 80044de:	b125      	cbz	r5, 80044ea <__swsetup_r+0x16>
 80044e0:	69ab      	ldr	r3, [r5, #24]
 80044e2:	b913      	cbnz	r3, 80044ea <__swsetup_r+0x16>
 80044e4:	4628      	mov	r0, r5
 80044e6:	f000 f97d 	bl	80047e4 <__sinit>
 80044ea:	4b2e      	ldr	r3, [pc, #184]	; (80045a4 <__swsetup_r+0xd0>)
 80044ec:	429c      	cmp	r4, r3
 80044ee:	d10f      	bne.n	8004510 <__swsetup_r+0x3c>
 80044f0:	686c      	ldr	r4, [r5, #4]
 80044f2:	89a3      	ldrh	r3, [r4, #12]
 80044f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044f8:	0719      	lsls	r1, r3, #28
 80044fa:	d42c      	bmi.n	8004556 <__swsetup_r+0x82>
 80044fc:	06dd      	lsls	r5, r3, #27
 80044fe:	d411      	bmi.n	8004524 <__swsetup_r+0x50>
 8004500:	2309      	movs	r3, #9
 8004502:	6033      	str	r3, [r6, #0]
 8004504:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004508:	f04f 30ff 	mov.w	r0, #4294967295
 800450c:	81a3      	strh	r3, [r4, #12]
 800450e:	e03e      	b.n	800458e <__swsetup_r+0xba>
 8004510:	4b25      	ldr	r3, [pc, #148]	; (80045a8 <__swsetup_r+0xd4>)
 8004512:	429c      	cmp	r4, r3
 8004514:	d101      	bne.n	800451a <__swsetup_r+0x46>
 8004516:	68ac      	ldr	r4, [r5, #8]
 8004518:	e7eb      	b.n	80044f2 <__swsetup_r+0x1e>
 800451a:	4b24      	ldr	r3, [pc, #144]	; (80045ac <__swsetup_r+0xd8>)
 800451c:	429c      	cmp	r4, r3
 800451e:	bf08      	it	eq
 8004520:	68ec      	ldreq	r4, [r5, #12]
 8004522:	e7e6      	b.n	80044f2 <__swsetup_r+0x1e>
 8004524:	0758      	lsls	r0, r3, #29
 8004526:	d512      	bpl.n	800454e <__swsetup_r+0x7a>
 8004528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800452a:	b141      	cbz	r1, 800453e <__swsetup_r+0x6a>
 800452c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004530:	4299      	cmp	r1, r3
 8004532:	d002      	beq.n	800453a <__swsetup_r+0x66>
 8004534:	4630      	mov	r0, r6
 8004536:	f000 fa59 	bl	80049ec <_free_r>
 800453a:	2300      	movs	r3, #0
 800453c:	6363      	str	r3, [r4, #52]	; 0x34
 800453e:	89a3      	ldrh	r3, [r4, #12]
 8004540:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004544:	81a3      	strh	r3, [r4, #12]
 8004546:	2300      	movs	r3, #0
 8004548:	6063      	str	r3, [r4, #4]
 800454a:	6923      	ldr	r3, [r4, #16]
 800454c:	6023      	str	r3, [r4, #0]
 800454e:	89a3      	ldrh	r3, [r4, #12]
 8004550:	f043 0308 	orr.w	r3, r3, #8
 8004554:	81a3      	strh	r3, [r4, #12]
 8004556:	6923      	ldr	r3, [r4, #16]
 8004558:	b94b      	cbnz	r3, 800456e <__swsetup_r+0x9a>
 800455a:	89a3      	ldrh	r3, [r4, #12]
 800455c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004564:	d003      	beq.n	800456e <__swsetup_r+0x9a>
 8004566:	4621      	mov	r1, r4
 8004568:	4630      	mov	r0, r6
 800456a:	f000 f9ff 	bl	800496c <__smakebuf_r>
 800456e:	89a0      	ldrh	r0, [r4, #12]
 8004570:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004574:	f010 0301 	ands.w	r3, r0, #1
 8004578:	d00a      	beq.n	8004590 <__swsetup_r+0xbc>
 800457a:	2300      	movs	r3, #0
 800457c:	60a3      	str	r3, [r4, #8]
 800457e:	6963      	ldr	r3, [r4, #20]
 8004580:	425b      	negs	r3, r3
 8004582:	61a3      	str	r3, [r4, #24]
 8004584:	6923      	ldr	r3, [r4, #16]
 8004586:	b943      	cbnz	r3, 800459a <__swsetup_r+0xc6>
 8004588:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800458c:	d1ba      	bne.n	8004504 <__swsetup_r+0x30>
 800458e:	bd70      	pop	{r4, r5, r6, pc}
 8004590:	0781      	lsls	r1, r0, #30
 8004592:	bf58      	it	pl
 8004594:	6963      	ldrpl	r3, [r4, #20]
 8004596:	60a3      	str	r3, [r4, #8]
 8004598:	e7f4      	b.n	8004584 <__swsetup_r+0xb0>
 800459a:	2000      	movs	r0, #0
 800459c:	e7f7      	b.n	800458e <__swsetup_r+0xba>
 800459e:	bf00      	nop
 80045a0:	2000000c 	.word	0x2000000c
 80045a4:	0800537c 	.word	0x0800537c
 80045a8:	0800539c 	.word	0x0800539c
 80045ac:	0800535c 	.word	0x0800535c

080045b0 <__sflush_r>:
 80045b0:	898a      	ldrh	r2, [r1, #12]
 80045b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045b6:	4605      	mov	r5, r0
 80045b8:	0710      	lsls	r0, r2, #28
 80045ba:	460c      	mov	r4, r1
 80045bc:	d458      	bmi.n	8004670 <__sflush_r+0xc0>
 80045be:	684b      	ldr	r3, [r1, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	dc05      	bgt.n	80045d0 <__sflush_r+0x20>
 80045c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	dc02      	bgt.n	80045d0 <__sflush_r+0x20>
 80045ca:	2000      	movs	r0, #0
 80045cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045d2:	2e00      	cmp	r6, #0
 80045d4:	d0f9      	beq.n	80045ca <__sflush_r+0x1a>
 80045d6:	2300      	movs	r3, #0
 80045d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80045dc:	682f      	ldr	r7, [r5, #0]
 80045de:	602b      	str	r3, [r5, #0]
 80045e0:	d032      	beq.n	8004648 <__sflush_r+0x98>
 80045e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80045e4:	89a3      	ldrh	r3, [r4, #12]
 80045e6:	075a      	lsls	r2, r3, #29
 80045e8:	d505      	bpl.n	80045f6 <__sflush_r+0x46>
 80045ea:	6863      	ldr	r3, [r4, #4]
 80045ec:	1ac0      	subs	r0, r0, r3
 80045ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045f0:	b10b      	cbz	r3, 80045f6 <__sflush_r+0x46>
 80045f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045f4:	1ac0      	subs	r0, r0, r3
 80045f6:	2300      	movs	r3, #0
 80045f8:	4602      	mov	r2, r0
 80045fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045fc:	4628      	mov	r0, r5
 80045fe:	6a21      	ldr	r1, [r4, #32]
 8004600:	47b0      	blx	r6
 8004602:	1c43      	adds	r3, r0, #1
 8004604:	89a3      	ldrh	r3, [r4, #12]
 8004606:	d106      	bne.n	8004616 <__sflush_r+0x66>
 8004608:	6829      	ldr	r1, [r5, #0]
 800460a:	291d      	cmp	r1, #29
 800460c:	d82c      	bhi.n	8004668 <__sflush_r+0xb8>
 800460e:	4a2a      	ldr	r2, [pc, #168]	; (80046b8 <__sflush_r+0x108>)
 8004610:	40ca      	lsrs	r2, r1
 8004612:	07d6      	lsls	r6, r2, #31
 8004614:	d528      	bpl.n	8004668 <__sflush_r+0xb8>
 8004616:	2200      	movs	r2, #0
 8004618:	6062      	str	r2, [r4, #4]
 800461a:	6922      	ldr	r2, [r4, #16]
 800461c:	04d9      	lsls	r1, r3, #19
 800461e:	6022      	str	r2, [r4, #0]
 8004620:	d504      	bpl.n	800462c <__sflush_r+0x7c>
 8004622:	1c42      	adds	r2, r0, #1
 8004624:	d101      	bne.n	800462a <__sflush_r+0x7a>
 8004626:	682b      	ldr	r3, [r5, #0]
 8004628:	b903      	cbnz	r3, 800462c <__sflush_r+0x7c>
 800462a:	6560      	str	r0, [r4, #84]	; 0x54
 800462c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800462e:	602f      	str	r7, [r5, #0]
 8004630:	2900      	cmp	r1, #0
 8004632:	d0ca      	beq.n	80045ca <__sflush_r+0x1a>
 8004634:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004638:	4299      	cmp	r1, r3
 800463a:	d002      	beq.n	8004642 <__sflush_r+0x92>
 800463c:	4628      	mov	r0, r5
 800463e:	f000 f9d5 	bl	80049ec <_free_r>
 8004642:	2000      	movs	r0, #0
 8004644:	6360      	str	r0, [r4, #52]	; 0x34
 8004646:	e7c1      	b.n	80045cc <__sflush_r+0x1c>
 8004648:	6a21      	ldr	r1, [r4, #32]
 800464a:	2301      	movs	r3, #1
 800464c:	4628      	mov	r0, r5
 800464e:	47b0      	blx	r6
 8004650:	1c41      	adds	r1, r0, #1
 8004652:	d1c7      	bne.n	80045e4 <__sflush_r+0x34>
 8004654:	682b      	ldr	r3, [r5, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0c4      	beq.n	80045e4 <__sflush_r+0x34>
 800465a:	2b1d      	cmp	r3, #29
 800465c:	d001      	beq.n	8004662 <__sflush_r+0xb2>
 800465e:	2b16      	cmp	r3, #22
 8004660:	d101      	bne.n	8004666 <__sflush_r+0xb6>
 8004662:	602f      	str	r7, [r5, #0]
 8004664:	e7b1      	b.n	80045ca <__sflush_r+0x1a>
 8004666:	89a3      	ldrh	r3, [r4, #12]
 8004668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800466c:	81a3      	strh	r3, [r4, #12]
 800466e:	e7ad      	b.n	80045cc <__sflush_r+0x1c>
 8004670:	690f      	ldr	r7, [r1, #16]
 8004672:	2f00      	cmp	r7, #0
 8004674:	d0a9      	beq.n	80045ca <__sflush_r+0x1a>
 8004676:	0793      	lsls	r3, r2, #30
 8004678:	bf18      	it	ne
 800467a:	2300      	movne	r3, #0
 800467c:	680e      	ldr	r6, [r1, #0]
 800467e:	bf08      	it	eq
 8004680:	694b      	ldreq	r3, [r1, #20]
 8004682:	eba6 0807 	sub.w	r8, r6, r7
 8004686:	600f      	str	r7, [r1, #0]
 8004688:	608b      	str	r3, [r1, #8]
 800468a:	f1b8 0f00 	cmp.w	r8, #0
 800468e:	dd9c      	ble.n	80045ca <__sflush_r+0x1a>
 8004690:	4643      	mov	r3, r8
 8004692:	463a      	mov	r2, r7
 8004694:	4628      	mov	r0, r5
 8004696:	6a21      	ldr	r1, [r4, #32]
 8004698:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800469a:	47b0      	blx	r6
 800469c:	2800      	cmp	r0, #0
 800469e:	dc06      	bgt.n	80046ae <__sflush_r+0xfe>
 80046a0:	89a3      	ldrh	r3, [r4, #12]
 80046a2:	f04f 30ff 	mov.w	r0, #4294967295
 80046a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046aa:	81a3      	strh	r3, [r4, #12]
 80046ac:	e78e      	b.n	80045cc <__sflush_r+0x1c>
 80046ae:	4407      	add	r7, r0
 80046b0:	eba8 0800 	sub.w	r8, r8, r0
 80046b4:	e7e9      	b.n	800468a <__sflush_r+0xda>
 80046b6:	bf00      	nop
 80046b8:	20400001 	.word	0x20400001

080046bc <_fflush_r>:
 80046bc:	b538      	push	{r3, r4, r5, lr}
 80046be:	690b      	ldr	r3, [r1, #16]
 80046c0:	4605      	mov	r5, r0
 80046c2:	460c      	mov	r4, r1
 80046c4:	b913      	cbnz	r3, 80046cc <_fflush_r+0x10>
 80046c6:	2500      	movs	r5, #0
 80046c8:	4628      	mov	r0, r5
 80046ca:	bd38      	pop	{r3, r4, r5, pc}
 80046cc:	b118      	cbz	r0, 80046d6 <_fflush_r+0x1a>
 80046ce:	6983      	ldr	r3, [r0, #24]
 80046d0:	b90b      	cbnz	r3, 80046d6 <_fflush_r+0x1a>
 80046d2:	f000 f887 	bl	80047e4 <__sinit>
 80046d6:	4b14      	ldr	r3, [pc, #80]	; (8004728 <_fflush_r+0x6c>)
 80046d8:	429c      	cmp	r4, r3
 80046da:	d11b      	bne.n	8004714 <_fflush_r+0x58>
 80046dc:	686c      	ldr	r4, [r5, #4]
 80046de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0ef      	beq.n	80046c6 <_fflush_r+0xa>
 80046e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80046e8:	07d0      	lsls	r0, r2, #31
 80046ea:	d404      	bmi.n	80046f6 <_fflush_r+0x3a>
 80046ec:	0599      	lsls	r1, r3, #22
 80046ee:	d402      	bmi.n	80046f6 <_fflush_r+0x3a>
 80046f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046f2:	f000 f915 	bl	8004920 <__retarget_lock_acquire_recursive>
 80046f6:	4628      	mov	r0, r5
 80046f8:	4621      	mov	r1, r4
 80046fa:	f7ff ff59 	bl	80045b0 <__sflush_r>
 80046fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004700:	4605      	mov	r5, r0
 8004702:	07da      	lsls	r2, r3, #31
 8004704:	d4e0      	bmi.n	80046c8 <_fflush_r+0xc>
 8004706:	89a3      	ldrh	r3, [r4, #12]
 8004708:	059b      	lsls	r3, r3, #22
 800470a:	d4dd      	bmi.n	80046c8 <_fflush_r+0xc>
 800470c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800470e:	f000 f908 	bl	8004922 <__retarget_lock_release_recursive>
 8004712:	e7d9      	b.n	80046c8 <_fflush_r+0xc>
 8004714:	4b05      	ldr	r3, [pc, #20]	; (800472c <_fflush_r+0x70>)
 8004716:	429c      	cmp	r4, r3
 8004718:	d101      	bne.n	800471e <_fflush_r+0x62>
 800471a:	68ac      	ldr	r4, [r5, #8]
 800471c:	e7df      	b.n	80046de <_fflush_r+0x22>
 800471e:	4b04      	ldr	r3, [pc, #16]	; (8004730 <_fflush_r+0x74>)
 8004720:	429c      	cmp	r4, r3
 8004722:	bf08      	it	eq
 8004724:	68ec      	ldreq	r4, [r5, #12]
 8004726:	e7da      	b.n	80046de <_fflush_r+0x22>
 8004728:	0800537c 	.word	0x0800537c
 800472c:	0800539c 	.word	0x0800539c
 8004730:	0800535c 	.word	0x0800535c

08004734 <std>:
 8004734:	2300      	movs	r3, #0
 8004736:	b510      	push	{r4, lr}
 8004738:	4604      	mov	r4, r0
 800473a:	e9c0 3300 	strd	r3, r3, [r0]
 800473e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004742:	6083      	str	r3, [r0, #8]
 8004744:	8181      	strh	r1, [r0, #12]
 8004746:	6643      	str	r3, [r0, #100]	; 0x64
 8004748:	81c2      	strh	r2, [r0, #14]
 800474a:	6183      	str	r3, [r0, #24]
 800474c:	4619      	mov	r1, r3
 800474e:	2208      	movs	r2, #8
 8004750:	305c      	adds	r0, #92	; 0x5c
 8004752:	f7ff fdd7 	bl	8004304 <memset>
 8004756:	4b05      	ldr	r3, [pc, #20]	; (800476c <std+0x38>)
 8004758:	6224      	str	r4, [r4, #32]
 800475a:	6263      	str	r3, [r4, #36]	; 0x24
 800475c:	4b04      	ldr	r3, [pc, #16]	; (8004770 <std+0x3c>)
 800475e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004760:	4b04      	ldr	r3, [pc, #16]	; (8004774 <std+0x40>)
 8004762:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004764:	4b04      	ldr	r3, [pc, #16]	; (8004778 <std+0x44>)
 8004766:	6323      	str	r3, [r4, #48]	; 0x30
 8004768:	bd10      	pop	{r4, pc}
 800476a:	bf00      	nop
 800476c:	08005135 	.word	0x08005135
 8004770:	08005157 	.word	0x08005157
 8004774:	0800518f 	.word	0x0800518f
 8004778:	080051b3 	.word	0x080051b3

0800477c <_cleanup_r>:
 800477c:	4901      	ldr	r1, [pc, #4]	; (8004784 <_cleanup_r+0x8>)
 800477e:	f000 b8af 	b.w	80048e0 <_fwalk_reent>
 8004782:	bf00      	nop
 8004784:	080046bd 	.word	0x080046bd

08004788 <__sfmoreglue>:
 8004788:	b570      	push	{r4, r5, r6, lr}
 800478a:	2568      	movs	r5, #104	; 0x68
 800478c:	1e4a      	subs	r2, r1, #1
 800478e:	4355      	muls	r5, r2
 8004790:	460e      	mov	r6, r1
 8004792:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004796:	f000 f975 	bl	8004a84 <_malloc_r>
 800479a:	4604      	mov	r4, r0
 800479c:	b140      	cbz	r0, 80047b0 <__sfmoreglue+0x28>
 800479e:	2100      	movs	r1, #0
 80047a0:	e9c0 1600 	strd	r1, r6, [r0]
 80047a4:	300c      	adds	r0, #12
 80047a6:	60a0      	str	r0, [r4, #8]
 80047a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80047ac:	f7ff fdaa 	bl	8004304 <memset>
 80047b0:	4620      	mov	r0, r4
 80047b2:	bd70      	pop	{r4, r5, r6, pc}

080047b4 <__sfp_lock_acquire>:
 80047b4:	4801      	ldr	r0, [pc, #4]	; (80047bc <__sfp_lock_acquire+0x8>)
 80047b6:	f000 b8b3 	b.w	8004920 <__retarget_lock_acquire_recursive>
 80047ba:	bf00      	nop
 80047bc:	20000334 	.word	0x20000334

080047c0 <__sfp_lock_release>:
 80047c0:	4801      	ldr	r0, [pc, #4]	; (80047c8 <__sfp_lock_release+0x8>)
 80047c2:	f000 b8ae 	b.w	8004922 <__retarget_lock_release_recursive>
 80047c6:	bf00      	nop
 80047c8:	20000334 	.word	0x20000334

080047cc <__sinit_lock_acquire>:
 80047cc:	4801      	ldr	r0, [pc, #4]	; (80047d4 <__sinit_lock_acquire+0x8>)
 80047ce:	f000 b8a7 	b.w	8004920 <__retarget_lock_acquire_recursive>
 80047d2:	bf00      	nop
 80047d4:	2000032f 	.word	0x2000032f

080047d8 <__sinit_lock_release>:
 80047d8:	4801      	ldr	r0, [pc, #4]	; (80047e0 <__sinit_lock_release+0x8>)
 80047da:	f000 b8a2 	b.w	8004922 <__retarget_lock_release_recursive>
 80047de:	bf00      	nop
 80047e0:	2000032f 	.word	0x2000032f

080047e4 <__sinit>:
 80047e4:	b510      	push	{r4, lr}
 80047e6:	4604      	mov	r4, r0
 80047e8:	f7ff fff0 	bl	80047cc <__sinit_lock_acquire>
 80047ec:	69a3      	ldr	r3, [r4, #24]
 80047ee:	b11b      	cbz	r3, 80047f8 <__sinit+0x14>
 80047f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047f4:	f7ff bff0 	b.w	80047d8 <__sinit_lock_release>
 80047f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80047fc:	6523      	str	r3, [r4, #80]	; 0x50
 80047fe:	4b13      	ldr	r3, [pc, #76]	; (800484c <__sinit+0x68>)
 8004800:	4a13      	ldr	r2, [pc, #76]	; (8004850 <__sinit+0x6c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	62a2      	str	r2, [r4, #40]	; 0x28
 8004806:	42a3      	cmp	r3, r4
 8004808:	bf08      	it	eq
 800480a:	2301      	moveq	r3, #1
 800480c:	4620      	mov	r0, r4
 800480e:	bf08      	it	eq
 8004810:	61a3      	streq	r3, [r4, #24]
 8004812:	f000 f81f 	bl	8004854 <__sfp>
 8004816:	6060      	str	r0, [r4, #4]
 8004818:	4620      	mov	r0, r4
 800481a:	f000 f81b 	bl	8004854 <__sfp>
 800481e:	60a0      	str	r0, [r4, #8]
 8004820:	4620      	mov	r0, r4
 8004822:	f000 f817 	bl	8004854 <__sfp>
 8004826:	2200      	movs	r2, #0
 8004828:	2104      	movs	r1, #4
 800482a:	60e0      	str	r0, [r4, #12]
 800482c:	6860      	ldr	r0, [r4, #4]
 800482e:	f7ff ff81 	bl	8004734 <std>
 8004832:	2201      	movs	r2, #1
 8004834:	2109      	movs	r1, #9
 8004836:	68a0      	ldr	r0, [r4, #8]
 8004838:	f7ff ff7c 	bl	8004734 <std>
 800483c:	2202      	movs	r2, #2
 800483e:	2112      	movs	r1, #18
 8004840:	68e0      	ldr	r0, [r4, #12]
 8004842:	f7ff ff77 	bl	8004734 <std>
 8004846:	2301      	movs	r3, #1
 8004848:	61a3      	str	r3, [r4, #24]
 800484a:	e7d1      	b.n	80047f0 <__sinit+0xc>
 800484c:	08005358 	.word	0x08005358
 8004850:	0800477d 	.word	0x0800477d

08004854 <__sfp>:
 8004854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004856:	4607      	mov	r7, r0
 8004858:	f7ff ffac 	bl	80047b4 <__sfp_lock_acquire>
 800485c:	4b1e      	ldr	r3, [pc, #120]	; (80048d8 <__sfp+0x84>)
 800485e:	681e      	ldr	r6, [r3, #0]
 8004860:	69b3      	ldr	r3, [r6, #24]
 8004862:	b913      	cbnz	r3, 800486a <__sfp+0x16>
 8004864:	4630      	mov	r0, r6
 8004866:	f7ff ffbd 	bl	80047e4 <__sinit>
 800486a:	3648      	adds	r6, #72	; 0x48
 800486c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004870:	3b01      	subs	r3, #1
 8004872:	d503      	bpl.n	800487c <__sfp+0x28>
 8004874:	6833      	ldr	r3, [r6, #0]
 8004876:	b30b      	cbz	r3, 80048bc <__sfp+0x68>
 8004878:	6836      	ldr	r6, [r6, #0]
 800487a:	e7f7      	b.n	800486c <__sfp+0x18>
 800487c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004880:	b9d5      	cbnz	r5, 80048b8 <__sfp+0x64>
 8004882:	4b16      	ldr	r3, [pc, #88]	; (80048dc <__sfp+0x88>)
 8004884:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004888:	60e3      	str	r3, [r4, #12]
 800488a:	6665      	str	r5, [r4, #100]	; 0x64
 800488c:	f000 f847 	bl	800491e <__retarget_lock_init_recursive>
 8004890:	f7ff ff96 	bl	80047c0 <__sfp_lock_release>
 8004894:	2208      	movs	r2, #8
 8004896:	4629      	mov	r1, r5
 8004898:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800489c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80048a0:	6025      	str	r5, [r4, #0]
 80048a2:	61a5      	str	r5, [r4, #24]
 80048a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80048a8:	f7ff fd2c 	bl	8004304 <memset>
 80048ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80048b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80048b4:	4620      	mov	r0, r4
 80048b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048b8:	3468      	adds	r4, #104	; 0x68
 80048ba:	e7d9      	b.n	8004870 <__sfp+0x1c>
 80048bc:	2104      	movs	r1, #4
 80048be:	4638      	mov	r0, r7
 80048c0:	f7ff ff62 	bl	8004788 <__sfmoreglue>
 80048c4:	4604      	mov	r4, r0
 80048c6:	6030      	str	r0, [r6, #0]
 80048c8:	2800      	cmp	r0, #0
 80048ca:	d1d5      	bne.n	8004878 <__sfp+0x24>
 80048cc:	f7ff ff78 	bl	80047c0 <__sfp_lock_release>
 80048d0:	230c      	movs	r3, #12
 80048d2:	603b      	str	r3, [r7, #0]
 80048d4:	e7ee      	b.n	80048b4 <__sfp+0x60>
 80048d6:	bf00      	nop
 80048d8:	08005358 	.word	0x08005358
 80048dc:	ffff0001 	.word	0xffff0001

080048e0 <_fwalk_reent>:
 80048e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048e4:	4606      	mov	r6, r0
 80048e6:	4688      	mov	r8, r1
 80048e8:	2700      	movs	r7, #0
 80048ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80048ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048f2:	f1b9 0901 	subs.w	r9, r9, #1
 80048f6:	d505      	bpl.n	8004904 <_fwalk_reent+0x24>
 80048f8:	6824      	ldr	r4, [r4, #0]
 80048fa:	2c00      	cmp	r4, #0
 80048fc:	d1f7      	bne.n	80048ee <_fwalk_reent+0xe>
 80048fe:	4638      	mov	r0, r7
 8004900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004904:	89ab      	ldrh	r3, [r5, #12]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d907      	bls.n	800491a <_fwalk_reent+0x3a>
 800490a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800490e:	3301      	adds	r3, #1
 8004910:	d003      	beq.n	800491a <_fwalk_reent+0x3a>
 8004912:	4629      	mov	r1, r5
 8004914:	4630      	mov	r0, r6
 8004916:	47c0      	blx	r8
 8004918:	4307      	orrs	r7, r0
 800491a:	3568      	adds	r5, #104	; 0x68
 800491c:	e7e9      	b.n	80048f2 <_fwalk_reent+0x12>

0800491e <__retarget_lock_init_recursive>:
 800491e:	4770      	bx	lr

08004920 <__retarget_lock_acquire_recursive>:
 8004920:	4770      	bx	lr

08004922 <__retarget_lock_release_recursive>:
 8004922:	4770      	bx	lr

08004924 <__swhatbuf_r>:
 8004924:	b570      	push	{r4, r5, r6, lr}
 8004926:	460e      	mov	r6, r1
 8004928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800492c:	4614      	mov	r4, r2
 800492e:	2900      	cmp	r1, #0
 8004930:	461d      	mov	r5, r3
 8004932:	b096      	sub	sp, #88	; 0x58
 8004934:	da07      	bge.n	8004946 <__swhatbuf_r+0x22>
 8004936:	2300      	movs	r3, #0
 8004938:	602b      	str	r3, [r5, #0]
 800493a:	89b3      	ldrh	r3, [r6, #12]
 800493c:	061a      	lsls	r2, r3, #24
 800493e:	d410      	bmi.n	8004962 <__swhatbuf_r+0x3e>
 8004940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004944:	e00e      	b.n	8004964 <__swhatbuf_r+0x40>
 8004946:	466a      	mov	r2, sp
 8004948:	f000 fc5a 	bl	8005200 <_fstat_r>
 800494c:	2800      	cmp	r0, #0
 800494e:	dbf2      	blt.n	8004936 <__swhatbuf_r+0x12>
 8004950:	9a01      	ldr	r2, [sp, #4]
 8004952:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004956:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800495a:	425a      	negs	r2, r3
 800495c:	415a      	adcs	r2, r3
 800495e:	602a      	str	r2, [r5, #0]
 8004960:	e7ee      	b.n	8004940 <__swhatbuf_r+0x1c>
 8004962:	2340      	movs	r3, #64	; 0x40
 8004964:	2000      	movs	r0, #0
 8004966:	6023      	str	r3, [r4, #0]
 8004968:	b016      	add	sp, #88	; 0x58
 800496a:	bd70      	pop	{r4, r5, r6, pc}

0800496c <__smakebuf_r>:
 800496c:	898b      	ldrh	r3, [r1, #12]
 800496e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004970:	079d      	lsls	r5, r3, #30
 8004972:	4606      	mov	r6, r0
 8004974:	460c      	mov	r4, r1
 8004976:	d507      	bpl.n	8004988 <__smakebuf_r+0x1c>
 8004978:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800497c:	6023      	str	r3, [r4, #0]
 800497e:	6123      	str	r3, [r4, #16]
 8004980:	2301      	movs	r3, #1
 8004982:	6163      	str	r3, [r4, #20]
 8004984:	b002      	add	sp, #8
 8004986:	bd70      	pop	{r4, r5, r6, pc}
 8004988:	466a      	mov	r2, sp
 800498a:	ab01      	add	r3, sp, #4
 800498c:	f7ff ffca 	bl	8004924 <__swhatbuf_r>
 8004990:	9900      	ldr	r1, [sp, #0]
 8004992:	4605      	mov	r5, r0
 8004994:	4630      	mov	r0, r6
 8004996:	f000 f875 	bl	8004a84 <_malloc_r>
 800499a:	b948      	cbnz	r0, 80049b0 <__smakebuf_r+0x44>
 800499c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049a0:	059a      	lsls	r2, r3, #22
 80049a2:	d4ef      	bmi.n	8004984 <__smakebuf_r+0x18>
 80049a4:	f023 0303 	bic.w	r3, r3, #3
 80049a8:	f043 0302 	orr.w	r3, r3, #2
 80049ac:	81a3      	strh	r3, [r4, #12]
 80049ae:	e7e3      	b.n	8004978 <__smakebuf_r+0xc>
 80049b0:	4b0d      	ldr	r3, [pc, #52]	; (80049e8 <__smakebuf_r+0x7c>)
 80049b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80049b4:	89a3      	ldrh	r3, [r4, #12]
 80049b6:	6020      	str	r0, [r4, #0]
 80049b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049bc:	81a3      	strh	r3, [r4, #12]
 80049be:	9b00      	ldr	r3, [sp, #0]
 80049c0:	6120      	str	r0, [r4, #16]
 80049c2:	6163      	str	r3, [r4, #20]
 80049c4:	9b01      	ldr	r3, [sp, #4]
 80049c6:	b15b      	cbz	r3, 80049e0 <__smakebuf_r+0x74>
 80049c8:	4630      	mov	r0, r6
 80049ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049ce:	f000 fc29 	bl	8005224 <_isatty_r>
 80049d2:	b128      	cbz	r0, 80049e0 <__smakebuf_r+0x74>
 80049d4:	89a3      	ldrh	r3, [r4, #12]
 80049d6:	f023 0303 	bic.w	r3, r3, #3
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	81a3      	strh	r3, [r4, #12]
 80049e0:	89a0      	ldrh	r0, [r4, #12]
 80049e2:	4305      	orrs	r5, r0
 80049e4:	81a5      	strh	r5, [r4, #12]
 80049e6:	e7cd      	b.n	8004984 <__smakebuf_r+0x18>
 80049e8:	0800477d 	.word	0x0800477d

080049ec <_free_r>:
 80049ec:	b538      	push	{r3, r4, r5, lr}
 80049ee:	4605      	mov	r5, r0
 80049f0:	2900      	cmp	r1, #0
 80049f2:	d043      	beq.n	8004a7c <_free_r+0x90>
 80049f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049f8:	1f0c      	subs	r4, r1, #4
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	bfb8      	it	lt
 80049fe:	18e4      	addlt	r4, r4, r3
 8004a00:	f000 fc40 	bl	8005284 <__malloc_lock>
 8004a04:	4a1e      	ldr	r2, [pc, #120]	; (8004a80 <_free_r+0x94>)
 8004a06:	6813      	ldr	r3, [r2, #0]
 8004a08:	4610      	mov	r0, r2
 8004a0a:	b933      	cbnz	r3, 8004a1a <_free_r+0x2e>
 8004a0c:	6063      	str	r3, [r4, #4]
 8004a0e:	6014      	str	r4, [r2, #0]
 8004a10:	4628      	mov	r0, r5
 8004a12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a16:	f000 bc3b 	b.w	8005290 <__malloc_unlock>
 8004a1a:	42a3      	cmp	r3, r4
 8004a1c:	d90a      	bls.n	8004a34 <_free_r+0x48>
 8004a1e:	6821      	ldr	r1, [r4, #0]
 8004a20:	1862      	adds	r2, r4, r1
 8004a22:	4293      	cmp	r3, r2
 8004a24:	bf01      	itttt	eq
 8004a26:	681a      	ldreq	r2, [r3, #0]
 8004a28:	685b      	ldreq	r3, [r3, #4]
 8004a2a:	1852      	addeq	r2, r2, r1
 8004a2c:	6022      	streq	r2, [r4, #0]
 8004a2e:	6063      	str	r3, [r4, #4]
 8004a30:	6004      	str	r4, [r0, #0]
 8004a32:	e7ed      	b.n	8004a10 <_free_r+0x24>
 8004a34:	461a      	mov	r2, r3
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	b10b      	cbz	r3, 8004a3e <_free_r+0x52>
 8004a3a:	42a3      	cmp	r3, r4
 8004a3c:	d9fa      	bls.n	8004a34 <_free_r+0x48>
 8004a3e:	6811      	ldr	r1, [r2, #0]
 8004a40:	1850      	adds	r0, r2, r1
 8004a42:	42a0      	cmp	r0, r4
 8004a44:	d10b      	bne.n	8004a5e <_free_r+0x72>
 8004a46:	6820      	ldr	r0, [r4, #0]
 8004a48:	4401      	add	r1, r0
 8004a4a:	1850      	adds	r0, r2, r1
 8004a4c:	4283      	cmp	r3, r0
 8004a4e:	6011      	str	r1, [r2, #0]
 8004a50:	d1de      	bne.n	8004a10 <_free_r+0x24>
 8004a52:	6818      	ldr	r0, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	4401      	add	r1, r0
 8004a58:	6011      	str	r1, [r2, #0]
 8004a5a:	6053      	str	r3, [r2, #4]
 8004a5c:	e7d8      	b.n	8004a10 <_free_r+0x24>
 8004a5e:	d902      	bls.n	8004a66 <_free_r+0x7a>
 8004a60:	230c      	movs	r3, #12
 8004a62:	602b      	str	r3, [r5, #0]
 8004a64:	e7d4      	b.n	8004a10 <_free_r+0x24>
 8004a66:	6820      	ldr	r0, [r4, #0]
 8004a68:	1821      	adds	r1, r4, r0
 8004a6a:	428b      	cmp	r3, r1
 8004a6c:	bf01      	itttt	eq
 8004a6e:	6819      	ldreq	r1, [r3, #0]
 8004a70:	685b      	ldreq	r3, [r3, #4]
 8004a72:	1809      	addeq	r1, r1, r0
 8004a74:	6021      	streq	r1, [r4, #0]
 8004a76:	6063      	str	r3, [r4, #4]
 8004a78:	6054      	str	r4, [r2, #4]
 8004a7a:	e7c9      	b.n	8004a10 <_free_r+0x24>
 8004a7c:	bd38      	pop	{r3, r4, r5, pc}
 8004a7e:	bf00      	nop
 8004a80:	20000094 	.word	0x20000094

08004a84 <_malloc_r>:
 8004a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a86:	1ccd      	adds	r5, r1, #3
 8004a88:	f025 0503 	bic.w	r5, r5, #3
 8004a8c:	3508      	adds	r5, #8
 8004a8e:	2d0c      	cmp	r5, #12
 8004a90:	bf38      	it	cc
 8004a92:	250c      	movcc	r5, #12
 8004a94:	2d00      	cmp	r5, #0
 8004a96:	4606      	mov	r6, r0
 8004a98:	db01      	blt.n	8004a9e <_malloc_r+0x1a>
 8004a9a:	42a9      	cmp	r1, r5
 8004a9c:	d903      	bls.n	8004aa6 <_malloc_r+0x22>
 8004a9e:	230c      	movs	r3, #12
 8004aa0:	6033      	str	r3, [r6, #0]
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aa6:	f000 fbed 	bl	8005284 <__malloc_lock>
 8004aaa:	4921      	ldr	r1, [pc, #132]	; (8004b30 <_malloc_r+0xac>)
 8004aac:	680a      	ldr	r2, [r1, #0]
 8004aae:	4614      	mov	r4, r2
 8004ab0:	b99c      	cbnz	r4, 8004ada <_malloc_r+0x56>
 8004ab2:	4f20      	ldr	r7, [pc, #128]	; (8004b34 <_malloc_r+0xb0>)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	b923      	cbnz	r3, 8004ac2 <_malloc_r+0x3e>
 8004ab8:	4621      	mov	r1, r4
 8004aba:	4630      	mov	r0, r6
 8004abc:	f000 fb2a 	bl	8005114 <_sbrk_r>
 8004ac0:	6038      	str	r0, [r7, #0]
 8004ac2:	4629      	mov	r1, r5
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	f000 fb25 	bl	8005114 <_sbrk_r>
 8004aca:	1c43      	adds	r3, r0, #1
 8004acc:	d123      	bne.n	8004b16 <_malloc_r+0x92>
 8004ace:	230c      	movs	r3, #12
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	6033      	str	r3, [r6, #0]
 8004ad4:	f000 fbdc 	bl	8005290 <__malloc_unlock>
 8004ad8:	e7e3      	b.n	8004aa2 <_malloc_r+0x1e>
 8004ada:	6823      	ldr	r3, [r4, #0]
 8004adc:	1b5b      	subs	r3, r3, r5
 8004ade:	d417      	bmi.n	8004b10 <_malloc_r+0x8c>
 8004ae0:	2b0b      	cmp	r3, #11
 8004ae2:	d903      	bls.n	8004aec <_malloc_r+0x68>
 8004ae4:	6023      	str	r3, [r4, #0]
 8004ae6:	441c      	add	r4, r3
 8004ae8:	6025      	str	r5, [r4, #0]
 8004aea:	e004      	b.n	8004af6 <_malloc_r+0x72>
 8004aec:	6863      	ldr	r3, [r4, #4]
 8004aee:	42a2      	cmp	r2, r4
 8004af0:	bf0c      	ite	eq
 8004af2:	600b      	streq	r3, [r1, #0]
 8004af4:	6053      	strne	r3, [r2, #4]
 8004af6:	4630      	mov	r0, r6
 8004af8:	f000 fbca 	bl	8005290 <__malloc_unlock>
 8004afc:	f104 000b 	add.w	r0, r4, #11
 8004b00:	1d23      	adds	r3, r4, #4
 8004b02:	f020 0007 	bic.w	r0, r0, #7
 8004b06:	1ac2      	subs	r2, r0, r3
 8004b08:	d0cc      	beq.n	8004aa4 <_malloc_r+0x20>
 8004b0a:	1a1b      	subs	r3, r3, r0
 8004b0c:	50a3      	str	r3, [r4, r2]
 8004b0e:	e7c9      	b.n	8004aa4 <_malloc_r+0x20>
 8004b10:	4622      	mov	r2, r4
 8004b12:	6864      	ldr	r4, [r4, #4]
 8004b14:	e7cc      	b.n	8004ab0 <_malloc_r+0x2c>
 8004b16:	1cc4      	adds	r4, r0, #3
 8004b18:	f024 0403 	bic.w	r4, r4, #3
 8004b1c:	42a0      	cmp	r0, r4
 8004b1e:	d0e3      	beq.n	8004ae8 <_malloc_r+0x64>
 8004b20:	1a21      	subs	r1, r4, r0
 8004b22:	4630      	mov	r0, r6
 8004b24:	f000 faf6 	bl	8005114 <_sbrk_r>
 8004b28:	3001      	adds	r0, #1
 8004b2a:	d1dd      	bne.n	8004ae8 <_malloc_r+0x64>
 8004b2c:	e7cf      	b.n	8004ace <_malloc_r+0x4a>
 8004b2e:	bf00      	nop
 8004b30:	20000094 	.word	0x20000094
 8004b34:	20000098 	.word	0x20000098

08004b38 <__sfputc_r>:
 8004b38:	6893      	ldr	r3, [r2, #8]
 8004b3a:	b410      	push	{r4}
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	6093      	str	r3, [r2, #8]
 8004b42:	da07      	bge.n	8004b54 <__sfputc_r+0x1c>
 8004b44:	6994      	ldr	r4, [r2, #24]
 8004b46:	42a3      	cmp	r3, r4
 8004b48:	db01      	blt.n	8004b4e <__sfputc_r+0x16>
 8004b4a:	290a      	cmp	r1, #10
 8004b4c:	d102      	bne.n	8004b54 <__sfputc_r+0x1c>
 8004b4e:	bc10      	pop	{r4}
 8004b50:	f7ff bc6e 	b.w	8004430 <__swbuf_r>
 8004b54:	6813      	ldr	r3, [r2, #0]
 8004b56:	1c58      	adds	r0, r3, #1
 8004b58:	6010      	str	r0, [r2, #0]
 8004b5a:	7019      	strb	r1, [r3, #0]
 8004b5c:	4608      	mov	r0, r1
 8004b5e:	bc10      	pop	{r4}
 8004b60:	4770      	bx	lr

08004b62 <__sfputs_r>:
 8004b62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b64:	4606      	mov	r6, r0
 8004b66:	460f      	mov	r7, r1
 8004b68:	4614      	mov	r4, r2
 8004b6a:	18d5      	adds	r5, r2, r3
 8004b6c:	42ac      	cmp	r4, r5
 8004b6e:	d101      	bne.n	8004b74 <__sfputs_r+0x12>
 8004b70:	2000      	movs	r0, #0
 8004b72:	e007      	b.n	8004b84 <__sfputs_r+0x22>
 8004b74:	463a      	mov	r2, r7
 8004b76:	4630      	mov	r0, r6
 8004b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b7c:	f7ff ffdc 	bl	8004b38 <__sfputc_r>
 8004b80:	1c43      	adds	r3, r0, #1
 8004b82:	d1f3      	bne.n	8004b6c <__sfputs_r+0xa>
 8004b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b88 <_vfiprintf_r>:
 8004b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b8c:	460d      	mov	r5, r1
 8004b8e:	4614      	mov	r4, r2
 8004b90:	4698      	mov	r8, r3
 8004b92:	4606      	mov	r6, r0
 8004b94:	b09d      	sub	sp, #116	; 0x74
 8004b96:	b118      	cbz	r0, 8004ba0 <_vfiprintf_r+0x18>
 8004b98:	6983      	ldr	r3, [r0, #24]
 8004b9a:	b90b      	cbnz	r3, 8004ba0 <_vfiprintf_r+0x18>
 8004b9c:	f7ff fe22 	bl	80047e4 <__sinit>
 8004ba0:	4b89      	ldr	r3, [pc, #548]	; (8004dc8 <_vfiprintf_r+0x240>)
 8004ba2:	429d      	cmp	r5, r3
 8004ba4:	d11b      	bne.n	8004bde <_vfiprintf_r+0x56>
 8004ba6:	6875      	ldr	r5, [r6, #4]
 8004ba8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004baa:	07d9      	lsls	r1, r3, #31
 8004bac:	d405      	bmi.n	8004bba <_vfiprintf_r+0x32>
 8004bae:	89ab      	ldrh	r3, [r5, #12]
 8004bb0:	059a      	lsls	r2, r3, #22
 8004bb2:	d402      	bmi.n	8004bba <_vfiprintf_r+0x32>
 8004bb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004bb6:	f7ff feb3 	bl	8004920 <__retarget_lock_acquire_recursive>
 8004bba:	89ab      	ldrh	r3, [r5, #12]
 8004bbc:	071b      	lsls	r3, r3, #28
 8004bbe:	d501      	bpl.n	8004bc4 <_vfiprintf_r+0x3c>
 8004bc0:	692b      	ldr	r3, [r5, #16]
 8004bc2:	b9eb      	cbnz	r3, 8004c00 <_vfiprintf_r+0x78>
 8004bc4:	4629      	mov	r1, r5
 8004bc6:	4630      	mov	r0, r6
 8004bc8:	f7ff fc84 	bl	80044d4 <__swsetup_r>
 8004bcc:	b1c0      	cbz	r0, 8004c00 <_vfiprintf_r+0x78>
 8004bce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bd0:	07dc      	lsls	r4, r3, #31
 8004bd2:	d50e      	bpl.n	8004bf2 <_vfiprintf_r+0x6a>
 8004bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd8:	b01d      	add	sp, #116	; 0x74
 8004bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bde:	4b7b      	ldr	r3, [pc, #492]	; (8004dcc <_vfiprintf_r+0x244>)
 8004be0:	429d      	cmp	r5, r3
 8004be2:	d101      	bne.n	8004be8 <_vfiprintf_r+0x60>
 8004be4:	68b5      	ldr	r5, [r6, #8]
 8004be6:	e7df      	b.n	8004ba8 <_vfiprintf_r+0x20>
 8004be8:	4b79      	ldr	r3, [pc, #484]	; (8004dd0 <_vfiprintf_r+0x248>)
 8004bea:	429d      	cmp	r5, r3
 8004bec:	bf08      	it	eq
 8004bee:	68f5      	ldreq	r5, [r6, #12]
 8004bf0:	e7da      	b.n	8004ba8 <_vfiprintf_r+0x20>
 8004bf2:	89ab      	ldrh	r3, [r5, #12]
 8004bf4:	0598      	lsls	r0, r3, #22
 8004bf6:	d4ed      	bmi.n	8004bd4 <_vfiprintf_r+0x4c>
 8004bf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004bfa:	f7ff fe92 	bl	8004922 <__retarget_lock_release_recursive>
 8004bfe:	e7e9      	b.n	8004bd4 <_vfiprintf_r+0x4c>
 8004c00:	2300      	movs	r3, #0
 8004c02:	9309      	str	r3, [sp, #36]	; 0x24
 8004c04:	2320      	movs	r3, #32
 8004c06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c0a:	2330      	movs	r3, #48	; 0x30
 8004c0c:	f04f 0901 	mov.w	r9, #1
 8004c10:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c14:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004dd4 <_vfiprintf_r+0x24c>
 8004c18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c1c:	4623      	mov	r3, r4
 8004c1e:	469a      	mov	sl, r3
 8004c20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c24:	b10a      	cbz	r2, 8004c2a <_vfiprintf_r+0xa2>
 8004c26:	2a25      	cmp	r2, #37	; 0x25
 8004c28:	d1f9      	bne.n	8004c1e <_vfiprintf_r+0x96>
 8004c2a:	ebba 0b04 	subs.w	fp, sl, r4
 8004c2e:	d00b      	beq.n	8004c48 <_vfiprintf_r+0xc0>
 8004c30:	465b      	mov	r3, fp
 8004c32:	4622      	mov	r2, r4
 8004c34:	4629      	mov	r1, r5
 8004c36:	4630      	mov	r0, r6
 8004c38:	f7ff ff93 	bl	8004b62 <__sfputs_r>
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	f000 80aa 	beq.w	8004d96 <_vfiprintf_r+0x20e>
 8004c42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c44:	445a      	add	r2, fp
 8004c46:	9209      	str	r2, [sp, #36]	; 0x24
 8004c48:	f89a 3000 	ldrb.w	r3, [sl]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 80a2 	beq.w	8004d96 <_vfiprintf_r+0x20e>
 8004c52:	2300      	movs	r3, #0
 8004c54:	f04f 32ff 	mov.w	r2, #4294967295
 8004c58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c5c:	f10a 0a01 	add.w	sl, sl, #1
 8004c60:	9304      	str	r3, [sp, #16]
 8004c62:	9307      	str	r3, [sp, #28]
 8004c64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c68:	931a      	str	r3, [sp, #104]	; 0x68
 8004c6a:	4654      	mov	r4, sl
 8004c6c:	2205      	movs	r2, #5
 8004c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c72:	4858      	ldr	r0, [pc, #352]	; (8004dd4 <_vfiprintf_r+0x24c>)
 8004c74:	f000 faf8 	bl	8005268 <memchr>
 8004c78:	9a04      	ldr	r2, [sp, #16]
 8004c7a:	b9d8      	cbnz	r0, 8004cb4 <_vfiprintf_r+0x12c>
 8004c7c:	06d1      	lsls	r1, r2, #27
 8004c7e:	bf44      	itt	mi
 8004c80:	2320      	movmi	r3, #32
 8004c82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c86:	0713      	lsls	r3, r2, #28
 8004c88:	bf44      	itt	mi
 8004c8a:	232b      	movmi	r3, #43	; 0x2b
 8004c8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c90:	f89a 3000 	ldrb.w	r3, [sl]
 8004c94:	2b2a      	cmp	r3, #42	; 0x2a
 8004c96:	d015      	beq.n	8004cc4 <_vfiprintf_r+0x13c>
 8004c98:	4654      	mov	r4, sl
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	f04f 0c0a 	mov.w	ip, #10
 8004ca0:	9a07      	ldr	r2, [sp, #28]
 8004ca2:	4621      	mov	r1, r4
 8004ca4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ca8:	3b30      	subs	r3, #48	; 0x30
 8004caa:	2b09      	cmp	r3, #9
 8004cac:	d94e      	bls.n	8004d4c <_vfiprintf_r+0x1c4>
 8004cae:	b1b0      	cbz	r0, 8004cde <_vfiprintf_r+0x156>
 8004cb0:	9207      	str	r2, [sp, #28]
 8004cb2:	e014      	b.n	8004cde <_vfiprintf_r+0x156>
 8004cb4:	eba0 0308 	sub.w	r3, r0, r8
 8004cb8:	fa09 f303 	lsl.w	r3, r9, r3
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	46a2      	mov	sl, r4
 8004cc0:	9304      	str	r3, [sp, #16]
 8004cc2:	e7d2      	b.n	8004c6a <_vfiprintf_r+0xe2>
 8004cc4:	9b03      	ldr	r3, [sp, #12]
 8004cc6:	1d19      	adds	r1, r3, #4
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	9103      	str	r1, [sp, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	bfbb      	ittet	lt
 8004cd0:	425b      	neglt	r3, r3
 8004cd2:	f042 0202 	orrlt.w	r2, r2, #2
 8004cd6:	9307      	strge	r3, [sp, #28]
 8004cd8:	9307      	strlt	r3, [sp, #28]
 8004cda:	bfb8      	it	lt
 8004cdc:	9204      	strlt	r2, [sp, #16]
 8004cde:	7823      	ldrb	r3, [r4, #0]
 8004ce0:	2b2e      	cmp	r3, #46	; 0x2e
 8004ce2:	d10c      	bne.n	8004cfe <_vfiprintf_r+0x176>
 8004ce4:	7863      	ldrb	r3, [r4, #1]
 8004ce6:	2b2a      	cmp	r3, #42	; 0x2a
 8004ce8:	d135      	bne.n	8004d56 <_vfiprintf_r+0x1ce>
 8004cea:	9b03      	ldr	r3, [sp, #12]
 8004cec:	3402      	adds	r4, #2
 8004cee:	1d1a      	adds	r2, r3, #4
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	9203      	str	r2, [sp, #12]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	bfb8      	it	lt
 8004cf8:	f04f 33ff 	movlt.w	r3, #4294967295
 8004cfc:	9305      	str	r3, [sp, #20]
 8004cfe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004de4 <_vfiprintf_r+0x25c>
 8004d02:	2203      	movs	r2, #3
 8004d04:	4650      	mov	r0, sl
 8004d06:	7821      	ldrb	r1, [r4, #0]
 8004d08:	f000 faae 	bl	8005268 <memchr>
 8004d0c:	b140      	cbz	r0, 8004d20 <_vfiprintf_r+0x198>
 8004d0e:	2340      	movs	r3, #64	; 0x40
 8004d10:	eba0 000a 	sub.w	r0, r0, sl
 8004d14:	fa03 f000 	lsl.w	r0, r3, r0
 8004d18:	9b04      	ldr	r3, [sp, #16]
 8004d1a:	3401      	adds	r4, #1
 8004d1c:	4303      	orrs	r3, r0
 8004d1e:	9304      	str	r3, [sp, #16]
 8004d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d24:	2206      	movs	r2, #6
 8004d26:	482c      	ldr	r0, [pc, #176]	; (8004dd8 <_vfiprintf_r+0x250>)
 8004d28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d2c:	f000 fa9c 	bl	8005268 <memchr>
 8004d30:	2800      	cmp	r0, #0
 8004d32:	d03f      	beq.n	8004db4 <_vfiprintf_r+0x22c>
 8004d34:	4b29      	ldr	r3, [pc, #164]	; (8004ddc <_vfiprintf_r+0x254>)
 8004d36:	bb1b      	cbnz	r3, 8004d80 <_vfiprintf_r+0x1f8>
 8004d38:	9b03      	ldr	r3, [sp, #12]
 8004d3a:	3307      	adds	r3, #7
 8004d3c:	f023 0307 	bic.w	r3, r3, #7
 8004d40:	3308      	adds	r3, #8
 8004d42:	9303      	str	r3, [sp, #12]
 8004d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d46:	443b      	add	r3, r7
 8004d48:	9309      	str	r3, [sp, #36]	; 0x24
 8004d4a:	e767      	b.n	8004c1c <_vfiprintf_r+0x94>
 8004d4c:	460c      	mov	r4, r1
 8004d4e:	2001      	movs	r0, #1
 8004d50:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d54:	e7a5      	b.n	8004ca2 <_vfiprintf_r+0x11a>
 8004d56:	2300      	movs	r3, #0
 8004d58:	f04f 0c0a 	mov.w	ip, #10
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	3401      	adds	r4, #1
 8004d60:	9305      	str	r3, [sp, #20]
 8004d62:	4620      	mov	r0, r4
 8004d64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d68:	3a30      	subs	r2, #48	; 0x30
 8004d6a:	2a09      	cmp	r2, #9
 8004d6c:	d903      	bls.n	8004d76 <_vfiprintf_r+0x1ee>
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0c5      	beq.n	8004cfe <_vfiprintf_r+0x176>
 8004d72:	9105      	str	r1, [sp, #20]
 8004d74:	e7c3      	b.n	8004cfe <_vfiprintf_r+0x176>
 8004d76:	4604      	mov	r4, r0
 8004d78:	2301      	movs	r3, #1
 8004d7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d7e:	e7f0      	b.n	8004d62 <_vfiprintf_r+0x1da>
 8004d80:	ab03      	add	r3, sp, #12
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	462a      	mov	r2, r5
 8004d86:	4630      	mov	r0, r6
 8004d88:	4b15      	ldr	r3, [pc, #84]	; (8004de0 <_vfiprintf_r+0x258>)
 8004d8a:	a904      	add	r1, sp, #16
 8004d8c:	f3af 8000 	nop.w
 8004d90:	4607      	mov	r7, r0
 8004d92:	1c78      	adds	r0, r7, #1
 8004d94:	d1d6      	bne.n	8004d44 <_vfiprintf_r+0x1bc>
 8004d96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d98:	07d9      	lsls	r1, r3, #31
 8004d9a:	d405      	bmi.n	8004da8 <_vfiprintf_r+0x220>
 8004d9c:	89ab      	ldrh	r3, [r5, #12]
 8004d9e:	059a      	lsls	r2, r3, #22
 8004da0:	d402      	bmi.n	8004da8 <_vfiprintf_r+0x220>
 8004da2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004da4:	f7ff fdbd 	bl	8004922 <__retarget_lock_release_recursive>
 8004da8:	89ab      	ldrh	r3, [r5, #12]
 8004daa:	065b      	lsls	r3, r3, #25
 8004dac:	f53f af12 	bmi.w	8004bd4 <_vfiprintf_r+0x4c>
 8004db0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004db2:	e711      	b.n	8004bd8 <_vfiprintf_r+0x50>
 8004db4:	ab03      	add	r3, sp, #12
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	462a      	mov	r2, r5
 8004dba:	4630      	mov	r0, r6
 8004dbc:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <_vfiprintf_r+0x258>)
 8004dbe:	a904      	add	r1, sp, #16
 8004dc0:	f000 f882 	bl	8004ec8 <_printf_i>
 8004dc4:	e7e4      	b.n	8004d90 <_vfiprintf_r+0x208>
 8004dc6:	bf00      	nop
 8004dc8:	0800537c 	.word	0x0800537c
 8004dcc:	0800539c 	.word	0x0800539c
 8004dd0:	0800535c 	.word	0x0800535c
 8004dd4:	080053bc 	.word	0x080053bc
 8004dd8:	080053c6 	.word	0x080053c6
 8004ddc:	00000000 	.word	0x00000000
 8004de0:	08004b63 	.word	0x08004b63
 8004de4:	080053c2 	.word	0x080053c2

08004de8 <_printf_common>:
 8004de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dec:	4616      	mov	r6, r2
 8004dee:	4699      	mov	r9, r3
 8004df0:	688a      	ldr	r2, [r1, #8]
 8004df2:	690b      	ldr	r3, [r1, #16]
 8004df4:	4607      	mov	r7, r0
 8004df6:	4293      	cmp	r3, r2
 8004df8:	bfb8      	it	lt
 8004dfa:	4613      	movlt	r3, r2
 8004dfc:	6033      	str	r3, [r6, #0]
 8004dfe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e02:	460c      	mov	r4, r1
 8004e04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e08:	b10a      	cbz	r2, 8004e0e <_printf_common+0x26>
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	6033      	str	r3, [r6, #0]
 8004e0e:	6823      	ldr	r3, [r4, #0]
 8004e10:	0699      	lsls	r1, r3, #26
 8004e12:	bf42      	ittt	mi
 8004e14:	6833      	ldrmi	r3, [r6, #0]
 8004e16:	3302      	addmi	r3, #2
 8004e18:	6033      	strmi	r3, [r6, #0]
 8004e1a:	6825      	ldr	r5, [r4, #0]
 8004e1c:	f015 0506 	ands.w	r5, r5, #6
 8004e20:	d106      	bne.n	8004e30 <_printf_common+0x48>
 8004e22:	f104 0a19 	add.w	sl, r4, #25
 8004e26:	68e3      	ldr	r3, [r4, #12]
 8004e28:	6832      	ldr	r2, [r6, #0]
 8004e2a:	1a9b      	subs	r3, r3, r2
 8004e2c:	42ab      	cmp	r3, r5
 8004e2e:	dc28      	bgt.n	8004e82 <_printf_common+0x9a>
 8004e30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e34:	1e13      	subs	r3, r2, #0
 8004e36:	6822      	ldr	r2, [r4, #0]
 8004e38:	bf18      	it	ne
 8004e3a:	2301      	movne	r3, #1
 8004e3c:	0692      	lsls	r2, r2, #26
 8004e3e:	d42d      	bmi.n	8004e9c <_printf_common+0xb4>
 8004e40:	4649      	mov	r1, r9
 8004e42:	4638      	mov	r0, r7
 8004e44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e48:	47c0      	blx	r8
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	d020      	beq.n	8004e90 <_printf_common+0xa8>
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	68e5      	ldr	r5, [r4, #12]
 8004e52:	f003 0306 	and.w	r3, r3, #6
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	bf18      	it	ne
 8004e5a:	2500      	movne	r5, #0
 8004e5c:	6832      	ldr	r2, [r6, #0]
 8004e5e:	f04f 0600 	mov.w	r6, #0
 8004e62:	68a3      	ldr	r3, [r4, #8]
 8004e64:	bf08      	it	eq
 8004e66:	1aad      	subeq	r5, r5, r2
 8004e68:	6922      	ldr	r2, [r4, #16]
 8004e6a:	bf08      	it	eq
 8004e6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e70:	4293      	cmp	r3, r2
 8004e72:	bfc4      	itt	gt
 8004e74:	1a9b      	subgt	r3, r3, r2
 8004e76:	18ed      	addgt	r5, r5, r3
 8004e78:	341a      	adds	r4, #26
 8004e7a:	42b5      	cmp	r5, r6
 8004e7c:	d11a      	bne.n	8004eb4 <_printf_common+0xcc>
 8004e7e:	2000      	movs	r0, #0
 8004e80:	e008      	b.n	8004e94 <_printf_common+0xac>
 8004e82:	2301      	movs	r3, #1
 8004e84:	4652      	mov	r2, sl
 8004e86:	4649      	mov	r1, r9
 8004e88:	4638      	mov	r0, r7
 8004e8a:	47c0      	blx	r8
 8004e8c:	3001      	adds	r0, #1
 8004e8e:	d103      	bne.n	8004e98 <_printf_common+0xb0>
 8004e90:	f04f 30ff 	mov.w	r0, #4294967295
 8004e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e98:	3501      	adds	r5, #1
 8004e9a:	e7c4      	b.n	8004e26 <_printf_common+0x3e>
 8004e9c:	2030      	movs	r0, #48	; 0x30
 8004e9e:	18e1      	adds	r1, r4, r3
 8004ea0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004eaa:	4422      	add	r2, r4
 8004eac:	3302      	adds	r3, #2
 8004eae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004eb2:	e7c5      	b.n	8004e40 <_printf_common+0x58>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	4622      	mov	r2, r4
 8004eb8:	4649      	mov	r1, r9
 8004eba:	4638      	mov	r0, r7
 8004ebc:	47c0      	blx	r8
 8004ebe:	3001      	adds	r0, #1
 8004ec0:	d0e6      	beq.n	8004e90 <_printf_common+0xa8>
 8004ec2:	3601      	adds	r6, #1
 8004ec4:	e7d9      	b.n	8004e7a <_printf_common+0x92>
	...

08004ec8 <_printf_i>:
 8004ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ecc:	460c      	mov	r4, r1
 8004ece:	7e27      	ldrb	r7, [r4, #24]
 8004ed0:	4691      	mov	r9, r2
 8004ed2:	2f78      	cmp	r7, #120	; 0x78
 8004ed4:	4680      	mov	r8, r0
 8004ed6:	469a      	mov	sl, r3
 8004ed8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004eda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ede:	d807      	bhi.n	8004ef0 <_printf_i+0x28>
 8004ee0:	2f62      	cmp	r7, #98	; 0x62
 8004ee2:	d80a      	bhi.n	8004efa <_printf_i+0x32>
 8004ee4:	2f00      	cmp	r7, #0
 8004ee6:	f000 80d9 	beq.w	800509c <_printf_i+0x1d4>
 8004eea:	2f58      	cmp	r7, #88	; 0x58
 8004eec:	f000 80a4 	beq.w	8005038 <_printf_i+0x170>
 8004ef0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ef4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ef8:	e03a      	b.n	8004f70 <_printf_i+0xa8>
 8004efa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004efe:	2b15      	cmp	r3, #21
 8004f00:	d8f6      	bhi.n	8004ef0 <_printf_i+0x28>
 8004f02:	a001      	add	r0, pc, #4	; (adr r0, 8004f08 <_printf_i+0x40>)
 8004f04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004f08:	08004f61 	.word	0x08004f61
 8004f0c:	08004f75 	.word	0x08004f75
 8004f10:	08004ef1 	.word	0x08004ef1
 8004f14:	08004ef1 	.word	0x08004ef1
 8004f18:	08004ef1 	.word	0x08004ef1
 8004f1c:	08004ef1 	.word	0x08004ef1
 8004f20:	08004f75 	.word	0x08004f75
 8004f24:	08004ef1 	.word	0x08004ef1
 8004f28:	08004ef1 	.word	0x08004ef1
 8004f2c:	08004ef1 	.word	0x08004ef1
 8004f30:	08004ef1 	.word	0x08004ef1
 8004f34:	08005083 	.word	0x08005083
 8004f38:	08004fa5 	.word	0x08004fa5
 8004f3c:	08005065 	.word	0x08005065
 8004f40:	08004ef1 	.word	0x08004ef1
 8004f44:	08004ef1 	.word	0x08004ef1
 8004f48:	080050a5 	.word	0x080050a5
 8004f4c:	08004ef1 	.word	0x08004ef1
 8004f50:	08004fa5 	.word	0x08004fa5
 8004f54:	08004ef1 	.word	0x08004ef1
 8004f58:	08004ef1 	.word	0x08004ef1
 8004f5c:	0800506d 	.word	0x0800506d
 8004f60:	680b      	ldr	r3, [r1, #0]
 8004f62:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f66:	1d1a      	adds	r2, r3, #4
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	600a      	str	r2, [r1, #0]
 8004f6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f70:	2301      	movs	r3, #1
 8004f72:	e0a4      	b.n	80050be <_printf_i+0x1f6>
 8004f74:	6825      	ldr	r5, [r4, #0]
 8004f76:	6808      	ldr	r0, [r1, #0]
 8004f78:	062e      	lsls	r6, r5, #24
 8004f7a:	f100 0304 	add.w	r3, r0, #4
 8004f7e:	d50a      	bpl.n	8004f96 <_printf_i+0xce>
 8004f80:	6805      	ldr	r5, [r0, #0]
 8004f82:	600b      	str	r3, [r1, #0]
 8004f84:	2d00      	cmp	r5, #0
 8004f86:	da03      	bge.n	8004f90 <_printf_i+0xc8>
 8004f88:	232d      	movs	r3, #45	; 0x2d
 8004f8a:	426d      	negs	r5, r5
 8004f8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f90:	230a      	movs	r3, #10
 8004f92:	485e      	ldr	r0, [pc, #376]	; (800510c <_printf_i+0x244>)
 8004f94:	e019      	b.n	8004fca <_printf_i+0x102>
 8004f96:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004f9a:	6805      	ldr	r5, [r0, #0]
 8004f9c:	600b      	str	r3, [r1, #0]
 8004f9e:	bf18      	it	ne
 8004fa0:	b22d      	sxthne	r5, r5
 8004fa2:	e7ef      	b.n	8004f84 <_printf_i+0xbc>
 8004fa4:	680b      	ldr	r3, [r1, #0]
 8004fa6:	6825      	ldr	r5, [r4, #0]
 8004fa8:	1d18      	adds	r0, r3, #4
 8004faa:	6008      	str	r0, [r1, #0]
 8004fac:	0628      	lsls	r0, r5, #24
 8004fae:	d501      	bpl.n	8004fb4 <_printf_i+0xec>
 8004fb0:	681d      	ldr	r5, [r3, #0]
 8004fb2:	e002      	b.n	8004fba <_printf_i+0xf2>
 8004fb4:	0669      	lsls	r1, r5, #25
 8004fb6:	d5fb      	bpl.n	8004fb0 <_printf_i+0xe8>
 8004fb8:	881d      	ldrh	r5, [r3, #0]
 8004fba:	2f6f      	cmp	r7, #111	; 0x6f
 8004fbc:	bf0c      	ite	eq
 8004fbe:	2308      	moveq	r3, #8
 8004fc0:	230a      	movne	r3, #10
 8004fc2:	4852      	ldr	r0, [pc, #328]	; (800510c <_printf_i+0x244>)
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fca:	6866      	ldr	r6, [r4, #4]
 8004fcc:	2e00      	cmp	r6, #0
 8004fce:	bfa8      	it	ge
 8004fd0:	6821      	ldrge	r1, [r4, #0]
 8004fd2:	60a6      	str	r6, [r4, #8]
 8004fd4:	bfa4      	itt	ge
 8004fd6:	f021 0104 	bicge.w	r1, r1, #4
 8004fda:	6021      	strge	r1, [r4, #0]
 8004fdc:	b90d      	cbnz	r5, 8004fe2 <_printf_i+0x11a>
 8004fde:	2e00      	cmp	r6, #0
 8004fe0:	d04d      	beq.n	800507e <_printf_i+0x1b6>
 8004fe2:	4616      	mov	r6, r2
 8004fe4:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fe8:	fb03 5711 	mls	r7, r3, r1, r5
 8004fec:	5dc7      	ldrb	r7, [r0, r7]
 8004fee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ff2:	462f      	mov	r7, r5
 8004ff4:	42bb      	cmp	r3, r7
 8004ff6:	460d      	mov	r5, r1
 8004ff8:	d9f4      	bls.n	8004fe4 <_printf_i+0x11c>
 8004ffa:	2b08      	cmp	r3, #8
 8004ffc:	d10b      	bne.n	8005016 <_printf_i+0x14e>
 8004ffe:	6823      	ldr	r3, [r4, #0]
 8005000:	07df      	lsls	r7, r3, #31
 8005002:	d508      	bpl.n	8005016 <_printf_i+0x14e>
 8005004:	6923      	ldr	r3, [r4, #16]
 8005006:	6861      	ldr	r1, [r4, #4]
 8005008:	4299      	cmp	r1, r3
 800500a:	bfde      	ittt	le
 800500c:	2330      	movle	r3, #48	; 0x30
 800500e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005012:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005016:	1b92      	subs	r2, r2, r6
 8005018:	6122      	str	r2, [r4, #16]
 800501a:	464b      	mov	r3, r9
 800501c:	4621      	mov	r1, r4
 800501e:	4640      	mov	r0, r8
 8005020:	f8cd a000 	str.w	sl, [sp]
 8005024:	aa03      	add	r2, sp, #12
 8005026:	f7ff fedf 	bl	8004de8 <_printf_common>
 800502a:	3001      	adds	r0, #1
 800502c:	d14c      	bne.n	80050c8 <_printf_i+0x200>
 800502e:	f04f 30ff 	mov.w	r0, #4294967295
 8005032:	b004      	add	sp, #16
 8005034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005038:	4834      	ldr	r0, [pc, #208]	; (800510c <_printf_i+0x244>)
 800503a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800503e:	680e      	ldr	r6, [r1, #0]
 8005040:	6823      	ldr	r3, [r4, #0]
 8005042:	f856 5b04 	ldr.w	r5, [r6], #4
 8005046:	061f      	lsls	r7, r3, #24
 8005048:	600e      	str	r6, [r1, #0]
 800504a:	d514      	bpl.n	8005076 <_printf_i+0x1ae>
 800504c:	07d9      	lsls	r1, r3, #31
 800504e:	bf44      	itt	mi
 8005050:	f043 0320 	orrmi.w	r3, r3, #32
 8005054:	6023      	strmi	r3, [r4, #0]
 8005056:	b91d      	cbnz	r5, 8005060 <_printf_i+0x198>
 8005058:	6823      	ldr	r3, [r4, #0]
 800505a:	f023 0320 	bic.w	r3, r3, #32
 800505e:	6023      	str	r3, [r4, #0]
 8005060:	2310      	movs	r3, #16
 8005062:	e7af      	b.n	8004fc4 <_printf_i+0xfc>
 8005064:	6823      	ldr	r3, [r4, #0]
 8005066:	f043 0320 	orr.w	r3, r3, #32
 800506a:	6023      	str	r3, [r4, #0]
 800506c:	2378      	movs	r3, #120	; 0x78
 800506e:	4828      	ldr	r0, [pc, #160]	; (8005110 <_printf_i+0x248>)
 8005070:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005074:	e7e3      	b.n	800503e <_printf_i+0x176>
 8005076:	065e      	lsls	r6, r3, #25
 8005078:	bf48      	it	mi
 800507a:	b2ad      	uxthmi	r5, r5
 800507c:	e7e6      	b.n	800504c <_printf_i+0x184>
 800507e:	4616      	mov	r6, r2
 8005080:	e7bb      	b.n	8004ffa <_printf_i+0x132>
 8005082:	680b      	ldr	r3, [r1, #0]
 8005084:	6826      	ldr	r6, [r4, #0]
 8005086:	1d1d      	adds	r5, r3, #4
 8005088:	6960      	ldr	r0, [r4, #20]
 800508a:	600d      	str	r5, [r1, #0]
 800508c:	0635      	lsls	r5, r6, #24
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	d501      	bpl.n	8005096 <_printf_i+0x1ce>
 8005092:	6018      	str	r0, [r3, #0]
 8005094:	e002      	b.n	800509c <_printf_i+0x1d4>
 8005096:	0671      	lsls	r1, r6, #25
 8005098:	d5fb      	bpl.n	8005092 <_printf_i+0x1ca>
 800509a:	8018      	strh	r0, [r3, #0]
 800509c:	2300      	movs	r3, #0
 800509e:	4616      	mov	r6, r2
 80050a0:	6123      	str	r3, [r4, #16]
 80050a2:	e7ba      	b.n	800501a <_printf_i+0x152>
 80050a4:	680b      	ldr	r3, [r1, #0]
 80050a6:	1d1a      	adds	r2, r3, #4
 80050a8:	600a      	str	r2, [r1, #0]
 80050aa:	681e      	ldr	r6, [r3, #0]
 80050ac:	2100      	movs	r1, #0
 80050ae:	4630      	mov	r0, r6
 80050b0:	6862      	ldr	r2, [r4, #4]
 80050b2:	f000 f8d9 	bl	8005268 <memchr>
 80050b6:	b108      	cbz	r0, 80050bc <_printf_i+0x1f4>
 80050b8:	1b80      	subs	r0, r0, r6
 80050ba:	6060      	str	r0, [r4, #4]
 80050bc:	6863      	ldr	r3, [r4, #4]
 80050be:	6123      	str	r3, [r4, #16]
 80050c0:	2300      	movs	r3, #0
 80050c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050c6:	e7a8      	b.n	800501a <_printf_i+0x152>
 80050c8:	4632      	mov	r2, r6
 80050ca:	4649      	mov	r1, r9
 80050cc:	4640      	mov	r0, r8
 80050ce:	6923      	ldr	r3, [r4, #16]
 80050d0:	47d0      	blx	sl
 80050d2:	3001      	adds	r0, #1
 80050d4:	d0ab      	beq.n	800502e <_printf_i+0x166>
 80050d6:	6823      	ldr	r3, [r4, #0]
 80050d8:	079b      	lsls	r3, r3, #30
 80050da:	d413      	bmi.n	8005104 <_printf_i+0x23c>
 80050dc:	68e0      	ldr	r0, [r4, #12]
 80050de:	9b03      	ldr	r3, [sp, #12]
 80050e0:	4298      	cmp	r0, r3
 80050e2:	bfb8      	it	lt
 80050e4:	4618      	movlt	r0, r3
 80050e6:	e7a4      	b.n	8005032 <_printf_i+0x16a>
 80050e8:	2301      	movs	r3, #1
 80050ea:	4632      	mov	r2, r6
 80050ec:	4649      	mov	r1, r9
 80050ee:	4640      	mov	r0, r8
 80050f0:	47d0      	blx	sl
 80050f2:	3001      	adds	r0, #1
 80050f4:	d09b      	beq.n	800502e <_printf_i+0x166>
 80050f6:	3501      	adds	r5, #1
 80050f8:	68e3      	ldr	r3, [r4, #12]
 80050fa:	9903      	ldr	r1, [sp, #12]
 80050fc:	1a5b      	subs	r3, r3, r1
 80050fe:	42ab      	cmp	r3, r5
 8005100:	dcf2      	bgt.n	80050e8 <_printf_i+0x220>
 8005102:	e7eb      	b.n	80050dc <_printf_i+0x214>
 8005104:	2500      	movs	r5, #0
 8005106:	f104 0619 	add.w	r6, r4, #25
 800510a:	e7f5      	b.n	80050f8 <_printf_i+0x230>
 800510c:	080053cd 	.word	0x080053cd
 8005110:	080053de 	.word	0x080053de

08005114 <_sbrk_r>:
 8005114:	b538      	push	{r3, r4, r5, lr}
 8005116:	2300      	movs	r3, #0
 8005118:	4d05      	ldr	r5, [pc, #20]	; (8005130 <_sbrk_r+0x1c>)
 800511a:	4604      	mov	r4, r0
 800511c:	4608      	mov	r0, r1
 800511e:	602b      	str	r3, [r5, #0]
 8005120:	f7fc f9f8 	bl	8001514 <_sbrk>
 8005124:	1c43      	adds	r3, r0, #1
 8005126:	d102      	bne.n	800512e <_sbrk_r+0x1a>
 8005128:	682b      	ldr	r3, [r5, #0]
 800512a:	b103      	cbz	r3, 800512e <_sbrk_r+0x1a>
 800512c:	6023      	str	r3, [r4, #0]
 800512e:	bd38      	pop	{r3, r4, r5, pc}
 8005130:	20000338 	.word	0x20000338

08005134 <__sread>:
 8005134:	b510      	push	{r4, lr}
 8005136:	460c      	mov	r4, r1
 8005138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800513c:	f000 f8ae 	bl	800529c <_read_r>
 8005140:	2800      	cmp	r0, #0
 8005142:	bfab      	itete	ge
 8005144:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005146:	89a3      	ldrhlt	r3, [r4, #12]
 8005148:	181b      	addge	r3, r3, r0
 800514a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800514e:	bfac      	ite	ge
 8005150:	6563      	strge	r3, [r4, #84]	; 0x54
 8005152:	81a3      	strhlt	r3, [r4, #12]
 8005154:	bd10      	pop	{r4, pc}

08005156 <__swrite>:
 8005156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800515a:	461f      	mov	r7, r3
 800515c:	898b      	ldrh	r3, [r1, #12]
 800515e:	4605      	mov	r5, r0
 8005160:	05db      	lsls	r3, r3, #23
 8005162:	460c      	mov	r4, r1
 8005164:	4616      	mov	r6, r2
 8005166:	d505      	bpl.n	8005174 <__swrite+0x1e>
 8005168:	2302      	movs	r3, #2
 800516a:	2200      	movs	r2, #0
 800516c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005170:	f000 f868 	bl	8005244 <_lseek_r>
 8005174:	89a3      	ldrh	r3, [r4, #12]
 8005176:	4632      	mov	r2, r6
 8005178:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800517c:	81a3      	strh	r3, [r4, #12]
 800517e:	4628      	mov	r0, r5
 8005180:	463b      	mov	r3, r7
 8005182:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800518a:	f000 b817 	b.w	80051bc <_write_r>

0800518e <__sseek>:
 800518e:	b510      	push	{r4, lr}
 8005190:	460c      	mov	r4, r1
 8005192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005196:	f000 f855 	bl	8005244 <_lseek_r>
 800519a:	1c43      	adds	r3, r0, #1
 800519c:	89a3      	ldrh	r3, [r4, #12]
 800519e:	bf15      	itete	ne
 80051a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80051a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80051a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80051aa:	81a3      	strheq	r3, [r4, #12]
 80051ac:	bf18      	it	ne
 80051ae:	81a3      	strhne	r3, [r4, #12]
 80051b0:	bd10      	pop	{r4, pc}

080051b2 <__sclose>:
 80051b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051b6:	f000 b813 	b.w	80051e0 <_close_r>
	...

080051bc <_write_r>:
 80051bc:	b538      	push	{r3, r4, r5, lr}
 80051be:	4604      	mov	r4, r0
 80051c0:	4608      	mov	r0, r1
 80051c2:	4611      	mov	r1, r2
 80051c4:	2200      	movs	r2, #0
 80051c6:	4d05      	ldr	r5, [pc, #20]	; (80051dc <_write_r+0x20>)
 80051c8:	602a      	str	r2, [r5, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	f7fc f955 	bl	800147a <_write>
 80051d0:	1c43      	adds	r3, r0, #1
 80051d2:	d102      	bne.n	80051da <_write_r+0x1e>
 80051d4:	682b      	ldr	r3, [r5, #0]
 80051d6:	b103      	cbz	r3, 80051da <_write_r+0x1e>
 80051d8:	6023      	str	r3, [r4, #0]
 80051da:	bd38      	pop	{r3, r4, r5, pc}
 80051dc:	20000338 	.word	0x20000338

080051e0 <_close_r>:
 80051e0:	b538      	push	{r3, r4, r5, lr}
 80051e2:	2300      	movs	r3, #0
 80051e4:	4d05      	ldr	r5, [pc, #20]	; (80051fc <_close_r+0x1c>)
 80051e6:	4604      	mov	r4, r0
 80051e8:	4608      	mov	r0, r1
 80051ea:	602b      	str	r3, [r5, #0]
 80051ec:	f7fc f961 	bl	80014b2 <_close>
 80051f0:	1c43      	adds	r3, r0, #1
 80051f2:	d102      	bne.n	80051fa <_close_r+0x1a>
 80051f4:	682b      	ldr	r3, [r5, #0]
 80051f6:	b103      	cbz	r3, 80051fa <_close_r+0x1a>
 80051f8:	6023      	str	r3, [r4, #0]
 80051fa:	bd38      	pop	{r3, r4, r5, pc}
 80051fc:	20000338 	.word	0x20000338

08005200 <_fstat_r>:
 8005200:	b538      	push	{r3, r4, r5, lr}
 8005202:	2300      	movs	r3, #0
 8005204:	4d06      	ldr	r5, [pc, #24]	; (8005220 <_fstat_r+0x20>)
 8005206:	4604      	mov	r4, r0
 8005208:	4608      	mov	r0, r1
 800520a:	4611      	mov	r1, r2
 800520c:	602b      	str	r3, [r5, #0]
 800520e:	f7fc f95b 	bl	80014c8 <_fstat>
 8005212:	1c43      	adds	r3, r0, #1
 8005214:	d102      	bne.n	800521c <_fstat_r+0x1c>
 8005216:	682b      	ldr	r3, [r5, #0]
 8005218:	b103      	cbz	r3, 800521c <_fstat_r+0x1c>
 800521a:	6023      	str	r3, [r4, #0]
 800521c:	bd38      	pop	{r3, r4, r5, pc}
 800521e:	bf00      	nop
 8005220:	20000338 	.word	0x20000338

08005224 <_isatty_r>:
 8005224:	b538      	push	{r3, r4, r5, lr}
 8005226:	2300      	movs	r3, #0
 8005228:	4d05      	ldr	r5, [pc, #20]	; (8005240 <_isatty_r+0x1c>)
 800522a:	4604      	mov	r4, r0
 800522c:	4608      	mov	r0, r1
 800522e:	602b      	str	r3, [r5, #0]
 8005230:	f7fc f959 	bl	80014e6 <_isatty>
 8005234:	1c43      	adds	r3, r0, #1
 8005236:	d102      	bne.n	800523e <_isatty_r+0x1a>
 8005238:	682b      	ldr	r3, [r5, #0]
 800523a:	b103      	cbz	r3, 800523e <_isatty_r+0x1a>
 800523c:	6023      	str	r3, [r4, #0]
 800523e:	bd38      	pop	{r3, r4, r5, pc}
 8005240:	20000338 	.word	0x20000338

08005244 <_lseek_r>:
 8005244:	b538      	push	{r3, r4, r5, lr}
 8005246:	4604      	mov	r4, r0
 8005248:	4608      	mov	r0, r1
 800524a:	4611      	mov	r1, r2
 800524c:	2200      	movs	r2, #0
 800524e:	4d05      	ldr	r5, [pc, #20]	; (8005264 <_lseek_r+0x20>)
 8005250:	602a      	str	r2, [r5, #0]
 8005252:	461a      	mov	r2, r3
 8005254:	f7fc f951 	bl	80014fa <_lseek>
 8005258:	1c43      	adds	r3, r0, #1
 800525a:	d102      	bne.n	8005262 <_lseek_r+0x1e>
 800525c:	682b      	ldr	r3, [r5, #0]
 800525e:	b103      	cbz	r3, 8005262 <_lseek_r+0x1e>
 8005260:	6023      	str	r3, [r4, #0]
 8005262:	bd38      	pop	{r3, r4, r5, pc}
 8005264:	20000338 	.word	0x20000338

08005268 <memchr>:
 8005268:	4603      	mov	r3, r0
 800526a:	b510      	push	{r4, lr}
 800526c:	b2c9      	uxtb	r1, r1
 800526e:	4402      	add	r2, r0
 8005270:	4293      	cmp	r3, r2
 8005272:	4618      	mov	r0, r3
 8005274:	d101      	bne.n	800527a <memchr+0x12>
 8005276:	2000      	movs	r0, #0
 8005278:	e003      	b.n	8005282 <memchr+0x1a>
 800527a:	7804      	ldrb	r4, [r0, #0]
 800527c:	3301      	adds	r3, #1
 800527e:	428c      	cmp	r4, r1
 8005280:	d1f6      	bne.n	8005270 <memchr+0x8>
 8005282:	bd10      	pop	{r4, pc}

08005284 <__malloc_lock>:
 8005284:	4801      	ldr	r0, [pc, #4]	; (800528c <__malloc_lock+0x8>)
 8005286:	f7ff bb4b 	b.w	8004920 <__retarget_lock_acquire_recursive>
 800528a:	bf00      	nop
 800528c:	20000330 	.word	0x20000330

08005290 <__malloc_unlock>:
 8005290:	4801      	ldr	r0, [pc, #4]	; (8005298 <__malloc_unlock+0x8>)
 8005292:	f7ff bb46 	b.w	8004922 <__retarget_lock_release_recursive>
 8005296:	bf00      	nop
 8005298:	20000330 	.word	0x20000330

0800529c <_read_r>:
 800529c:	b538      	push	{r3, r4, r5, lr}
 800529e:	4604      	mov	r4, r0
 80052a0:	4608      	mov	r0, r1
 80052a2:	4611      	mov	r1, r2
 80052a4:	2200      	movs	r2, #0
 80052a6:	4d05      	ldr	r5, [pc, #20]	; (80052bc <_read_r+0x20>)
 80052a8:	602a      	str	r2, [r5, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	f7fc f8c8 	bl	8001440 <_read>
 80052b0:	1c43      	adds	r3, r0, #1
 80052b2:	d102      	bne.n	80052ba <_read_r+0x1e>
 80052b4:	682b      	ldr	r3, [r5, #0]
 80052b6:	b103      	cbz	r3, 80052ba <_read_r+0x1e>
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	bd38      	pop	{r3, r4, r5, pc}
 80052bc:	20000338 	.word	0x20000338

080052c0 <_init>:
 80052c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c2:	bf00      	nop
 80052c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052c6:	bc08      	pop	{r3}
 80052c8:	469e      	mov	lr, r3
 80052ca:	4770      	bx	lr

080052cc <_fini>:
 80052cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ce:	bf00      	nop
 80052d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052d2:	bc08      	pop	{r3}
 80052d4:	469e      	mov	lr, r3
 80052d6:	4770      	bx	lr
